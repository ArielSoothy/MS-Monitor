{"version":3,"file":"Overview-BDHE52wo.js","sources":["../../src/hooks/useAzureData.ts","../../src/components/AzureQueryDemo.tsx","../../src/pages/Overview.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { azureService, type ThreatOverviewData, type GeographicThreat, type ThreatCorrelation, type PipelineHealthData, type SecurityTimelineEvent } from '../services/azureService';\nimport { generateMockPipelines } from '../data/mockData';\n\ninterface AzureDataState {\n  // Connection status\n  isConnected: boolean;\n  isLoading: boolean;\n  error: string | null;\n  \n  // Data from Azure\n  threatOverview: ThreatOverviewData | null;\n  geographicThreats: GeographicThreat[];\n  threatCorrelations: ThreatCorrelation[];\n  pipelineHealth: PipelineHealthData[];\n  securityTimeline: SecurityTimelineEvent[];\n  \n  // Fallback data\n  mockPipelines: any[];\n  \n  // Methods\n  refresh: () => Promise<void>;\n  testConnection: () => Promise<boolean>;\n  executeCustomQuery: (query: string) => Promise<any[]>;\n}\n\nexport const useAzureData = (): AzureDataState => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Azure data state\n  const [threatOverview, setThreatOverview] = useState<ThreatOverviewData | null>(null);\n  const [geographicThreats, setGeographicThreats] = useState<GeographicThreat[]>([]);\n  const [threatCorrelations, setThreatCorrelations] = useState<ThreatCorrelation[]>([]);\n  const [pipelineHealth, setPipelineHealth] = useState<PipelineHealthData[]>([]);\n  const [securityTimeline, setSecurityTimeline] = useState<SecurityTimelineEvent[]>([]);\n  \n  // Fallback mock data\n  const [mockPipelines] = useState(() => generateMockPipelines());\n\n  /**\n   * Test connection to Azure Data Explorer\n   */\n  const testConnection = useCallback(async (): Promise<boolean> => {\n    try {\n      const connected = await azureService.testConnection();\n      setIsConnected(connected);\n      if (connected) {\n        setError(null);\n      }\n      return connected;\n    } catch (err) {\n      setIsConnected(false);\n      setError(err instanceof Error ? err.message : 'Connection failed');\n      return false;\n    }\n  }, []);\n\n  /**\n   * Load all data from Azure Data Explorer\n   */\n  const loadAzureData = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      console.log('🔄 Loading MSTIC data from Azure Data Explorer...');\n      \n      // Load all data in parallel\n      const [\n        overviewData,\n        geoData,\n        correlationData,\n        healthData,\n        timelineData\n      ] = await Promise.all([\n        azureService.getThreatOverview(),\n        azureService.getGeographicThreats(),\n        azureService.getThreatCorrelations(),\n        azureService.getPipelineHealth(),\n        azureService.getSecurityTimeline()\n      ]);\n\n      // Update state with real data\n      setThreatOverview(overviewData);\n      setGeographicThreats(geoData);\n      setThreatCorrelations(correlationData);\n      setPipelineHealth(healthData);\n      setSecurityTimeline(timelineData);\n\n      console.log('✅ Azure data loaded successfully', {\n        threatOverview: overviewData,\n        geographicThreats: geoData.length,\n        threatCorrelations: correlationData.length,\n        pipelineHealth: healthData.length,\n        securityTimeline: timelineData.length\n      });\n\n    } catch (err) {\n      console.error('❌ Failed to load Azure data:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load data');\n      \n      // If Azure fails, we'll use mock data for the demo\n      console.log('🎭 Falling back to mock data for demo');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Refresh all data\n   */\n  const refresh = useCallback(async () => {\n    await testConnection();\n    await loadAzureData();\n  }, [testConnection, loadAzureData]);\n\n  /**\n   * Execute custom KQL query\n   */\n  const executeCustomQuery = useCallback(async (query: string): Promise<any[]> => {\n    try {\n      return await azureService.executeCustomQuery(query);\n    } catch (err) {\n      console.error('Failed to execute custom query:', err);\n      return [];\n    }\n  }, []);\n\n  /**\n   * Initialize data on mount\n   */\n  useEffect(() => {\n    let mounted = true;\n\n    const initialize = async () => {\n      console.log('🚀 Initializing Azure Data Explorer connection...');\n      \n      // Test connection first\n      const connected = await testConnection();\n      \n      if (mounted) {\n        if (connected) {\n          console.log('✅ Azure Data Explorer connected');\n          await loadAzureData();\n        } else {\n          console.log('⚠️ Azure Data Explorer not available - using mock data for demo');\n          setIsLoading(false);\n        }\n      }\n    };\n\n    initialize();\n\n    return () => {\n      mounted = false;\n    };\n  }, [testConnection, loadAzureData]);\n\n  return {\n    // Connection status\n    isConnected,\n    isLoading,\n    error,\n    \n    // Azure data\n    threatOverview,\n    geographicThreats,\n    threatCorrelations,\n    pipelineHealth,\n    securityTimeline,\n    \n    // Fallback data\n    mockPipelines,\n    \n    // Methods\n    refresh,\n    testConnection,\n    executeCustomQuery\n  };\n};\n\nexport default useAzureData;\n","import { useState } from 'react';\nimport { Database, Play, Copy, Check } from 'lucide-react';\nimport { useAzureData } from '../hooks/useAzureData';\nimport { AZURE_CONFIG } from '../config/azure';\nimport styles from './AzureQueryDemo.module.css';\n\ninterface AzureQueryDemoProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst AzureQueryDemo: React.FC<AzureQueryDemoProps> = ({ isOpen, onClose }) => {\n  const azureData = useAzureData();\n  const [selectedQuery, setSelectedQuery] = useState<string>('threatOverview');\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [copiedQuery, setCopiedQuery] = useState<string | null>(null);\n  const [queryResult, setQueryResult] = useState<any>(null);\n\n  const queryOptions = [\n    { key: 'threatOverview', label: 'Executive Threat Overview', description: 'High-level security metrics for leadership' },\n    { key: 'geographicThreats', label: 'Geographic Threat Analysis', description: 'Threat distribution by location' },\n    { key: 'threatCorrelation', label: 'Real-time Threat Correlation', description: 'Live threat intelligence correlation' },\n    { key: 'pipelineHealth', label: 'Pipeline Performance Metrics', description: 'Data pipeline health and performance' },\n    { key: 'securityTimeline', label: 'Security Incident Timeline', description: 'Chronological security events' }\n  ];\n\n  const handleExecuteQuery = async () => {\n    setIsExecuting(true);\n    setQueryResult(null);\n\n    try {\n      // Simulate query execution delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      switch (selectedQuery) {\n        case 'threatOverview':\n          setQueryResult(azureData.threatOverview);\n          break;\n        case 'geographicThreats':\n          setQueryResult(azureData.geographicThreats.slice(0, 3));\n          break;\n        case 'threatCorrelation':\n          setQueryResult(azureData.threatCorrelations.slice(0, 5));\n          break;\n        case 'pipelineHealth':\n          setQueryResult(azureData.pipelineHealth.slice(0, 3));\n          break;\n        case 'securityTimeline':\n          setQueryResult(azureData.securityTimeline.slice(0, 5));\n          break;\n      }\n    } catch (error) {\n      console.error('Query execution failed:', error);\n    } finally {\n      setIsExecuting(false);\n    }\n  };\n\n  const handleCopyQuery = async (queryKey: string) => {\n    const query = AZURE_CONFIG.queries[queryKey as keyof typeof AZURE_CONFIG.queries];\n    try {\n      await navigator.clipboard.writeText(query);\n      setCopiedQuery(queryKey);\n      setTimeout(() => setCopiedQuery(null), 2000);\n    } catch (error) {\n      console.error('Failed to copy query:', error);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className={styles.overlay} onClick={onClose}>\n      <div className={styles.modal} onClick={(e) => e.stopPropagation()}>\n        <div className={styles.header}>\n          <div className={styles.title}>\n            <Database className={styles.icon} />\n            <span>Azure Data Explorer - Live KQL Demo</span>\n          </div>\n          <button className={styles.closeButton} onClick={onClose}>×</button>\n        </div>\n\n        <div className={styles.content}>\n          <div className={styles.statusSection}>\n            <div className={styles.connectionStatus}>\n              <div className={`${styles.statusDot} ${azureData.isConnected ? styles.connected : styles.disconnected}`}></div>\n              <span>\n                {azureData.isConnected \n                  ? `Connected to ${AZURE_CONFIG.cluster}` \n                  : 'Demo Mode - Azure Data Explorer unavailable'\n                }\n              </span>\n            </div>\n            {azureData.error && (\n              <div className={styles.errorMessage}>\n                Error: {azureData.error}\n              </div>\n            )}\n          </div>\n\n          <div className={styles.querySection}>\n            <h3>Available MSTIC Queries</h3>\n            <div className={styles.queryList}>\n              {queryOptions.map((option) => (\n                <div key={option.key} className={styles.queryOption}>\n                  <label className={styles.queryLabel}>\n                    <input\n                      type=\"radio\"\n                      name=\"query\"\n                      value={option.key}\n                      checked={selectedQuery === option.key}\n                      onChange={(e) => setSelectedQuery(e.target.value)}\n                      className={styles.queryRadio}\n                    />\n                    <div className={styles.queryInfo}>\n                      <span className={styles.queryName}>{option.label}</span>\n                      <span className={styles.queryDescription}>{option.description}</span>\n                    </div>\n                  </label>\n                  <button\n                    className={styles.copyButton}\n                    onClick={() => handleCopyQuery(option.key)}\n                    title=\"Copy KQL query\"\n                  >\n                    {copiedQuery === option.key ? (\n                      <Check size={16} className={styles.copySuccess} />\n                    ) : (\n                      <Copy size={16} />\n                    )}\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className={styles.queryPreview}>\n            <h4>KQL Query:</h4>\n            <pre className={styles.queryCode}>\n              {AZURE_CONFIG.queries[selectedQuery as keyof typeof AZURE_CONFIG.queries]}\n            </pre>\n          </div>\n\n          <div className={styles.actions}>\n            <button\n              className={styles.executeButton}\n              onClick={handleExecuteQuery}\n              disabled={isExecuting || azureData.isLoading}\n            >\n              <Play size={16} />\n              {isExecuting ? 'Executing...' : 'Execute Query'}\n            </button>\n          </div>\n\n          {queryResult && (\n            <div className={styles.results}>\n              <h4>Query Results:</h4>\n              <pre className={styles.resultCode}>\n                {JSON.stringify(queryResult, null, 2)}\n              </pre>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AzureQueryDemo;\n","import { useState, useEffect, useMemo, memo } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\nimport { Activity, AlertTriangle, TrendingUp, Server, RefreshCw, HelpCircle, Shield, UserX, Database } from 'lucide-react';\nimport { mockPipelines, mockAlerts } from '../data/mockData';\nimport type { Pipeline } from '../types';\nimport HowItWorksModal from '../components/HowItWorksModal';\nimport AzureQueryDemo from '../components/AzureQueryDemo';\nimport InfoTooltip from '../components/InfoTooltip';\nimport { getTooltipContent } from '../utils/tooltipContent';\nimport { useAzureData } from '../hooks/useAzureData';\nimport styles from './Overview.module.css';\n\nconst Overview = memo(() => {\n  // Azure Data Integration\n  const azureData = useAzureData();\n  \n  // Fallback to mock data\n  const [pipelines] = useState<Pipeline[]>(mockPipelines);\n  const [alerts] = useState(mockAlerts);\n  const [currentIngestionRate, setCurrentIngestionRate] = useState(1247);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastRefresh, setLastRefresh] = useState(new Date());\n  const [showHowItWorks, setShowHowItWorks] = useState(false);\n  const [showAzureDemo, setShowAzureDemo] = useState(false);\n\n  // Generate mock ingestion rate data for the last 24 hours\n  const [ingestionData] = useState(() => {\n    const data = [];\n    const now = new Date();\n    for (let i = 23; i >= 0; i--) {\n      const time = new Date(now.getTime() - i * 60 * 60 * 1000);\n      data.push({\n        time: time.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),\n        rate: Math.floor(Math.random() * 500) + 800 // Random rate between 800-1300\n      });\n    }\n    return data;\n  });\n\n  // Auto-refresh simulation every 5 seconds\n  useEffect(() => {\n    setIsLoading(false);\n    \n    const interval = setInterval(() => {\n      // Fluctuate ingestion rate slightly\n      setCurrentIngestionRate(prev => {\n        const change = (Math.random() - 0.5) * 100; // ±50 change\n        const newRate = Math.max(800, Math.min(1500, prev + change));\n        return Math.floor(newRate);\n      });\n      setLastRefresh(new Date());\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Calculate metrics using useMemo for performance\n  const metrics = useMemo(() => ({\n    totalPipelines: pipelines.length,\n    healthyPipelines: pipelines.filter(p => p.status === 'healthy').length,\n    warningPipelines: pipelines.filter(p => p.status === 'warning').length,\n    failedPipelines: pipelines.filter(p => p.status === 'failed').length,\n    processingPipelines: pipelines.filter(p => p.status === 'processing').length,\n  }), [pipelines]);\n\n  const { totalPipelines, healthyPipelines, warningPipelines, failedPipelines, processingPipelines } = metrics;\n  \n  const unresolvedAlerts = alerts.filter(a => !a.resolved).length;\n  const criticalAlerts = alerts.filter(a => !a.resolved && a.severity === 'critical').length;\n  const warningAlerts = alerts.filter(a => !a.resolved && (a.severity === 'high' || a.severity === 'medium')).length;\n\n  // Calculate system health score (0-100)\n  const systemHealthScore = Math.round(\n    (healthyPipelines * 100 + warningPipelines * 70 + processingPipelines * 85) / totalPipelines\n  );\n\n  // Status distribution data for donut chart\n  const statusData = [\n    { name: 'Healthy', value: healthyPipelines, color: '#52c41a' },\n    { name: 'Warning', value: warningPipelines, color: '#faad14' },\n    { name: 'Failed', value: failedPipelines, color: '#f5222d' },\n    { name: 'Processing', value: processingPipelines, color: '#1890ff' }\n  ];\n\n  // Get top 5 failing pipelines\n  const failingPipelines = pipelines\n    .filter(p => p.status === 'failed' || p.status === 'warning')\n    .filter(p => p.failureRate !== undefined && p.failureRate !== null)\n    .sort((a, b) => (b.failureRate || 0) - (a.failureRate || 0))\n    .slice(0, 5);\n\n  // Team-based analytics with enhanced calculations\n  const teamMetrics = pipelines.reduce((acc, pipeline) => {\n    const team = pipeline.ownerTeam || 'Unknown';\n    if (!acc[team]) {\n      acc[team] = { \n        total: 0, \n        healthy: 0, \n        failed: 0, \n        warning: 0, \n        processing: 0,\n        avgFailureRate: 0,\n        totalFailureRate: 0\n      };\n    }\n    acc[team].total++;\n    acc[team][pipeline.status as keyof typeof acc[typeof team]]++;\n    acc[team].totalFailureRate += pipeline.failureRate;\n    return acc;\n  }, {} as Record<string, any>);\n\n  const teamHealthData = Object.entries(teamMetrics)\n    .map(([team, metrics]) => {\n      const healthPercentage = Math.round((metrics.healthy / metrics.total) * 100);\n      const avgFailureRate = Math.round((metrics.totalFailureRate / metrics.total) * 100) / 100;\n      \n      return {\n        team: team.length > 15 ? team.substring(0, 15) + '...' : team,\n        fullTeam: team,\n        healthPercentage,\n        avgFailureRate,\n        total: metrics.total,\n        healthy: metrics.healthy,\n        failed: metrics.failed,\n        warning: metrics.warning,\n        processing: metrics.processing\n      };\n    })\n    .filter(team => team.total >= 3) // Only show teams with at least 3 pipelines\n    .sort((a, b) => b.healthPercentage - a.healthPercentage)\n    .slice(0, 8); // Show top 8 teams\n\n  // Data classification insights\n  const classificationData = pipelines.reduce((acc, pipeline) => {\n    const classification = pipeline.dataClassification || 'Unknown';\n    if (!acc[classification]) {\n      acc[classification] = { total: 0, healthy: 0, failed: 0 };\n    }\n    acc[classification].total++;\n    if (pipeline.status === 'healthy') acc[classification].healthy++;\n    if (pipeline.status === 'failed') acc[classification].failed++;\n    return acc;\n  }, {} as Record<string, any>);\n\n  const classificationChartData = Object.entries(classificationData).map(([name, data]) => ({\n    name,\n    total: data.total,\n    healthy: data.healthy,\n    failed: data.failed,\n    healthPercentage: Math.round((data.healthy / data.total) * 100)\n  }));\n\n  // SLA compliance analysis\n  const slaBreaches = pipelines.filter(p => {\n    const slaMinutes = p.slaRequirement || 60;\n    const lastRun = new Date(p.lastRun);\n    const now = new Date();\n    const minutesSinceLastRun = (now.getTime() - lastRun.getTime()) / (1000 * 60);\n    return minutesSinceLastRun > slaMinutes && p.status !== 'processing';\n  });\n\n  // Security Monitoring: Failed Login Detection (Interview Scenario #2)\n  // Mock data for the famous \"3+ login failures in 10 minutes per user from different IPs\" scenario\n  const [failedLoginData] = useState(() => {\n    const now = new Date();\n    const data = [];\n    \n    // Generate mock failed login attempts for the last 4 hours\n    for (let i = 240; i >= 0; i -= 10) { // Every 10 minutes\n      const time = new Date(now.getTime() - i * 60 * 1000);\n      const suspiciousUsers = Math.floor(Math.random() * 5); // 0-4 users with suspicious activity\n      const totalFailedAttempts = suspiciousUsers * 3 + Math.floor(Math.random() * 10); // Base + random\n      \n      data.push({\n        time: time.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),\n        fullTime: time,\n        suspiciousUsers,\n        totalFailedAttempts,\n        threshold: 3, // Alert threshold\n        // Mock specific user examples\n        alertedUsers: suspiciousUsers > 0 ? [\n          { user: 'external_user_42', attempts: 5, ips: ['192.168.1.100', '10.0.0.50', '172.16.0.200'] },\n          { user: 'temp_contractor_99', attempts: 4, ips: ['203.45.67.89', '45.123.45.67'] },\n          { user: 'guest_account_77', attempts: 3, ips: ['198.51.100.14', '203.0.113.45', '192.0.2.100'] }\n        ].slice(0, suspiciousUsers) : []\n      });\n    }\n    return data;\n  });\n\n  // Current suspicious activity summary\n  const currentSuspiciousActivity = useMemo(() => {\n    const recentData = failedLoginData.slice(-6); // Last hour (6 * 10min intervals)\n    const totalSuspiciousUsers = recentData.reduce((sum, d) => sum + d.suspiciousUsers, 0);\n    const totalFailedAttempts = recentData.reduce((sum, d) => sum + d.totalFailedAttempts, 0);\n    const highestRiskUser = recentData\n      .flatMap(d => d.alertedUsers)\n      .sort((a, b) => b.attempts - a.attempts)[0];\n    \n    return {\n      totalSuspiciousUsers,\n      totalFailedAttempts,\n      highestRiskUser,\n      lastDetection: recentData.find(d => d.suspiciousUsers > 0)?.fullTime || null\n    };\n  }, [failedLoginData]);\n\n  // Additional creative security check: Unusual authentication patterns\n  const [authPatternAlerts] = useState(() => {\n    return {\n      offHoursLogins: Math.floor(Math.random() * 15) + 5, // 5-19 off-hours logins\n      geoAnomalies: Math.floor(Math.random() * 8) + 2, // 2-9 geographical anomalies\n      privilegedAccountActivity: Math.floor(Math.random() * 5) + 1, // 1-5 privileged account alerts\n      newDeviceLogins: Math.floor(Math.random() * 25) + 10 // 10-34 new device logins\n    };\n  });\n\n  // SLA compliance rate calculation\n  const slaComplianceRate = Math.round(((totalPipelines - slaBreaches.length) / totalPipelines) * 100);\n\n  const getHealthScoreColor = (score: number) => {\n    if (score >= 90) return '#52c41a';\n    if (score >= 75) return '#faad14';\n    if (score >= 60) return '#ff7a45';\n    return '#f5222d';\n  };\n\n  if (isLoading) {\n    return (\n      <div className={styles.overview}>\n        <div className={styles.loadingContainer}>\n          <RefreshCw className={styles.loadingIcon} />\n          <span>Loading dashboard...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.overview}>\n      {/* Header */}\n      <div className={styles.header}>\n        <div className={styles.headerContent}>\n          <div className={styles.titleSection}>\n            <h1 className={styles.title}>\n              Threat Intelligence Pipeline Dashboard\n              <button \n                className={styles.infoButton}\n                onClick={() => setShowHowItWorks(true)}\n                title=\"How does this system work?\"\n              >\n                <HelpCircle size={18} />\n              </button>\n            </h1>\n            <p className={styles.subtitle}>Real-time monitoring and analytics</p>\n          </div>\n          <div className={styles.headerActions}>\n            <div className={styles.refreshInfo}>\n              <RefreshCw className={styles.refreshIcon} />\n              <span className={styles.refreshText}>\n                Last updated: {lastRefresh.toLocaleTimeString()}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Azure Data Explorer Status */}\n      <div className={styles.azureSection}>\n        <div className={styles.azureHeader}>\n          <div className={styles.azureTitle}>\n            <Database className={styles.azureIcon} />\n            <span>Azure Data Explorer - MSTIC Threat Intelligence</span>\n          </div>\n          <div className={styles.azureControls}>\n            <button \n              className={styles.azureDemoButton}\n              onClick={() => setShowAzureDemo(true)}\n              title=\"View live KQL queries\"\n            >\n              <Database size={16} />\n              KQL Demo\n            </button>\n            <div className={styles.azureStatus}>\n              <div className={`${styles.statusDot} ${azureData.isConnected ? styles.connected : styles.disconnected}`}></div>\n              <span>{azureData.isConnected ? 'Connected' : 'Demo Mode'}</span>\n            </div>\n          </div>\n        </div>\n        \n        {azureData.isConnected && azureData.threatOverview && (\n          <div className={styles.azureMetrics}>\n            <div className={styles.azureMetric}>\n              <span className={styles.azureMetricValue}>{azureData.threatOverview.TotalEvents}</span>\n              <span className={styles.azureMetricLabel}>Security Events (24h)</span>\n            </div>\n            <div className={styles.azureMetric}>\n              <span className={styles.azureMetricValue}>{azureData.threatOverview.HighRiskEvents}</span>\n              <span className={styles.azureMetricLabel}>High-Risk Events</span>\n            </div>\n            <div className={styles.azureMetric}>\n              <span className={styles.azureMetricValue}>{azureData.threatOverview.UniqueIPs}</span>\n              <span className={styles.azureMetricLabel}>Unique IPs</span>\n            </div>\n            <div className={styles.azureMetric}>\n              <span className={styles.azureMetricValue}>{azureData.threatOverview.ThreatPercentage}%</span>\n              <span className={styles.azureMetricLabel}>Threat Percentage</span>\n            </div>\n          </div>\n        )}\n        \n        {!azureData.isConnected && (\n          <div className={styles.azureDemo}>\n            <p>Azure Data Explorer unavailable - using mock data for demonstration</p>\n            <p>In production: Real-time threat intelligence from SecurityEvents, ThreatIndicators, and PipelineHealth tables</p>\n          </div>\n        )}\n      </div>\n\n      {/* Real-time Metrics Header */}\n      <div className={styles.metricsHeader}>\n        <div className={styles.metricCard}>\n          <div className={styles.metricHeader}>\n            <Server className={styles.metricIcon} />\n            <span className={styles.metricTitle}>\n              Total Pipelines\n              <InfoTooltip \n                content={getTooltipContent('totalPipelines')?.content || \"Total number of threat intelligence pipelines\"}\n                title={getTooltipContent('totalPipelines')?.title}\n                detailedContent={getTooltipContent('totalPipelines')?.detailedContent}\n                position=\"top\"\n                size=\"medium\"\n              />\n            </span>\n          </div>\n          <div className={styles.metricValue}>{totalPipelines}</div>\n          <div className={styles.metricBreakdown}>\n            <span className={styles.statusBadge} style={{ backgroundColor: '#52c41a' }}>\n              {healthyPipelines} Healthy\n            </span>\n            <span className={styles.statusBadge} style={{ backgroundColor: '#faad14' }}>\n              {warningPipelines} Warning\n            </span>\n            <span className={styles.statusBadge} style={{ backgroundColor: '#f5222d' }}>\n              {failedPipelines} Failed\n            </span>\n            <span className={styles.statusBadge} style={{ backgroundColor: '#1890ff' }}>\n              {processingPipelines} Processing\n            </span>\n          </div>\n        </div>\n\n        <div className={styles.metricCard}>\n          <div className={styles.metricHeader}>\n            <TrendingUp className={styles.metricIcon} />\n            <span className={styles.metricTitle}>\n              Ingestion Rate\n              <InfoTooltip \n                content={getTooltipContent('ingestionRate')?.content || \"Data ingestion rate across all pipelines\"}\n                title={getTooltipContent('ingestionRate')?.title}\n                detailedContent={getTooltipContent('ingestionRate')?.detailedContent}\n                position=\"top\"\n                size=\"medium\"\n              />\n            </span>\n          </div>\n          <div className={styles.metricValue}>{currentIngestionRate.toLocaleString()}</div>\n          <div className={styles.metricSubtext}>files/hour</div>\n        </div>\n\n        <div className={styles.metricCard}>\n          <div className={styles.metricHeader}>\n            <AlertTriangle className={`${styles.metricIcon} ${styles.warning}`} />\n            <span className={styles.metricTitle}>\n              Active Alerts\n              <InfoTooltip \n                content={getTooltipContent('activeAlerts')?.content || \"Unresolved alerts requiring attention\"}\n                title={getTooltipContent('activeAlerts')?.title}\n                detailedContent={getTooltipContent('activeAlerts')?.detailedContent}\n                position=\"top\"\n                size=\"medium\"\n              />\n            </span>\n          </div>\n          <div className={styles.metricValue}>{unresolvedAlerts}</div>\n          <div className={styles.metricSubtext}>\n            {criticalAlerts} critical, {warningAlerts} warnings\n          </div>\n        </div>\n\n        <div className={styles.metricCard}>\n          <div className={styles.metricHeader}>\n            <Activity className={styles.metricIcon} />\n            <span className={styles.metricTitle}>\n              System Health\n              <InfoTooltip \n                content={getTooltipContent('systemHealthScore')?.content || \"Overall system health percentage\"}\n                title={getTooltipContent('systemHealthScore')?.title}\n                detailedContent={getTooltipContent('systemHealthScore')?.detailedContent}\n                position=\"top\"\n                size=\"medium\"\n              />\n            </span>\n          </div>\n          <div \n            className={styles.metricValue}\n            style={{ color: getHealthScoreColor(systemHealthScore) }}\n          >\n            {systemHealthScore}%\n          </div>\n          <div className={styles.metricSubtext}>Overall system health</div>\n        </div>\n\n        <div className={styles.metricCard}>\n          <div className={styles.metricHeader}>\n            <Activity className={styles.metricIcon} />\n            <span className={styles.metricTitle}>\n              SLA Compliance\n              <InfoTooltip \n                content={getTooltipContent('slaCompliance')?.content || \"Percentage meeting SLA requirements\"}\n                title={getTooltipContent('slaCompliance')?.title}\n                detailedContent={getTooltipContent('slaCompliance')?.detailedContent}\n                position=\"top\"\n                size=\"medium\"\n              />\n            </span>\n          </div>\n          <div \n            className={styles.metricValue} \n            style={{ color: getHealthScoreColor(slaComplianceRate) }}\n          >\n            {slaComplianceRate}%\n          </div>\n          <div className={styles.metricSubtext}>\n            {slaBreaches.length} SLA breaches\n            <InfoTooltip \n              content={getTooltipContent('slaBreaches')?.content || \"Pipelines exceeding SLA requirements\"}\n              title={getTooltipContent('slaBreaches')?.title}\n              detailedContent={getTooltipContent('slaBreaches')?.detailedContent}\n              position=\"top\"\n              size=\"small\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Azure Geographic Threats Section */}\n      {azureData.isConnected && azureData.geographicThreats.length > 0 && (\n        <div className={styles.azureGeoSection}>\n          <h2 className={styles.sectionTitle}>\n            <Database className={styles.sectionIcon} />\n            Live Threat Intelligence - Geographic Distribution\n            <span className={styles.sectionSubtitle}>Real-time data from Azure Data Explorer</span>\n          </h2>\n          \n          <div className={styles.geoThreatsGrid}>\n            {azureData.geographicThreats.slice(0, 6).map((threat, index) => (\n              <div key={index} className={styles.geoThreatCard}>\n                <div className={styles.geoLocation}>\n                  <span className={styles.geoCountry}>{threat.Country}</span>\n                  {threat.City && <span className={styles.geoCity}>{threat.City}</span>}\n                </div>\n                <div className={styles.geoMetrics}>\n                  <div className={styles.geoMetric}>\n                    <span className={styles.geoValue}>{threat.ThreatEvents}</span>\n                    <span className={styles.geoLabel}>Events</span>\n                  </div>\n                  <div className={styles.geoMetric}>\n                    <span className={styles.geoValue}>{(threat.AvgRiskScore || 0).toFixed(1)}</span>\n                    <span className={styles.geoLabel}>Risk Score</span>\n                  </div>\n                  <div className={styles.geoMetric}>\n                    <span className={styles.geoValue}>{threat.UniqueUsers}</span>\n                    <span className={styles.geoLabel}>Users</span>\n                  </div>\n                </div>\n                <div className={styles.riskLevel}>\n                  <span className={`${styles.riskBadge} ${styles[threat.RiskLevel?.toLowerCase() || 'medium']}`}>\n                    {threat.RiskLevel || 'Medium'}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Security Monitoring Section (Interview Scenario #2) */}\n      <div className={styles.securitySection}>\n        <h2 className={styles.sectionTitle}>\n          <Shield className={styles.sectionIcon} />\n          Security Monitoring\n          <span className={styles.sectionSubtitle}>Failed Login Detection & Authentication Patterns</span>\n        </h2>\n        \n        <div className={styles.securityGrid}>\n          {/* Failed Login Attempts Chart */}\n          <div className={styles.securityCard}>\n            <h3 className={styles.chartTitle}>\n              <UserX className={styles.chartIcon} />\n              Failed Login Detection (3+ attempts, 10min window)\n              <InfoTooltip \n                content=\"Monitoring for users with 3+ failed login attempts from different IP addresses within 10 minutes - classic brute force attack pattern\"\n                title=\"Brute Force Detection\"\n                detailedContent=\"This implements the interview scenario: detecting suspicious login patterns that could indicate credential stuffing or brute force attacks\"\n                position=\"top\"\n                size=\"medium\"\n              />\n            </h3>\n            <div className={styles.securitySummary}>\n              <div className={styles.securityMetric}>\n                <span className={styles.securityValue}>{currentSuspiciousActivity.totalSuspiciousUsers}</span>\n                <span className={styles.securityLabel}>Suspicious Users (Last Hour)</span>\n              </div>\n              <div className={styles.securityMetric}>\n                <span className={styles.securityValue}>{currentSuspiciousActivity.totalFailedAttempts}</span>\n                <span className={styles.securityLabel}>Total Failed Attempts</span>\n              </div>\n              {currentSuspiciousActivity.highestRiskUser && (\n                <div className={styles.securityMetric}>\n                  <span className={styles.securityValue}>{currentSuspiciousActivity.highestRiskUser.user}</span>\n                  <span className={styles.securityLabel}>Highest Risk User ({currentSuspiciousActivity.highestRiskUser.attempts} attempts)</span>\n                </div>\n              )}\n            </div>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <LineChart data={failedLoginData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#2a2a2a\" />\n                <XAxis \n                  dataKey=\"time\" \n                  stroke=\"#888\" \n                  fontSize={11}\n                  interval=\"preserveStartEnd\"\n                />\n                <YAxis stroke=\"#888\" fontSize={11} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#1a1a1a', \n                    border: '1px solid #333',\n                    borderRadius: '4px',\n                    color: '#fff'\n                  }}\n                  formatter={(value: any, name: string) => [\n                    value,\n                    name === 'suspiciousUsers' ? 'Suspicious Users' : \n                    name === 'totalFailedAttempts' ? 'Failed Attempts' : 'Threshold'\n                  ]}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"suspiciousUsers\" \n                  stroke=\"#f5222d\" \n                  strokeWidth={2}\n                  dot={{ fill: '#f5222d', strokeWidth: 2, r: 3 }}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"totalFailedAttempts\" \n                  stroke=\"#faad14\" \n                  strokeWidth={1}\n                  strokeDasharray=\"5 5\"\n                  dot={false}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"threshold\" \n                  stroke=\"#52c41a\" \n                  strokeWidth={1}\n                  strokeDasharray=\"2 2\"\n                  dot={false}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Authentication Pattern Analysis */}\n          <div className={styles.securityCard}>\n            <h3 className={styles.chartTitle}>\n              <Shield className={styles.chartIcon} />\n              Authentication Pattern Analysis\n              <InfoTooltip \n                content=\"Additional security checks for unusual authentication behaviors that could indicate compromised accounts\"\n                title=\"Behavioral Analysis\"\n                detailedContent=\"Monitors for off-hours logins, geographical anomalies, privileged account activity, and new device registrations\"\n                position=\"top\"\n                size=\"medium\"\n              />\n            </h3>\n            <div className={styles.authPatterns}>\n              <div className={styles.patternItem}>\n                <div className={styles.patternValue}>{authPatternAlerts.offHoursLogins}</div>\n                <div className={styles.patternLabel}>Off-Hours Logins</div>\n                <div className={styles.patternDesc}>2AM-6AM activity</div>\n              </div>\n              <div className={styles.patternItem}>\n                <div className={styles.patternValue}>{authPatternAlerts.geoAnomalies}</div>\n                <div className={styles.patternLabel}>Geo Anomalies</div>\n                <div className={styles.patternDesc}>Impossible travel</div>\n              </div>\n              <div className={styles.patternItem}>\n                <div className={styles.patternValue}>{authPatternAlerts.privilegedAccountActivity}</div>\n                <div className={styles.patternLabel}>Privileged Alerts</div>\n                <div className={styles.patternDesc}>Admin account flags</div>\n              </div>\n              <div className={styles.patternItem}>\n                <div className={styles.patternValue}>{authPatternAlerts.newDeviceLogins}</div>\n                <div className={styles.patternLabel}>New Devices</div>\n                <div className={styles.patternDesc}>Unrecognized devices</div>\n              </div>\n            </div>\n            <div className={styles.securityStatus}>\n              <div className={styles.statusIndicator}>\n                <div className={`${styles.statusDot} ${styles.healthy}`}></div>\n                <span>Normal patterns detected</span>\n              </div>\n              <div className={styles.lastUpdate}>\n                Last updated: {new Date().toLocaleTimeString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Dashboard Grid (3x2) */}\n      <div className={styles.dashboardGrid}>\n        {/* Pipeline Status Donut Chart */}\n        <div className={styles.chartCard}>\n          <h3 className={styles.chartTitle}>\n            Pipeline Status Distribution\n            <InfoTooltip \n              content={getTooltipContent('pipelineStatusDistribution')?.content || \"Breakdown of pipelines by operational status\"}\n              title={getTooltipContent('pipelineStatusDistribution')?.title}\n              detailedContent={getTooltipContent('pipelineStatusDistribution')?.detailedContent}\n              position=\"top\"\n              size=\"medium\"\n            />\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={statusData}\n                cx=\"50%\"\n                cy=\"50%\"\n                innerRadius={80}\n                outerRadius={120}\n                paddingAngle={2}\n                dataKey=\"value\"\n              >\n                {statusData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip \n                formatter={(value, name) => [`${value} pipelines`, name]}\n                contentStyle={{ \n                  backgroundColor: '#252526', \n                  border: '1px solid #333',\n                  borderRadius: '6px'\n                }} \n              />\n            </PieChart>\n          </ResponsiveContainer>\n          <div className={styles.chartLegend}>\n            {statusData.map((entry, index) => (\n              <div key={index} className={styles.legendItem}>\n                <div \n                  className={styles.legendColor} \n                  style={{ backgroundColor: entry.color }}\n                />\n                <span>{entry.name}: {entry.value}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Team Health Performance */}\n        <div className={styles.chartCard}>\n          <h3 className={styles.chartTitle}>\n            Team Health Performance\n            <InfoTooltip \n              content={getTooltipContent('teamHealthPerformance')?.content || \"Health score rankings by team\"}\n              title={getTooltipContent('teamHealthPerformance')?.title}\n              detailedContent={getTooltipContent('teamHealthPerformance')?.detailedContent}\n              position=\"top\"\n              size=\"medium\"\n            />\n            <span className={styles.chartSubtitle}>Health Score by Team (min. 3 pipelines)</span>\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={320}>\n            <BarChart data={teamHealthData} layout=\"horizontal\" margin={{ top: 5, right: 30, left: 120, bottom: 5 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n              <XAxis \n                type=\"number\" \n                tick={{ fill: '#ccc', fontSize: 12 }}\n                domain={[0, 100]}\n                tickFormatter={(value) => `${value}%`}\n              />\n              <YAxis \n                type=\"category\" \n                dataKey=\"team\" \n                tick={{ fill: '#ccc', fontSize: 10 }}\n                width={115}\n              />\n              <Tooltip \n                formatter={(value, name) => {\n                  if (name === 'healthPercentage') return [`${value}%`, 'Health Score'];\n                  return [value, name];\n                }}\n                labelFormatter={(label) => {\n                  const teamData = teamHealthData.find(t => t.team === label);\n                  return teamData ? `Team: ${teamData.fullTeam}` : `Team: ${label}`;\n                }}\n                contentStyle={{ \n                  backgroundColor: '#252526', \n                  border: '1px solid #333',\n                  borderRadius: '6px'\n                }}\n                content={({ active, payload }) => {\n                  if (active && payload && payload[0]) {\n                    const data = payload[0].payload;\n                    return (\n                      <div style={{ \n                        backgroundColor: '#252526', \n                        border: '1px solid #333',\n                        borderRadius: '6px',\n                        padding: '8px'\n                      }}>\n                        <p style={{ color: '#fff', margin: 0, fontWeight: 'bold' }}>\n                          {data.fullTeam}\n                        </p>\n                        <p style={{ color: '#52c41a', margin: '4px 0' }}>\n                          Health Score: {data.healthPercentage}%\n                        </p>\n                        <p style={{ color: '#ccc', margin: '2px 0', fontSize: '12px' }}>\n                          Total Pipelines: {data.total}\n                        </p>\n                        <p style={{ color: '#52c41a', margin: '2px 0', fontSize: '12px' }}>\n                          Healthy: {data.healthy}\n                        </p>\n                        <p style={{ color: '#faad14', margin: '2px 0', fontSize: '12px' }}>\n                          Warning: {data.warning}\n                        </p>\n                        <p style={{ color: '#f5222d', margin: '2px 0', fontSize: '12px' }}>\n                          Failed: {data.failed}\n                        </p>\n                        <p style={{ color: '#1890ff', margin: '2px 0', fontSize: '12px' }}>\n                          Processing: {data.processing}\n                        </p>\n                      </div>\n                    );\n                  }\n                  return null;\n                }}\n              />\n              <Bar \n                dataKey=\"healthPercentage\" \n                radius={[0, 4, 4, 0]}\n              >\n                {teamHealthData.map((entry, index) => (\n                  <Cell \n                    key={`cell-${index}`} \n                    fill={\n                      entry.healthPercentage >= 90 ? '#52c41a' :\n                      entry.healthPercentage >= 75 ? '#faad14' :\n                      entry.healthPercentage >= 60 ? '#ff7a45' : '#f5222d'\n                    } \n                  />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n          <div className={styles.teamHealthLegend}>\n            <div className={styles.legendItem}>\n              <div className={styles.legendColor} style={{ backgroundColor: '#52c41a' }} />\n              <span>Excellent (90%+)</span>\n            </div>\n            <div className={styles.legendItem}>\n              <div className={styles.legendColor} style={{ backgroundColor: '#faad14' }} />\n              <span>Good (75-89%)</span>\n            </div>\n            <div className={styles.legendItem}>\n              <div className={styles.legendColor} style={{ backgroundColor: '#ff7a45' }} />\n              <span>Fair (60-74%)</span>\n            </div>\n            <div className={styles.legendItem}>\n              <div className={styles.legendColor} style={{ backgroundColor: '#f5222d' }} />\n              <span>Poor (&lt;60%)</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Data Classification Security */}\n        <div className={styles.chartCard}>\n          <h3 className={styles.chartTitle}>\n            Data Classification Status\n            <InfoTooltip \n              content={getTooltipContent('dataClassificationStatus')?.content || \"Pipeline health by data security classification\"}\n              title={getTooltipContent('dataClassificationStatus')?.title}\n              detailedContent={getTooltipContent('dataClassificationStatus')?.detailedContent}\n              position=\"top\"\n              size=\"medium\"\n            />\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={classificationChartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n              <XAxis \n                dataKey=\"name\" \n                tick={{ fill: '#ccc', fontSize: 11 }}\n                angle={-45}\n                textAnchor=\"end\"\n                height={80}\n              />\n              <YAxis tick={{ fill: '#ccc' }} />\n              <Tooltip \n                formatter={(value, name) => {\n                  if (name === 'healthy') return [`${value} pipelines`, 'Healthy'];\n                  if (name === 'failed') return [`${value} pipelines`, 'Failed'];\n                  return [value, name];\n                }}\n                contentStyle={{ \n                  backgroundColor: '#252526', \n                  border: '1px solid #333',\n                  borderRadius: '6px'\n                }} \n              />\n              <Bar dataKey=\"healthy\" stackId=\"a\" fill=\"#52c41a\" />\n              <Bar dataKey=\"failed\" stackId=\"a\" fill=\"#f5222d\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Ingestion Rate Line Chart */}\n        <div className={styles.chartCard}>\n          <h3 className={styles.chartTitle}>\n            Ingestion Rate (Last 24 Hours)\n            <InfoTooltip \n              content={getTooltipContent('ingestionRateTrend')?.content || \"Real-time data ingestion volume over 24 hours\"}\n              title={getTooltipContent('ingestionRateTrend')?.title}\n              detailedContent={getTooltipContent('ingestionRateTrend')?.detailedContent}\n              position=\"top\"\n              size=\"medium\"\n            />\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={ingestionData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n              <XAxis \n                dataKey=\"time\" \n                tick={{ fill: '#ccc', fontSize: 11 }}\n                interval={2}\n              />\n              <YAxis \n                tick={{ fill: '#ccc' }}\n                domain={['dataMin - 50', 'dataMax + 50']}\n              />\n              <Tooltip \n                labelFormatter={(label) => `Time: ${label}`}\n                formatter={(value) => [`${value} files/hour`, 'Ingestion Rate']}\n                contentStyle={{ \n                  backgroundColor: '#252526', \n                  border: '1px solid #333',\n                  borderRadius: '6px'\n                }} \n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"rate\" \n                stroke=\"#1890ff\" \n                strokeWidth={2}\n                dot={{ fill: '#1890ff', strokeWidth: 0, r: 3 }}\n                activeDot={{ r: 5, stroke: '#1890ff', strokeWidth: 2 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Top 5 Failing Pipelines */}\n        <div className={styles.chartCard}>\n          <h3 className={styles.chartTitle}>\n            Top Failing Pipelines\n            <InfoTooltip \n              content={getTooltipContent('topFailingPipelines')?.content || \"Pipelines with highest failure rates requiring attention\"}\n              title={getTooltipContent('topFailingPipelines')?.title}\n              detailedContent={getTooltipContent('topFailingPipelines')?.detailedContent}\n              position=\"top\"\n              size=\"medium\"\n            />\n          </h3>\n          <div className={styles.failingPipelinesTable}>\n            <div className={styles.tableHeader}>\n              <span>Pipeline</span>\n              <span>Team</span>\n              <span>Status</span>\n              <span>Failure Rate</span>\n              <span>SLA</span>\n            </div>\n            {failingPipelines.map((pipeline) => (\n              <div key={pipeline.id} className={styles.tableRow}>\n                <div className={styles.pipelineName}>\n                  <span className={styles.name}>{pipeline.name}</span>\n                  <span className={styles.source}>{pipeline.source}</span>\n                </div>\n                <span className={styles.team}>{pipeline.ownerTeam}</span>\n                <span className={`${styles.status} ${styles[pipeline.status]}`}>\n                  {pipeline.status}\n                </span>\n                <span className={styles.failureRate}>\n                  {(pipeline.failureRate || 0).toFixed(1)}%\n                </span>\n                <span className={styles.sla}>\n                  {pipeline.slaRequirement}m\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      {/* Azure Threat Correlations Section */}\n      {azureData.isConnected && azureData.threatCorrelations.length > 0 && (\n        <div className={styles.azureCorrelationSection}>\n          <h2 className={styles.sectionTitle}>\n            <Database className={styles.sectionIcon} />\n            Real-time Threat Correlations\n            <span className={styles.sectionSubtitle}>Live threat intelligence from Azure Data Explorer</span>\n          </h2>\n          \n          <div className={styles.correlationTable}>\n            <div className={styles.correlationHeader}>\n              <span>Time</span>\n              <span>User</span>\n              <span>Source IP</span>\n              <span>Threat Type</span>\n              <span>Risk Score</span>\n              <span>Pipeline</span>\n            </div>\n            \n            {azureData.threatCorrelations.slice(0, 10).map((correlation, index) => (\n              <div key={index} className={styles.correlationRow}>\n                <span className={styles.correlationTime}>\n                  {new Date(correlation.Timestamp).toLocaleTimeString()}\n                </span>\n                <span className={styles.correlationUser}>\n                  {correlation.UserEmail || correlation.UserId}\n                </span>\n                <span className={styles.correlationIP}>\n                  {correlation.SourceIP}\n                </span>\n                <span className={styles.correlationThreat}>\n                  {correlation.ThreatType}\n                </span>\n                <span className={`${styles.correlationRisk} ${styles[(correlation.RiskScore || 0) > 80 ? 'critical' : (correlation.RiskScore || 0) > 60 ? 'high' : 'medium']}`}>\n                  {(correlation.RiskScore || 0).toFixed(1)}\n                </span>\n                <span className={styles.correlationPipeline}>\n                  {correlation.PipelineId}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      <HowItWorksModal \n        isOpen={showHowItWorks}\n        onClose={() => setShowHowItWorks(false)}\n        section=\"overview\"\n      />\n      \n      <AzureQueryDemo \n        isOpen={showAzureDemo}\n        onClose={() => setShowAzureDemo(false)}\n      />\n    </div>\n  );\n});\n\nOverview.displayName = 'Overview';\n\nexport default Overview;\n"],"names":["useAzureData","isConnected","setIsConnected","useState","isLoading","setIsLoading","error","setError","threatOverview","setThreatOverview","geographicThreats","setGeographicThreats","threatCorrelations","setThreatCorrelations","pipelineHealth","setPipelineHealth","securityTimeline","setSecurityTimeline","mockPipelines","generateMockPipelines","testConnection","useCallback","connected","azureService","err","loadAzureData","overviewData","geoData","correlationData","healthData","timelineData","refresh","executeCustomQuery","query","useEffect","mounted","AzureQueryDemo","isOpen","onClose","azureData","selectedQuery","setSelectedQuery","isExecuting","setIsExecuting","copiedQuery","setCopiedQuery","queryResult","setQueryResult","queryOptions","handleExecuteQuery","resolve","handleCopyQuery","queryKey","AZURE_CONFIG","styles","jsxs","e","jsx","Database","option","Check","Copy","Play","Overview","memo","pipelines","alerts","mockAlerts","currentIngestionRate","setCurrentIngestionRate","lastRefresh","setLastRefresh","showHowItWorks","setShowHowItWorks","showAzureDemo","setShowAzureDemo","ingestionData","data","now","i","time","interval","prev","change","newRate","metrics","useMemo","p","totalPipelines","healthyPipelines","warningPipelines","failedPipelines","processingPipelines","unresolvedAlerts","a","criticalAlerts","warningAlerts","systemHealthScore","statusData","failingPipelines","b","teamMetrics","acc","pipeline","team","teamHealthData","healthPercentage","avgFailureRate","classificationData","classification","classificationChartData","name","slaBreaches","slaMinutes","lastRun","failedLoginData","suspiciousUsers","totalFailedAttempts","currentSuspiciousActivity","recentData","totalSuspiciousUsers","sum","d","highestRiskUser","_a","authPatternAlerts","slaComplianceRate","getHealthScoreColor","score","RefreshCw","HelpCircle","Server","InfoTooltip","getTooltipContent","_b","_c","TrendingUp","_d","_e","_f","AlertTriangle","_g","_h","_i","Activity","_j","_k","_l","_m","_n","_o","_p","_q","_r","threat","index","Shield","UserX","ResponsiveContainer","LineChart","CartesianGrid","XAxis","YAxis","Tooltip","value","Line","_s","_t","_u","PieChart","Pie","entry","Cell","_v","_w","_x","BarChart","label","teamData","t","active","payload","Bar","_y","_z","_A","_B","_C","_D","_E","_F","_G","correlation","HowItWorksModal"],"mappings":"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"}