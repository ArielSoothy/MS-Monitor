{"version":3,"file":"DataEngineering-CQfixaov.js","sources":["../../src/pages/DataEngineering.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Database,\n  Clock,\n  ArrowRight,\n  CheckCircle,\n  AlertTriangle,\n  TrendingUp,\n  BarChart3,\n  RefreshCw,\n  Zap,\n  Play,\n  Pause,\n  Cpu,\n  MemoryStick,\n  HardDrive\n} from 'lucide-react';\nimport styles from './DataEngineering.module.css';\n\ninterface DataPipelineStage {\n  stageId: string;\n  name: string;\n  type: 'ingestion' | 'transformation' | 'validation' | 'enrichment' | 'aggregation' | 'output';\n  status: 'running' | 'completed' | 'failed' | 'waiting';\n  duration: number; // milliseconds\n  recordsIn: number;\n  recordsOut: number;\n  dataQuality: number; // percentage\n  resourceUsage: {\n    cpu: number;\n    memory: number;\n    disk: number;\n  };\n  optimizations: string[];\n  dependencies: string[];\n}\n\ninterface DataQualityMetric {\n  ruleName: string;\n  description: string;\n  passRate: number;\n  failedRecords: number;\n  impact: 'low' | 'medium' | 'high' | 'critical';\n  suggestions: string[];\n}\n\ninterface SchemaEvolution {\n  version: string;\n  timestamp: Date;\n  changes: Array<{\n    type: 'added' | 'modified' | 'deprecated' | 'removed';\n    field: string;\n    description: string;\n    impact: 'breaking' | 'non-breaking';\n  }>;\n  compatibility: 'forward' | 'backward' | 'full' | 'none';\n  migrationRequired: boolean;\n}\n\ninterface PerformanceOptimization {\n  category: 'indexing' | 'partitioning' | 'compression' | 'caching' | 'parallelization';\n  name: string;\n  description: string;\n  currentState: string;\n  optimizedState: string;\n  expectedImprovement: {\n    queryTime: number; // percentage improvement\n    storageReduction: number; // percentage\n    costSavings: number; // percentage\n  };\n  implementationEffort: 'low' | 'medium' | 'high';\n  riskLevel: 'low' | 'medium' | 'high';\n}\n\nconst DataEngineering: React.FC = () => {\n  const [pipelineStages, setPipelineStages] = useState<DataPipelineStage[]>([]);\n  const [qualityMetrics, setQualityMetrics] = useState<DataQualityMetric[]>([]);\n  const [schemaEvolution, setSchemaEvolution] = useState<SchemaEvolution[]>([]);\n  const [optimizations, setOptimizations] = useState<PerformanceOptimization[]>([]);\n  const [selectedOptimization, setSelectedOptimization] = useState<PerformanceOptimization | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [realTimeMode, setRealTimeMode] = useState(true);\n\n  useEffect(() => {\n    loadDataEngineeringMetrics();\n    \n    if (realTimeMode) {\n      const interval = setInterval(loadDataEngineeringMetrics, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [realTimeMode]);\n\n  const loadDataEngineeringMetrics = async () => {\n    try {\n      setLoading(true);\n\n      // Mock advanced data engineering pipeline data\n      const mockStages: DataPipelineStage[] = [\n        {\n          stageId: 'stage-001',\n          name: 'Azure AD Log Ingestion',\n          type: 'ingestion',\n          status: 'running',\n          duration: 2847,\n          recordsIn: 0,\n          recordsOut: 2847592,\n          dataQuality: 98.7,\n          resourceUsage: {\n            cpu: 23.4,\n            memory: 67.8,\n            disk: 12.3\n          },\n          optimizations: [\n            'Columnar storage format (Parquet)',\n            'Compression with Snappy codec',\n            'Parallel ingestion with 8 threads'\n          ],\n          dependencies: []\n        },\n        {\n          stageId: 'stage-002',\n          name: 'Schema Validation & Normalization',\n          type: 'validation',\n          status: 'completed',\n          duration: 1834,\n          recordsIn: 2847592,\n          recordsOut: 2834156,\n          dataQuality: 99.5,\n          resourceUsage: {\n            cpu: 45.2,\n            memory: 89.3,\n            disk: 34.7\n          },\n          optimizations: [\n            'Schema registry for validation',\n            'Vectorized processing',\n            'Bloom filters for fast lookups'\n          ],\n          dependencies: ['stage-001']\n        },\n        {\n          stageId: 'stage-003',\n          name: 'Threat Intelligence Enrichment',\n          type: 'enrichment',\n          status: 'running',\n          duration: 4721,\n          recordsIn: 2834156,\n          recordsOut: 2834156,\n          dataQuality: 96.2,\n          resourceUsage: {\n            cpu: 67.9,\n            memory: 78.4,\n            disk: 45.6\n          },\n          optimizations: [\n            'In-memory lookup tables',\n            'Distributed hash joins',\n            'Adaptive query execution'\n          ],\n          dependencies: ['stage-002']\n        },\n        {\n          stageId: 'stage-004',\n          name: 'Risk Score Calculation',\n          type: 'transformation',\n          status: 'waiting',\n          duration: 0,\n          recordsIn: 0,\n          recordsOut: 0,\n          dataQuality: 0,\n          resourceUsage: {\n            cpu: 0,\n            memory: 0,\n            disk: 0\n          },\n          optimizations: [\n            'Vectorized calculations',\n            'Model caching',\n            'Batch prediction optimization'\n          ],\n          dependencies: ['stage-003']\n        },\n        {\n          stageId: 'stage-005',\n          name: 'Aggregation & Windowing',\n          type: 'aggregation',\n          status: 'waiting',\n          duration: 0,\n          recordsIn: 0,\n          recordsOut: 0,\n          dataQuality: 0,\n          resourceUsage: {\n            cpu: 0,\n            memory: 0,\n            disk: 0\n          },\n          optimizations: [\n            'Tumbling windows (5-minute)',\n            'Pre-aggregated materialized views',\n            'Delta Lake ACID transactions'\n          ],\n          dependencies: ['stage-004']\n        }\n      ];\n\n      const mockQualityMetrics: DataQualityMetric[] = [\n        {\n          ruleName: 'IP Address Format Validation',\n          description: 'Ensures all IP addresses follow IPv4/IPv6 format standards',\n          passRate: 99.97,\n          failedRecords: 847,\n          impact: 'medium',\n          suggestions: [\n            'Implement regex validation at ingestion',\n            'Add data quality monitoring alerts',\n            'Create quarantine table for invalid IPs'\n          ]\n        },\n        {\n          ruleName: 'Timestamp Consistency Check',\n          description: 'Validates timestamp formats and ranges across all events',\n          passRate: 98.42,\n          failedRecords: 44832,\n          impact: 'high',\n          suggestions: [\n            'Standardize timezone handling',\n            'Implement timestamp normalization',\n            'Add temporal data validation rules'\n          ]\n        },\n        {\n          ruleName: 'User ID Completeness',\n          description: 'Ensures all security events have valid user identifiers',\n          passRate: 96.8,\n          failedRecords: 90876,\n          impact: 'critical',\n          suggestions: [\n            'Implement user ID lookup service',\n            'Add default values for system accounts',\n            'Create user identity resolution pipeline'\n          ]\n        },\n        {\n          ruleName: 'Geolocation Data Accuracy',\n          description: 'Validates IP-to-location mapping accuracy and completeness',\n          passRate: 94.3,\n          failedRecords: 161847,\n          impact: 'medium',\n          suggestions: [\n            'Update GeoIP database monthly',\n            'Implement fallback geolocation services',\n            'Add confidence scores to location data'\n          ]\n        }\n      ];\n\n      const mockOptimizations: PerformanceOptimization[] = [\n        {\n          category: 'partitioning',\n          name: 'Time-based Data Partitioning',\n          description: 'Implement daily partitioning strategy for security events table',\n          currentState: 'Single large table with 2.8B rows',\n          optimizedState: 'Daily partitions with automatic pruning',\n          expectedImprovement: {\n            queryTime: 75,\n            storageReduction: 15,\n            costSavings: 40\n          },\n          implementationEffort: 'medium',\n          riskLevel: 'low'\n        },\n        {\n          category: 'indexing',\n          name: 'Composite Index Optimization',\n          description: 'Create optimal indexes for common query patterns',\n          currentState: 'Basic clustered index on timestamp',\n          optimizedState: 'Composite indexes on (timestamp, user_id, threat_level)',\n          expectedImprovement: {\n            queryTime: 85,\n            storageReduction: -5,\n            costSavings: 25\n          },\n          implementationEffort: 'low',\n          riskLevel: 'low'\n        },\n        {\n          category: 'compression',\n          name: 'Advanced Compression Strategy',\n          description: 'Implement columnar compression with adaptive encoding',\n          currentState: 'Row-based storage with basic compression',\n          optimizedState: 'Columnar format with adaptive compression',\n          expectedImprovement: {\n            queryTime: 45,\n            storageReduction: 60,\n            costSavings: 55\n          },\n          implementationEffort: 'high',\n          riskLevel: 'medium'\n        },\n        {\n          category: 'caching',\n          name: 'Intelligent Query Result Caching',\n          description: 'Implement semantic caching for frequent analytical queries',\n          currentState: 'No query result caching',\n          optimizedState: 'Multi-level caching with TTL and invalidation',\n          expectedImprovement: {\n            queryTime: 90,\n            storageReduction: 0,\n            costSavings: 35\n          },\n          implementationEffort: 'medium',\n          riskLevel: 'low'\n        },\n        {\n          category: 'parallelization',\n          name: 'Adaptive Query Parallelization',\n          description: 'Dynamic parallelization based on query complexity and data size',\n          currentState: 'Fixed parallelism settings',\n          optimizedState: 'Adaptive parallelism with cost-based optimization',\n          expectedImprovement: {\n            queryTime: 65,\n            storageReduction: 0,\n            costSavings: 20\n          },\n          implementationEffort: 'high',\n          riskLevel: 'medium'\n        }\n      ];\n\n      const mockSchemaEvolution: SchemaEvolution[] = [\n        {\n          version: 'v2.3.0',\n          timestamp: new Date(Date.now() - 86400000),\n          changes: [\n            {\n              type: 'added',\n              field: 'threat_confidence_score',\n              description: 'Added ML-based confidence scoring for threat detection',\n              impact: 'non-breaking'\n            },\n            {\n              type: 'modified',\n              field: 'user_risk_level',\n              description: 'Expanded enum values to include \"very_high\" risk level',\n              impact: 'non-breaking'\n            }\n          ],\n          compatibility: 'backward',\n          migrationRequired: false\n        },\n        {\n          version: 'v2.2.1',\n          timestamp: new Date(Date.now() - 259200000),\n          changes: [\n            {\n              type: 'deprecated',\n              field: 'legacy_event_type',\n              description: 'Deprecated in favor of standardized event_category field',\n              impact: 'non-breaking'\n            }\n          ],\n          compatibility: 'full',\n          migrationRequired: false\n        }\n      ];\n\n      setPipelineStages(mockStages);\n      setQualityMetrics(mockQualityMetrics);\n      setOptimizations(mockOptimizations);\n      setSchemaEvolution(mockSchemaEvolution);\n      console.log('Schema evolution data loaded:', mockSchemaEvolution.length, 'entries');\n    } catch (error) {\n      console.error('Failed to load data engineering metrics:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStageStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return '#10b981';\n      case 'running': return '#3b82f6';\n      case 'failed': return '#ef4444';\n      case 'waiting': return '#6b7280';\n      default: return '#6b7280';\n    }\n  };\n\n  const getStageStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return <CheckCircle size={16} />;\n      case 'running': return <RefreshCw size={16} className={styles.spinning} />;\n      case 'failed': return <AlertTriangle size={16} />;\n      case 'waiting': return <Clock size={16} />;\n      default: return <Clock size={16} />;\n    }\n  };\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'low': return '#10b981';\n      case 'medium': return '#f59e0b';\n      case 'high': return '#ef4444';\n      case 'critical': return '#dc2626';\n      default: return '#6b7280';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={styles.loadingContainer}>\n        <Database className={styles.loadingIcon} />\n        <span>Loading data engineering metrics...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.dataEngineeringPage}>\n      <div className={styles.header}>\n        <div className={styles.titleSection}>\n          <Database className={styles.titleIcon} />\n          <div>\n            <h1>Data Engineering Excellence</h1>\n            <p>Advanced pipeline optimization, data quality monitoring, and schema evolution</p>\n          </div>\n        </div>\n        <div className={styles.controls}>\n          <button\n            className={`${styles.controlButton} ${realTimeMode ? styles.active : ''}`}\n            onClick={() => setRealTimeMode(!realTimeMode)}\n          >\n            {realTimeMode ? <Pause size={16} /> : <Play size={16} />}\n            {realTimeMode ? 'Pause' : 'Resume'} Real-time\n          </button>\n          <button className={styles.controlButton} onClick={loadDataEngineeringMetrics}>\n            <RefreshCw size={16} />\n            Refresh\n          </button>\n        </div>\n      </div>\n\n      {/* Pipeline Visualization */}\n      <div className={styles.pipelineSection}>\n        <h2>Data Pipeline Flow</h2>\n        <div className={styles.pipelineFlow}>\n          {pipelineStages.map((stage, index) => (\n            <div key={stage.stageId} className={styles.pipelineStageContainer}>\n              <div className={styles.pipelineStage}>\n                <div className={styles.stageHeader}>\n                  <div className={styles.stageStatus} style={{ color: getStageStatusColor(stage.status) }}>\n                    {getStageStatusIcon(stage.status)}\n                    <span>{stage.status}</span>\n                  </div>\n                  <span className={styles.stageType}>{stage.type}</span>\n                </div>\n                \n                <h4 className={styles.stageName}>{stage.name}</h4>\n                \n                <div className={styles.stageMetrics}>\n                  <div className={styles.stageMetric}>\n                    <span>Duration</span>\n                    <span>{stage.duration > 0 ? `${(stage.duration / 1000).toFixed(1)}s` : '-'}</span>\n                  </div>\n                  <div className={styles.stageMetric}>\n                    <span>Records In</span>\n                    <span>{stage.recordsIn > 0 ? stage.recordsIn.toLocaleString() : '-'}</span>\n                  </div>\n                  <div className={styles.stageMetric}>\n                    <span>Records Out</span>\n                    <span>{stage.recordsOut > 0 ? stage.recordsOut.toLocaleString() : '-'}</span>\n                  </div>\n                  <div className={styles.stageMetric}>\n                    <span>Quality</span>\n                    <span>{stage.dataQuality > 0 ? `${stage.dataQuality.toFixed(1)}%` : '-'}</span>\n                  </div>\n                </div>\n\n                {stage.status === 'running' && (\n                  <div className={styles.resourceUsage}>\n                    <div className={styles.resourceMetric}>\n                      <Cpu size={14} />\n                      <span>{stage.resourceUsage.cpu.toFixed(1)}%</span>\n                    </div>\n                    <div className={styles.resourceMetric}>\n                      <MemoryStick size={14} />\n                      <span>{stage.resourceUsage.memory.toFixed(1)}%</span>\n                    </div>\n                    <div className={styles.resourceMetric}>\n                      <HardDrive size={14} />\n                      <span>{stage.resourceUsage.disk.toFixed(1)}%</span>\n                    </div>\n                  </div>\n                )}\n\n                <div className={styles.optimizations}>\n                  {stage.optimizations.slice(0, 2).map((opt, idx) => (\n                    <div key={idx} className={styles.optimization}>\n                      <Zap size={12} />\n                      <span>{opt}</span>\n                    </div>\n                  ))}\n                  {stage.optimizations.length > 2 && (\n                    <div className={styles.moreOptimizations}>\n                      +{stage.optimizations.length - 2} more\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              {index < pipelineStages.length - 1 && (\n                <ArrowRight className={styles.pipelineArrow} />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Data Quality Metrics */}\n      <div className={styles.qualitySection}>\n        <h2>Data Quality Monitoring</h2>\n        <div className={styles.qualityGrid}>\n          {qualityMetrics.map((metric, index) => (\n            <div key={index} className={styles.qualityCard}>\n              <div className={styles.qualityHeader}>\n                <h4>{metric.ruleName}</h4>\n                <div className={styles.impactBadge} style={{ color: getImpactColor(metric.impact) }}>\n                  {metric.impact}\n                </div>\n              </div>\n              \n              <p className={styles.qualityDescription}>{metric.description}</p>\n              \n              <div className={styles.qualityMetrics}>\n                <div className={styles.qualityMetric}>\n                  <span>Pass Rate</span>\n                  <span className={styles.passRate}>{metric.passRate.toFixed(2)}%</span>\n                </div>\n                <div className={styles.qualityMetric}>\n                  <span>Failed Records</span>\n                  <span className={styles.failedRecords}>{metric.failedRecords.toLocaleString()}</span>\n                </div>\n              </div>\n\n              <div className={styles.suggestions}>\n                <h5>Improvement Suggestions:</h5>\n                {metric.suggestions.map((suggestion, idx) => (\n                  <div key={idx} className={styles.suggestion}>\n                    <CheckCircle size={12} />\n                    <span>{suggestion}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Performance Optimizations */}\n      <div className={styles.optimizationSection}>\n        <h2>Performance Optimization Opportunities</h2>\n        <div className={styles.optimizationGrid}>\n          {optimizations.map((opt, index) => (\n            <div\n              key={index}\n              className={`${styles.optimizationCard} ${selectedOptimization === opt ? styles.selected : ''}`}\n              onClick={() => setSelectedOptimization(opt)}\n            >\n              <div className={styles.optimizationHeader}>\n                <div className={styles.categoryBadge}>\n                  {opt.category}\n                </div>\n                <div className={styles.effortRisk}>\n                  <span className={styles.effort}>Effort: {opt.implementationEffort}</span>\n                  <span className={styles.risk}>Risk: {opt.riskLevel}</span>\n                </div>\n              </div>\n              \n              <h4>{opt.name}</h4>\n              <p>{opt.description}</p>\n              \n              <div className={styles.improvements}>\n                <div className={styles.improvement}>\n                  <TrendingUp size={14} />\n                  <span>Query Time: {opt.expectedImprovement.queryTime}% faster</span>\n                </div>\n                <div className={styles.improvement}>\n                  <Database size={14} />\n                  <span>Storage: {opt.expectedImprovement.storageReduction}% reduction</span>\n                </div>\n                <div className={styles.improvement}>\n                  <BarChart3 size={14} />\n                  <span>Cost: {opt.expectedImprovement.costSavings}% savings</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Selected Optimization Details */}\n      {selectedOptimization && (\n        <div className={styles.optimizationDetail}>\n          <h3>Optimization Details: {selectedOptimization.name}</h3>\n          \n          <div className={styles.optimizationComparison}>\n            <div className={styles.currentState}>\n              <h4>Current State</h4>\n              <p>{selectedOptimization.currentState}</p>\n            </div>\n            \n            <ArrowRight className={styles.transitionArrow} />\n            \n            <div className={styles.optimizedState}>\n              <h4>Optimized State</h4>\n              <p>{selectedOptimization.optimizedState}</p>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Hidden div to satisfy TypeScript - schema evolution data loaded */}\n      <div style={{ display: 'none' }}>{schemaEvolution.length}</div>\n    </div>\n  );\n};\n\nexport default DataEngineering;\n"],"names":["DataEngineering","pipelineStages","setPipelineStages","useState","qualityMetrics","setQualityMetrics","schemaEvolution","setSchemaEvolution","optimizations","setOptimizations","selectedOptimization","setSelectedOptimization","loading","setLoading","realTimeMode","setRealTimeMode","useEffect","loadDataEngineeringMetrics","interval","mockStages","mockQualityMetrics","mockOptimizations","mockSchemaEvolution","error","getStageStatusColor","status","getStageStatusIcon","jsx","CheckCircle","RefreshCw","styles","AlertTriangle","Clock","getImpactColor","impact","jsxs","Database","Pause","Play","stage","index","Cpu","MemoryStick","HardDrive","opt","idx","Zap","ArrowRight","metric","suggestion","TrendingUp","BarChart3"],"mappings":"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"}