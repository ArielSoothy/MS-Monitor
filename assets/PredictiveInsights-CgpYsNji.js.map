{"version":3,"file":"PredictiveInsights-CgpYsNji.js","sources":["../../src/utils/decisionTree.ts","../../src/utils/mockDataGenerator.ts","../../src/pages/PredictiveInsights.tsx"],"sourcesContent":["// Simple Decision Tree Implementation for Pipeline Health Prediction\nimport { DecisionNode, HistoricalRecord, PredictionFeatures, DecisionTreeModel } from '../types';\n\nexport class SimpleDecisionTree {\n  private maxDepth: number;\n  private minSamplesLeaf: number;\n\n  constructor(maxDepth = 4, minSamplesLeaf = 5) {\n    this.maxDepth = maxDepth;\n    this.minSamplesLeaf = minSamplesLeaf;\n  }\n\n  // Calculate Gini impurity\n  private calculateGini(samples: HistoricalRecord[]): number {\n    if (samples.length === 0) return 0;\n    \n    const positives = samples.filter(s => s.willFailInNext2Hours).length;\n    const negatives = samples.length - positives;\n    const posRatio = positives / samples.length;\n    const negRatio = negatives / samples.length;\n    \n    return 1 - (posRatio * posRatio + negRatio * negRatio);\n  }\n\n  // Find best split for a feature\n  private findBestSplit(samples: HistoricalRecord[]): { \n    feature: keyof PredictionFeatures; \n    threshold: number; \n    gain: number \n  } | null {\n    let bestGain = 0;\n    let bestFeature: keyof PredictionFeatures | null = null;\n    let bestThreshold = 0;\n\n    const features: (keyof PredictionFeatures)[] = [\n      'hoursSinceLastRun', \n      'avgFailureRate', \n      'dataVolumeVariance', \n      'dayOfWeek', \n      'hourOfDay'\n    ];\n\n    const parentGini = this.calculateGini(samples);\n\n    for (const feature of features) {\n      // Get unique values for this feature and sort them\n      const values = [...new Set(samples.map(s => s[feature]))].sort((a, b) => a - b);\n      \n      for (let i = 0; i < values.length - 1; i++) {\n        const threshold = (values[i] + values[i + 1]) / 2;\n        \n        const leftSamples = samples.filter(s => s[feature] <= threshold);\n        const rightSamples = samples.filter(s => s[feature] > threshold);\n        \n        if (leftSamples.length === 0 || rightSamples.length === 0) continue;\n        \n        const leftGini = this.calculateGini(leftSamples);\n        const rightGini = this.calculateGini(rightSamples);\n        \n        const weightedGini = (leftSamples.length / samples.length) * leftGini + \n                           (rightSamples.length / samples.length) * rightGini;\n        \n        const gain = parentGini - weightedGini;\n        \n        if (gain > bestGain) {\n          bestGain = gain;\n          bestFeature = feature;\n          bestThreshold = threshold;\n        }\n      }\n    }\n\n    return bestFeature ? { feature: bestFeature, threshold: bestThreshold, gain: bestGain } : null;\n  }\n\n  // Build the decision tree recursively\n  private buildTree(samples: HistoricalRecord[], depth = 0): DecisionNode {\n    const failures = samples.filter(s => s.willFailInNext2Hours).length;\n    const total = samples.length;\n    const failureRate = failures / total;\n\n    // Base cases\n    if (depth >= this.maxDepth || \n        total < this.minSamplesLeaf || \n        failures === 0 || \n        failures === total) {\n      return {\n        prediction: failureRate >= 0.5,\n        confidence: Math.max(failureRate, 1 - failureRate),\n        sampleCount: total\n      };\n    }\n\n    const bestSplit = this.findBestSplit(samples);\n    if (!bestSplit || bestSplit.gain < 0.01) {\n      return {\n        prediction: failureRate >= 0.5,\n        confidence: Math.max(failureRate, 1 - failureRate),\n        sampleCount: total\n      };\n    }\n\n    const leftSamples = samples.filter(s => s[bestSplit.feature] <= bestSplit.threshold);\n    const rightSamples = samples.filter(s => s[bestSplit.feature] > bestSplit.threshold);\n\n    return {\n      feature: bestSplit.feature,\n      threshold: bestSplit.threshold,\n      left: this.buildTree(leftSamples, depth + 1),\n      right: this.buildTree(rightSamples, depth + 1),\n      sampleCount: total\n    };\n  }\n\n  // Train the model\n  train(data: HistoricalRecord[]): DecisionTreeModel {\n    const tree = this.buildTree(data);\n    \n    // Calculate accuracy on training data (in real scenario, use test set)\n    let correct = 0;\n    for (const sample of data) {\n      const prediction = this.predict(tree, sample);\n      if (prediction.willFail === sample.willFailInNext2Hours) {\n        correct++;\n      }\n    }\n    \n    const accuracy = correct / data.length;\n\n    // Calculate feature importance (simplified)\n    const featureImportance = this.calculateFeatureImportance(tree);\n\n    return {\n      tree,\n      accuracy,\n      trainingDate: new Date(),\n      featureImportance\n    };\n  }\n\n  // Make a prediction for a single sample\n  predict(tree: DecisionNode, features: PredictionFeatures): { \n    willFail: boolean; \n    confidence: number; \n    path: string[] \n  } {\n    const path: string[] = [];\n    let currentNode = tree;\n\n    while (currentNode.feature && currentNode.threshold !== undefined) {\n      const featureValue = features[currentNode.feature];\n      const condition = `${currentNode.feature} ${featureValue <= currentNode.threshold ? '≤' : '>'} ${currentNode.threshold.toFixed(2)}`;\n      path.push(condition);\n\n      if (featureValue <= currentNode.threshold) {\n        currentNode = currentNode.left!;\n      } else {\n        currentNode = currentNode.right!;\n      }\n    }\n\n    return {\n      willFail: currentNode.prediction || false,\n      confidence: currentNode.confidence || 0.5,\n      path\n    };\n  }\n\n  // Calculate feature importance (simplified approach)\n  private calculateFeatureImportance(tree: DecisionNode): Record<keyof PredictionFeatures, number> {\n    const importance: Record<keyof PredictionFeatures, number> = {\n      hoursSinceLastRun: 0,\n      avgFailureRate: 0,\n      dataVolumeVariance: 0,\n      dayOfWeek: 0,\n      hourOfDay: 0\n    };\n\n    const traverse = (node: DecisionNode, depth: number) => {\n      if (node.feature) {\n        // Weight importance by depth (higher for nodes closer to root)\n        const weight = 1 / (depth + 1);\n        importance[node.feature] += weight;\n      }\n      if (node.left) traverse(node.left, depth + 1);\n      if (node.right) traverse(node.right, depth + 1);\n    };\n\n    traverse(tree, 0);\n\n    // Normalize to sum to 1\n    const total = Object.values(importance).reduce((sum, val) => sum + val, 0);\n    if (total > 0) {\n      Object.keys(importance).forEach(key => {\n        importance[key as keyof PredictionFeatures] /= total;\n      });\n    }\n\n    return importance;\n  }\n\n  // Extract rules from the tree for human interpretation\n  extractRules(tree: DecisionNode, path: string[] = []): string[] {\n    if (!tree.feature || tree.threshold === undefined) {\n      const prediction = tree.prediction ? 'WILL FAIL' : 'WILL NOT FAIL';\n      const confidence = ((tree.confidence || 0.5) * 100).toFixed(1);\n      const rule = `IF ${path.join(' AND ')} THEN ${prediction} (${confidence}% confidence)`;\n      return [rule];\n    }\n\n    const leftPath = [...path, `${tree.feature} ≤ ${tree.threshold.toFixed(2)}`];\n    const rightPath = [...path, `${tree.feature} > ${tree.threshold.toFixed(2)}`];\n\n    return [\n      ...this.extractRules(tree.left!, leftPath),\n      ...this.extractRules(tree.right!, rightPath)\n    ];\n  }\n}\n","// Mock Training Data Generator for Pipeline Health Prediction\nimport { HistoricalRecord, Pipeline } from '../types';\n\nexport class MockDataGenerator {\n  // Generate realistic historical training data\n  static generateHistoricalData(pipelines: Pipeline[], recordCount = 1000): HistoricalRecord[] {\n    const records: HistoricalRecord[] = [];\n    \n    for (let i = 0; i < recordCount; i++) {\n      const pipeline = pipelines[Math.floor(Math.random() * pipelines.length)];\n      const timestamp = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000); // Last 30 days\n      \n      const dayOfWeek = timestamp.getDay();\n      const hourOfDay = timestamp.getHours();\n      \n      // Base features with realistic patterns\n      const hoursSinceLastRun = Math.random() * 12; // 0-12 hours\n      const avgFailureRate = pipeline.failureRate + (Math.random() - 0.5) * 10; // Vary around current rate\n      const dataVolumeVariance = Math.random() * 100; // 0-100% variance\n      \n      // Realistic failure patterns\n      let failureProbability = 0.1; // Base 10% failure rate\n      \n      // Monday morning failures (common in real systems after weekend maintenance)\n      if (dayOfWeek === 1 && hourOfDay >= 7 && hourOfDay <= 10) {\n        failureProbability += 0.3;\n      }\n      \n      // End-of-day volume spikes\n      if (hourOfDay >= 17 && hourOfDay <= 19) {\n        failureProbability += dataVolumeVariance * 0.002; // Higher variance = higher failure chance\n      }\n      \n      // Higher failure rate if not run recently\n      if (hoursSinceLastRun > 6) {\n        failureProbability += 0.2;\n      }\n      \n      // Higher failure rate based on historical failure rate\n      failureProbability += avgFailureRate * 0.01;\n      \n      // Weekend patterns (less monitoring, more failures)\n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        failureProbability += 0.15;\n      }\n      \n      // Night time issues (less monitoring)\n      if (hourOfDay >= 23 || hourOfDay <= 5) {\n        failureProbability += 0.1;\n      }\n      \n      // Add some noise to make it realistic (not 100% predictable)\n      failureProbability += (Math.random() - 0.5) * 0.2;\n      \n      // Clamp between 0 and 1\n      failureProbability = Math.max(0, Math.min(1, failureProbability));\n      \n      const willFailInNext2Hours = Math.random() < failureProbability;\n      \n      records.push({\n        pipelineId: pipeline.id,\n        timestamp,\n        hoursSinceLastRun: Math.max(0, hoursSinceLastRun),\n        avgFailureRate: Math.max(0, Math.min(100, avgFailureRate)),\n        dataVolumeVariance: Math.max(0, Math.min(100, dataVolumeVariance)),\n        dayOfWeek,\n        hourOfDay,\n        willFailInNext2Hours\n      });\n    }\n    \n    return records;\n  }\n\n  // Generate current features for a pipeline\n  static extractCurrentFeatures(pipeline: Pipeline): {\n    hoursSinceLastRun: number;\n    avgFailureRate: number;\n    dataVolumeVariance: number;\n    dayOfWeek: number;\n    hourOfDay: number;\n  } {\n    const now = new Date();\n    const hoursSinceLastRun = (now.getTime() - pipeline.lastRun.getTime()) / (1000 * 60 * 60);\n    \n    // Simulate data volume variance based on recent history\n    const baseVariance = Math.random() * 50;\n    const timeMultiplier = Math.sin((now.getHours() / 24) * Math.PI * 2) * 25 + 25; // Daily pattern\n    const dataVolumeVariance = Math.max(0, Math.min(100, baseVariance + timeMultiplier));\n    \n    return {\n      hoursSinceLastRun: Math.max(0, hoursSinceLastRun),\n      avgFailureRate: pipeline.failureRate,\n      dataVolumeVariance,\n      dayOfWeek: now.getDay(),\n      hourOfDay: now.getHours()\n    };\n  }\n\n  // Add realistic patterns to make the model more interesting\n  static addSeasonalPatterns(records: HistoricalRecord[]): HistoricalRecord[] {\n    return records.map(record => {\n      const { dayOfWeek, hourOfDay } = record;\n      \n      // Add seasonal adjustments\n      let adjustedFailureRate = record.avgFailureRate;\n      \n      // Business hours have lower failure rates (more monitoring)\n      if (hourOfDay >= 9 && hourOfDay <= 17 && dayOfWeek >= 1 && dayOfWeek <= 5) {\n        adjustedFailureRate *= 0.8;\n      }\n      \n      // Lunch time dip in activity\n      if (hourOfDay >= 12 && hourOfDay <= 13) {\n        adjustedFailureRate *= 0.9;\n      }\n      \n      return {\n        ...record,\n        avgFailureRate: Math.max(0, Math.min(100, adjustedFailureRate))\n      };\n    });\n  }\n}\n\n// Feature explanation helpers\nexport const FEATURE_EXPLANATIONS = {\n  hoursSinceLastRun: {\n    name: \"Hours Since Last Run\",\n    description: \"Time elapsed since the pipeline last executed successfully\",\n    higherRisk: \"Pipelines that haven't run recently may have accumulated issues\"\n  },\n  avgFailureRate: {\n    name: \"Average Failure Rate\",\n    description: \"Historical percentage of failed runs for this pipeline\",\n    higherRisk: \"Pipelines with higher historical failure rates are more likely to fail again\"\n  },\n  dataVolumeVariance: {\n    name: \"Data Volume Variance\",\n    description: \"Fluctuation in data volume compared to normal patterns\",\n    higherRisk: \"Unusual data volumes can overwhelm processing capacity\"\n  },\n  dayOfWeek: {\n    name: \"Day of Week\",\n    description: \"Current day (0=Sunday, 6=Saturday)\",\n    higherRisk: \"Weekends and Mondays often show higher failure rates\"\n  },\n  hourOfDay: {\n    name: \"Hour of Day\",\n    description: \"Current hour in 24-hour format\",\n    higherRisk: \"Off-hours have less monitoring and higher failure rates\"\n  }\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { \n  AlertTriangle, \n  TrendingUp, \n  Brain, \n  Clock, \n  Info, \n  RefreshCw,\n  Target,\n  BarChart3,\n  HelpCircle\n} from 'lucide-react';\nimport { mockPipelines } from '../data/mockData';\nimport { SimpleDecisionTree } from '../utils/decisionTree';\nimport { MockDataGenerator, FEATURE_EXPLANATIONS } from '../utils/mockDataGenerator';\nimport { PipelinePrediction, DecisionTreeModel } from '../types';\nimport HowItWorksModal from '../components/HowItWorksModal';\nimport InfoTooltip from '../components/InfoTooltip';\nimport { getTooltipContent } from '../utils/tooltipContent';\nimport styles from './PredictiveInsights.module.css';\n\nconst PredictiveInsights: React.FC = () => {\n  const [model, setModel] = useState<DecisionTreeModel | null>(null);\n  const [predictions, setPredictions] = useState<PipelinePrediction[]>([]);\n  const [selectedPrediction, setSelectedPrediction] = useState<PipelinePrediction | null>(null);\n  const [isTraining, setIsTraining] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());\n  const [showModelDetails, setShowModelDetails] = useState(false);\n  const [showModelExplanation, setShowModelExplanation] = useState(false);\n  const [showHowItWorks, setShowHowItWorks] = useState(false);\n\n  // Train the model and generate predictions\n  const trainModel = useMemo(() => {\n    const trainingData = MockDataGenerator.generateHistoricalData(mockPipelines, 1000);\n    const enhancedData = MockDataGenerator.addSeasonalPatterns(trainingData);\n    \n    const tree = new SimpleDecisionTree(4, 10);\n    return tree.train(enhancedData);\n  }, []); // Only run once on component mount\n\n  // Generate predictions for all pipelines\n  const generatePredictions = (model: DecisionTreeModel): PipelinePrediction[] => {\n    return mockPipelines.map(pipeline => {\n      const features = MockDataGenerator.extractCurrentFeatures(pipeline);\n      const tree = new SimpleDecisionTree();\n      const prediction = tree.predict(model.tree, features);\n      \n      // Calculate risk score (0-100)\n      const riskScore = prediction.willFail \n        ? 50 + (prediction.confidence * 50) \n        : 50 - (prediction.confidence * 50);\n\n      // Generate reasoning\n      const reasoning = generateReasoning(features, prediction.path);\n\n      return {\n        pipelineId: pipeline.id,\n        pipelineName: pipeline.name,\n        willFail: prediction.willFail,\n        confidence: prediction.confidence,\n        riskScore: Math.round(riskScore),\n        reasoning,\n        features,\n        lastUpdated: new Date()\n      };\n    }).sort((a, b) => b.riskScore - a.riskScore);\n  };\n\n  // Generate human-readable reasoning\n  const generateReasoning = (features: any, _path: string[]): string[] => {\n    const reasons = [];\n    \n    if (features.hoursSinceLastRun > 4) {\n      reasons.push(`Pipeline hasn't run for ${features.hoursSinceLastRun.toFixed(1)} hours`);\n    }\n    \n    if (features.avgFailureRate > 15) {\n      reasons.push(`High historical failure rate (${features.avgFailureRate.toFixed(1)}%)`);\n    }\n    \n    if (features.dataVolumeVariance > 60) {\n      reasons.push(`Unusual data volume variance (${features.dataVolumeVariance.toFixed(1)}%)`);\n    }\n    \n    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    if (features.dayOfWeek === 1 && features.hourOfDay >= 7 && features.hourOfDay <= 10) {\n      reasons.push('Monday morning - high failure period');\n    }\n    \n    if (features.dayOfWeek === 0 || features.dayOfWeek === 6) {\n      reasons.push(`Weekend operation (${dayNames[features.dayOfWeek]}) - reduced monitoring`);\n    }\n    \n    if (features.hourOfDay >= 23 || features.hourOfDay <= 5) {\n      reasons.push('Off-hours operation - limited support availability');\n    }\n    \n    if (features.hourOfDay >= 17 && features.hourOfDay <= 19) {\n      reasons.push('End-of-day volume spike period');\n    }\n    \n    return reasons.length > 0 ? reasons : ['Normal operating conditions'];\n  };\n\n  // Initialize model and predictions\n  useEffect(() => {\n    setIsTraining(true);\n    \n    // Simulate training time for realism\n    setTimeout(() => {\n      setModel(trainModel);\n      const initialPredictions = generatePredictions(trainModel);\n      setPredictions(initialPredictions);\n      setIsTraining(false);\n    }, 1500);\n  }, [trainModel]);\n\n  // Update predictions every minute\n  useEffect(() => {\n    if (!model) return;\n\n    const interval = setInterval(() => {\n      const updatedPredictions = generatePredictions(model);\n      setPredictions(updatedPredictions);\n      setLastUpdate(new Date());\n    }, 60000); // Update every minute\n\n    return () => clearInterval(interval);\n  }, [model]);\n\n  const atRiskPipelines = predictions.filter(p => p.willFail).slice(0, 5);\n  const highConfidencePredictions = predictions.filter(p => p.confidence > 0.7);\n\n  const getStatusColor = (riskScore: number) => {\n    if (riskScore >= 70) return styles.critical;\n    if (riskScore >= 50) return styles.warning;\n    return styles.healthy;\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  if (isTraining) {\n    return (\n      <div className={styles.container}>\n        <div className={styles.trainingOverlay}>\n          <div className={styles.trainingContent}>\n            <RefreshCw className={styles.spinningIcon} size={48} />\n            <h2>Training Prediction Model</h2>\n            <p>Analyzing 1,000 historical pipeline records...</p>\n            <div className={styles.trainingProgress}>\n              <div className={styles.progressBar}></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <header className={styles.header}>\n        <div className={styles.headerContent}>\n          <div className={styles.headerTitle}>\n            <Brain className={styles.headerIcon} />\n            <div>\n              <h1>\n                Predictive Insights\n                <button \n                  className={styles.infoButton}\n                  onClick={() => setShowModelExplanation(true)}\n                  title=\"How does this model work?\"\n                >\n                  <HelpCircle size={18} />\n                </button>\n              </h1>\n              <p>AI-powered pipeline health prediction using decision tree analysis</p>\n            </div>\n          </div>\n          <div className={styles.headerActions}>\n            <button \n              className={styles.howItWorksButton}\n              onClick={() => setShowHowItWorks(true)}\n              title=\"Learn how this system works\"\n            >\n              <HelpCircle size={16} />\n              How does it work?\n            </button>\n            <div className={styles.lastUpdate}>\n              <Clock size={16} />\n              <span>Updated: {formatTime(lastUpdate)}</span>\n            </div>\n            <button \n              className={styles.modelButton}\n              onClick={() => setShowModelDetails(!showModelDetails)}\n            >\n              <Target size={16} />\n              Model Details\n            </button>\n          </div>\n        </div>\n      </header>\n\n      <div className={styles.disclaimer}>\n        <Info size={16} />\n        <span>Predictions based on historical patterns - proof of concept for demonstration</span>\n      </div>\n\n      {/* Model Performance Stats */}\n      <div className={styles.statsGrid}>\n        <div className={styles.statCard}>\n          <div className={styles.statIcon}>\n            <Target className={styles.iconAccuracy} />\n          </div>\n          <div className={styles.statContent}>\n            <div className={styles.statValue}>{((model?.accuracy ?? 0) * 100).toFixed(1)}%</div>\n            <div className={styles.statLabel}>\n              Model Accuracy\n              {getTooltipContent('modelAccuracy') && (\n                <InfoTooltip \n                  {...getTooltipContent('modelAccuracy')!} \n                  position=\"bottom\"\n                  size=\"medium\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n        \n        <div className={styles.statCard}>\n          <div className={styles.statIcon}>\n            <AlertTriangle className={styles.iconRisk} />\n          </div>\n          <div className={styles.statContent}>\n            <div className={styles.statValue}>{atRiskPipelines.length}</div>\n            <div className={styles.statLabel}>\n              Pipelines at Risk\n              {getTooltipContent('pipelinesAtRisk') && (\n                <InfoTooltip \n                  {...getTooltipContent('pipelinesAtRisk')!} \n                  position=\"bottom\"\n                  size=\"medium\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n        \n        <div className={styles.statCard}>\n          <div className={styles.statIcon}>\n            <TrendingUp className={styles.iconConfidence} />\n          </div>\n          <div className={styles.statContent}>\n            <div className={styles.statValue}>{highConfidencePredictions.length}</div>\n            <div className={styles.statLabel}>\n              High Confidence\n              {getTooltipContent('highConfidencePredictions') && (\n                <InfoTooltip \n                  {...getTooltipContent('highConfidencePredictions')!} \n                  position=\"bottom\"\n                  size=\"medium\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n        \n        <div className={styles.statCard}>\n          <div className={styles.statIcon}>\n            <BarChart3 className={styles.iconSamples} />\n          </div>\n          <div className={styles.statContent}>\n            <div className={styles.statValue}>1,000</div>\n            <div className={styles.statLabel}>\n              Training Samples\n              {getTooltipContent('trainingSamples') && (\n                <InfoTooltip \n                  {...getTooltipContent('trainingSamples')!} \n                  position=\"bottom\"\n                  size=\"medium\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className={styles.mainContent}>\n        {/* At Risk Pipelines */}\n        <div className={styles.section}>\n          <h2 className={styles.sectionTitle}>\n            <AlertTriangle size={20} />\n            Pipelines at Risk (Next 2 Hours)\n          </h2>\n          \n          {atRiskPipelines.length === 0 ? (\n            <div className={styles.noRisk}>\n              <Target size={48} />\n              <h3>All Pipelines Looking Good!</h3>\n              <p>No pipelines are predicted to fail in the next 2 hours.</p>\n            </div>\n          ) : (\n            <div className={styles.riskGrid}>\n              {atRiskPipelines.map(prediction => (\n                <div \n                  key={prediction.pipelineId} \n                  className={`${styles.riskCard} ${getStatusColor(prediction.riskScore)}`}\n                  onClick={() => setSelectedPrediction(prediction)}\n                >\n                  <div className={styles.riskHeader}>\n                    <div className={styles.riskTitle}>{prediction.pipelineName}</div>\n                    <div className={styles.riskScore}>\n                      {prediction.riskScore}%\n                      {getTooltipContent('riskScore') && (\n                        <InfoTooltip \n                          {...getTooltipContent('riskScore')!} \n                          position=\"left\"\n                          size=\"medium\"\n                        />\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className={styles.riskDetails}>\n                    <div className={styles.confidence}>\n                      Confidence: {(prediction.confidence * 100).toFixed(1)}%\n                      {getTooltipContent('predictionConfidence') && (\n                        <InfoTooltip \n                          {...getTooltipContent('predictionConfidence')!} \n                          position=\"bottom\"\n                          size=\"medium\"\n                        />\n                      )}\n                    </div>\n                    \n                    <div className={styles.reasoning}>\n                      <ul>\n                        {prediction.reasoning.slice(0, 2).map((reason, idx) => (\n                          <li key={idx}>{reason}</li>\n                        ))}\n                        {prediction.reasoning.length > 2 && (\n                          <li>+{prediction.reasoning.length - 2} more factors</li>\n                        )}\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Model Details */}\n        {showModelDetails && model && (\n          <div className={styles.section}>\n            <h2 className={styles.sectionTitle}>\n              <Brain size={20} />\n              Decision Tree Model\n              {getTooltipContent('decisionTreeModel') && (\n                <InfoTooltip \n                  {...getTooltipContent('decisionTreeModel')!} \n                  position=\"bottom\"\n                  size=\"large\"\n                />\n              )}\n            </h2>\n            \n            <div className={styles.modelDetails}>\n              <div className={styles.modelInfo}>\n                <h3>Model Information</h3>\n                <div className={styles.modelStats}>\n                  <div>Training Date: {model.trainingDate.toLocaleDateString()}</div>\n                  <div>Max Depth: 4 levels</div>\n                  <div>Min Samples per Leaf: 10</div>\n                  <div>Training Accuracy: {(model.accuracy * 100).toFixed(1)}%</div>\n                </div>\n              </div>\n              \n              <div className={styles.featureImportance}>\n                <h3>\n                  Feature Importance\n                  {getTooltipContent('featureImportance') && (\n                    <InfoTooltip \n                      {...getTooltipContent('featureImportance')!} \n                      position=\"bottom\"\n                      size=\"large\"\n                    />\n                  )}\n                </h3>\n                <div className={styles.importanceChart}>\n                  {Object.entries(model.featureImportance).map(([feature, importance]) => (\n                    <div key={feature} className={styles.importanceRow}>\n                      <div className={styles.featureName}>\n                        {FEATURE_EXPLANATIONS[feature as keyof typeof FEATURE_EXPLANATIONS]?.name || feature}\n                      </div>\n                      <div className={styles.importanceBar}>\n                        <div \n                          className={styles.importanceFill}\n                          style={{ width: `${importance * 100}%` }}\n                        />\n                      </div>\n                      <div className={styles.importanceValue}>\n                        {(importance * 100).toFixed(1)}%\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Prediction Details Modal */}\n      {selectedPrediction && (\n        <div className={styles.modal} onClick={() => setSelectedPrediction(null)}>\n          <div className={styles.modalContent} onClick={e => e.stopPropagation()}>\n            <div className={styles.modalHeader}>\n              <h2>{selectedPrediction.pipelineName}</h2>\n              <button \n                className={styles.closeButton}\n                onClick={() => setSelectedPrediction(null)}\n              >\n                ×\n              </button>\n            </div>\n            \n            <div className={styles.modalBody}>\n              <div className={styles.predictionSummary}>\n                <div className={`${styles.predictionResult} ${selectedPrediction.willFail ? styles.willFail : styles.willNotFail}`}>\n                  <div className={styles.predictionText}>\n                    {selectedPrediction.willFail ? 'WILL LIKELY FAIL' : 'SHOULD RUN NORMALLY'}\n                  </div>\n                  <div className={styles.predictionConfidence}>\n                    {(selectedPrediction.confidence * 100).toFixed(1)}% confidence\n                  </div>\n                  <div className={styles.riskScoreDisplay}>\n                    Risk Score: {selectedPrediction.riskScore}%\n                  </div>\n                </div>\n              </div>\n              \n              <div className={styles.analysisSection}>\n                <h3>Why this prediction?</h3>\n                <ul className={styles.reasoningList}>\n                  {selectedPrediction.reasoning.map((reason, idx) => (\n                    <li key={idx}>{reason}</li>\n                  ))}\n                </ul>\n              </div>\n              \n              <div className={styles.featuresSection}>\n                <h3>Current Features</h3>\n                <div className={styles.featureGrid}>\n                  {Object.entries(selectedPrediction.features).map(([feature, value]) => {\n                    const explanation = FEATURE_EXPLANATIONS[feature as keyof typeof FEATURE_EXPLANATIONS];\n                    return (\n                      <div key={feature} className={styles.featureCard}>\n                        <div className={styles.featureValue}>\n                          {typeof value === 'number' ? value.toFixed(1) : value}\n                        </div>\n                        <div className={styles.featureName}>{explanation?.name || feature}</div>\n                        <div className={styles.featureDescription}>{explanation?.description}</div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Model Explanation Modal */}\n      {showModelExplanation && (\n        <div className={styles.modal} onClick={() => setShowModelExplanation(false)}>\n          <div className={styles.modelExplanationModal} onClick={e => e.stopPropagation()}>\n            <div className={styles.modalHeader}>\n              <h2>How the Prediction Model Works</h2>\n              <button \n                className={styles.closeButton}\n                onClick={() => setShowModelExplanation(false)}\n              >\n                ×\n              </button>\n            </div>\n            \n            <div className={styles.modalBody}>\n              <div className={styles.explanationSection}>\n                <h3>🧠 The Algorithm: Decision Tree</h3>\n                <p>\n                  Our model uses a <strong>Decision Tree</strong> - think of it like a flowchart that asks yes/no questions \n                  about your pipeline to predict if it will fail in the next 2 hours.\n                </p>\n                \n                <div className={styles.algorithmSteps}>\n                  <div className={styles.step}>\n                    <div className={styles.stepNumber}>1</div>\n                    <div className={styles.stepContent}>\n                      <h4>Data Collection</h4>\n                      <p>We analyze 1,000 historical pipeline runs with their success/failure outcomes</p>\n                    </div>\n                  </div>\n                  \n                  <div className={styles.step}>\n                    <div className={styles.stepNumber}>2</div>\n                    <div className={styles.stepContent}>\n                      <h4>Feature Analysis</h4>\n                      <p>For each pipeline, we look at 5 key factors: hours since last run, failure rate, data volume variance, day of week, and time of day</p>\n                    </div>\n                  </div>\n                  \n                  <div className={styles.step}>\n                    <div className={styles.stepNumber}>3</div>\n                    <div className={styles.stepContent}>\n                      <h4>Tree Building</h4>\n                      <p>The algorithm finds the best questions to ask (like \"Has it been more than 4 hours since last run?\") to separate healthy from failing pipelines</p>\n                    </div>\n                  </div>\n                  \n                  <div className={styles.step}>\n                    <div className={styles.stepNumber}>4</div>\n                    <div className={styles.stepContent}>\n                      <h4>Prediction</h4>\n                      <p>For a new pipeline, we follow the decision path and get a prediction with confidence score</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className={styles.explanationSection}>\n                <h3>📊 What We Look At (Features)</h3>\n                <div className={styles.featureExplanations}>\n                  <div className={styles.featureExplanation}>\n                    <h4>⏰ Hours Since Last Run</h4>\n                    <p>Pipelines that haven't run recently often have accumulated issues. If it's been more than 4-6 hours, failure risk increases significantly.</p>\n                  </div>\n                  \n                  <div className={styles.featureExplanation}>\n                    <h4>📈 Average Failure Rate</h4>\n                    <p>Historical reliability matters. Pipelines with 15%+ failure rates are inherently riskier than those with 2% failure rates.</p>\n                  </div>\n                  \n                  <div className={styles.featureExplanation}>\n                    <h4>📊 Data Volume Variance</h4>\n                    <p>Unusual data volumes can overwhelm processing capacity. High variance (60%+) often signals incoming problems.</p>\n                  </div>\n                  \n                  <div className={styles.featureExplanation}>\n                    <h4>📅 Day of Week</h4>\n                    <p>Monday mornings show higher failure rates (post-weekend maintenance effects). Weekends have less monitoring coverage.</p>\n                  </div>\n                  \n                  <div className={styles.featureExplanation}>\n                    <h4>🕐 Hour of Day</h4>\n                    <p>Off-hours (nights/weekends) have higher failure rates due to reduced monitoring and support availability.</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className={styles.explanationSection}>\n                <h3>🎯 Example Decision Path</h3>\n                <div className={styles.decisionExample}>\n                  <div className={styles.decisionPath}>\n                    <div className={styles.decisionNode}>\n                      <strong>Question 1:</strong> Has it been more than 4 hours since last run?\n                      <div className={styles.decisionBranch}>\n                        <span className={styles.yesPath}>YES → Higher Risk</span>\n                        <span className={styles.noPath}>NO → Continue...</span>\n                      </div>\n                    </div>\n                    \n                    <div className={styles.decisionNode}>\n                      <strong>Question 2:</strong> Is the failure rate above 15%?\n                      <div className={styles.decisionBranch}>\n                        <span className={styles.yesPath}>YES → High Risk</span>\n                        <span className={styles.noPath}>NO → Continue...</span>\n                      </div>\n                    </div>\n                    \n                    <div className={styles.decisionNode}>\n                      <strong>Question 3:</strong> Is it Monday morning (7-10 AM)?\n                      <div className={styles.decisionBranch}>\n                        <span className={styles.yesPath}>YES → 85% Failure Risk</span>\n                        <span className={styles.noPath}>NO → 15% Failure Risk</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className={styles.explanationSection}>\n                <h3>✅ Why This Approach Works</h3>\n                <div className={styles.whyItWorks}>\n                  <div className={styles.benefit}>\n                    <h4>Interpretable</h4>\n                    <p>Every prediction comes with clear reasoning you can explain to stakeholders</p>\n                  </div>\n                  \n                  <div className={styles.benefit}>\n                    <h4>Fast</h4>\n                    <p>Decision trees make predictions in milliseconds, perfect for real-time monitoring</p>\n                  </div>\n                  \n                  <div className={styles.benefit}>\n                    <h4>Realistic</h4>\n                    <p>80% accuracy reflects real-world performance - not suspiciously perfect</p>\n                  </div>\n                  \n                  <div className={styles.benefit}>\n                    <h4>Actionable</h4>\n                    <p>Identifies specific risk factors teams can address proactively</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className={styles.explanationSection}>\n                <h3>⚠️ Limitations & Considerations</h3>\n                <ul className={styles.limitations}>\n                  <li><strong>Proof of Concept:</strong> This is a demonstration model, not production-ready</li>\n                  <li><strong>Training Data:</strong> Uses simulated historical data with realistic patterns</li>\n                  <li><strong>Simple Features:</strong> Real systems would include more sophisticated metrics</li>\n                  <li><strong>Static Model:</strong> Production systems would retrain regularly with new data</li>\n                  <li><strong>Human Oversight:</strong> Predictions should always be validated by domain experts</li>\n                </ul>\n              </div>\n\n              <div className={styles.explanationFooter}>\n                <p><strong>Perfect for interviews:</strong> Shows you understand ML fundamentals, can explain complex concepts simply, and think about practical production considerations!</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <HowItWorksModal \n        isOpen={showHowItWorks}\n        onClose={() => setShowHowItWorks(false)}\n        section=\"predictiveInsights\"\n      />\n    </div>\n  );\n};\n\nexport default PredictiveInsights;\n"],"names":["SimpleDecisionTree","maxDepth","minSamplesLeaf","__publicField","samples","positives","s","negatives","posRatio","negRatio","bestGain","bestFeature","bestThreshold","features","parentGini","feature","values","a","b","i","threshold","leftSamples","rightSamples","leftGini","rightGini","weightedGini","gain","depth","failures","total","failureRate","bestSplit","data","tree","correct","sample","accuracy","featureImportance","path","currentNode","featureValue","condition","importance","traverse","node","weight","sum","val","key","prediction","confidence","leftPath","rightPath","MockDataGenerator","pipelines","recordCount","records","pipeline","timestamp","dayOfWeek","hourOfDay","hoursSinceLastRun","avgFailureRate","dataVolumeVariance","failureProbability","willFailInNext2Hours","now","baseVariance","timeMultiplier","record","adjustedFailureRate","FEATURE_EXPLANATIONS","PredictiveInsights","model","setModel","useState","predictions","setPredictions","selectedPrediction","setSelectedPrediction","isTraining","setIsTraining","lastUpdate","setLastUpdate","showModelDetails","setShowModelDetails","showModelExplanation","setShowModelExplanation","showHowItWorks","setShowHowItWorks","trainModel","useMemo","trainingData","mockPipelines","enhancedData","generatePredictions","riskScore","reasoning","generateReasoning","_path","reasons","dayNames","useEffect","initialPredictions","interval","updatedPredictions","atRiskPipelines","p","highConfidencePredictions","getStatusColor","styles","formatTime","date","jsx","jsxs","RefreshCw","Brain","HelpCircle","Clock","Target","Info","getTooltipContent","InfoTooltip","AlertTriangle","TrendingUp","BarChart3","reason","idx","e","value","explanation","HowItWorksModal"],"mappings":"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"}