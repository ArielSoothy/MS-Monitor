{"version":3,"file":"AzureConnection-6Og606CY.js","sources":["../../src/pages/AzureConnection.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Server, Database, Key, CheckCircle, AlertCircle, Loader, Play, FileText, Monitor } from 'lucide-react';\nimport styles from './AzureConnection.module.css';\nimport { azureService } from '../services/azureService';\n\ninterface ConnectionStatus {\n  isConnected: boolean;\n  isLoading: boolean;\n  error: string | null;\n  lastTest: Date | null;\n  databaseStats?: {\n    tables: number;\n    totalRecords: number;\n    lastIngestion: Date | null;\n  };\n}\n\nconst AzureConnection: React.FC = () => {\n  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({\n    isConnected: false,\n    isLoading: false,\n    error: null,\n    lastTest: null,\n  });\n\n  const [activeStep, setActiveStep] = useState<number>(1);\n\n  const testConnection = async () => {\n    setConnectionStatus(prev => ({\n      ...prev,\n      isLoading: true,\n      error: null,\n    }));\n\n    try {\n      const result = await azureService.testConnection();\n      \n      // Get database statistics if connection is successful\n      let stats = undefined;\n      if (result) {\n        try {\n          const tableCount = await azureService.executeCustomQuery('show tables | count');\n          const securityEvents = await azureService.executeCustomQuery('SecurityEvents | count');\n          const threatIndicators = await azureService.executeCustomQuery('ThreatIndicators | count');\n          \n          stats = {\n            tables: tableCount[0]?.Count || 0,\n            totalRecords: (securityEvents[0]?.Count || 0) + (threatIndicators[0]?.Count || 0),\n            lastIngestion: new Date(), // This would be real data in production\n          };\n        } catch (e) {\n          console.log('Could not get database stats:', e);\n        }\n      }\n\n      setConnectionStatus({\n        isConnected: result,\n        isLoading: false,\n        error: result ? null : 'Failed to connect to Azure Data Explorer',\n        lastTest: new Date(),\n        databaseStats: stats,\n      });\n    } catch (error) {\n      setConnectionStatus({\n        isConnected: false,\n        isLoading: false,\n        error: error instanceof Error ? error.message : 'Connection failed',\n        lastTest: new Date(),\n      });\n    }\n  };\n\n  const setupSteps = [\n    {\n      id: 1,\n      title: 'Azure Data Explorer Setup',\n      description: 'Create your ADX cluster and database',\n      status: 'completed',\n      details: [\n        'Cluster: msmonitoradx.israelcentral.kusto.windows.net',\n        'Database: monitoringdb',\n        'Region: Israel Central',\n        'Retention: 2 days (cost-optimized for demo)',\n      ],\n    },\n    {\n      id: 2,\n      title: 'Database Schema Creation',\n      description: 'Create tables for security and pipeline data',\n      status: connectionStatus.databaseStats?.tables ? 'completed' : 'pending',\n      details: [\n        'SecurityEvents table for threat intelligence',\n        'ThreatIndicators for IOC correlation',\n        'PipelineHealth for monitoring metrics',\n        'PipelineMetrics for time-series data',\n      ],\n    },\n    {\n      id: 3,\n      title: 'Sample Data Ingestion',\n      description: 'Load realistic MSTIC-style security data',\n      status: connectionStatus.databaseStats?.totalRecords ? 'completed' : 'pending',\n      details: [\n        'Security events from various sources',\n        'Threat indicators and IOCs',\n        'Pipeline health metrics',\n        'Geographic threat distribution data',\n      ],\n    },\n    {\n      id: 4,\n      title: 'Live Connection Test',\n      description: 'Verify React app can query Azure Data Explorer',\n      status: connectionStatus.isConnected ? 'completed' : 'pending',\n      details: [\n        'KQL query execution',\n        'Real-time data retrieval',\n        'Authentication validation',\n        'Error handling verification',\n      ],\n    },\n  ];\n\n  useEffect(() => {\n    // Auto-test connection on component mount\n    testConnection();\n  }, []);\n\n  return (\n    <div className={styles.azureConnection}>\n      <div className={styles.header}>\n        <div className={styles.titleSection}>\n          <Server className={styles.titleIcon} />\n          <div>\n            <h1>Azure Data Explorer Integration</h1>\n            <p>Live connection to Microsoft MSTIC-style threat intelligence database</p>\n          </div>\n        </div>\n        \n        <div className={styles.statusCard}>\n          <div className={styles.statusHeader}>\n            <Database className={styles.statusIcon} />\n            <span>Connection Status</span>\n          </div>\n          <div className={styles.statusContent}>\n            {connectionStatus.isLoading ? (\n              <div className={styles.statusLoading}>\n                <Loader className={styles.spinner} />\n                <span>Testing connection...</span>\n              </div>\n            ) : connectionStatus.isConnected ? (\n              <div className={styles.statusConnected}>\n                <CheckCircle className={styles.statusIndicator} />\n                <span>Connected to Azure Data Explorer</span>\n              </div>\n            ) : (\n              <div className={styles.statusError}>\n                <AlertCircle className={styles.statusIndicator} />\n                <span>Not Connected</span>\n              </div>\n            )}\n            \n            {connectionStatus.lastTest && (\n              <div className={styles.lastTest}>\n                Last tested: {connectionStatus.lastTest.toLocaleTimeString()}\n              </div>\n            )}\n          </div>\n          \n          <button \n            className={styles.testButton}\n            onClick={testConnection}\n            disabled={connectionStatus.isLoading}\n          >\n            {connectionStatus.isLoading ? (\n              <>\n                <Loader className={styles.buttonSpinner} />\n                Testing...\n              </>\n            ) : (\n              <>\n                <Play />\n                Test Connection\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* Database Statistics */}\n      {connectionStatus.databaseStats && (\n        <div className={styles.statsGrid}>\n          <div className={styles.statCard}>\n            <Database className={styles.statIcon} />\n            <div className={styles.statContent}>\n              <div className={styles.statValue}>{connectionStatus.databaseStats.tables}</div>\n              <div className={styles.statLabel}>Tables Created</div>\n            </div>\n          </div>\n          \n          <div className={styles.statCard}>\n            <FileText className={styles.statIcon} />\n            <div className={styles.statContent}>\n              <div className={styles.statValue}>{connectionStatus.databaseStats.totalRecords.toLocaleString()}</div>\n              <div className={styles.statLabel}>Total Records</div>\n            </div>\n          </div>\n          \n          <div className={styles.statCard}>\n            <Monitor className={styles.statIcon} />\n            <div className={styles.statContent}>\n              <div className={styles.statValue}>Live</div>\n              <div className={styles.statLabel}>Data Status</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Setup Progress */}\n      <div className={styles.setupSection}>\n        <h2>Implementation Progress</h2>\n        <div className={styles.stepsContainer}>\n          {setupSteps.map((step) => (\n            <div \n              key={step.id}\n              className={`${styles.stepCard} ${\n                step.status === 'completed' ? styles.stepCompleted : styles.stepPending\n              } ${activeStep === step.id ? styles.stepActive : ''}`}\n              onClick={() => setActiveStep(step.id)}\n            >\n              <div className={styles.stepHeader}>\n                <div className={styles.stepNumber}>\n                  {step.status === 'completed' ? (\n                    <CheckCircle className={styles.stepIcon} />\n                  ) : (\n                    <span>{step.id}</span>\n                  )}\n                </div>\n                <div className={styles.stepTitle}>\n                  <h3>{step.title}</h3>\n                  <p>{step.description}</p>\n                </div>\n                <div className={styles.stepStatus}>\n                  <span className={step.status === 'completed' ? styles.completed : styles.pending}>\n                    {step.status === 'completed' ? 'Completed' : 'Pending'}\n                  </span>\n                </div>\n              </div>\n              \n              {activeStep === step.id && (\n                <div className={styles.stepDetails}>\n                  <ul>\n                    {step.details.map((detail, index) => (\n                      <li key={index}>{detail}</li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Connection Details */}\n      <div className={styles.detailsSection}>\n        <h2>Connection Configuration</h2>\n        <div className={styles.configGrid}>\n          <div className={styles.configItem}>\n            <Server className={styles.configIcon} />\n            <div>\n              <strong>Cluster Endpoint</strong>\n              <div className={styles.configValue}>msmonitoradx.israelcentral.kusto.windows.net</div>\n            </div>\n          </div>\n          \n          <div className={styles.configItem}>\n            <Database className={styles.configIcon} />\n            <div>\n              <strong>Database</strong>\n              <div className={styles.configValue}>monitoringdb</div>\n            </div>\n          </div>\n          \n          <div className={styles.configItem}>\n            <Key className={styles.configIcon} />\n            <div>\n              <strong>Authentication</strong>\n              <div className={styles.configValue}>\n                {connectionStatus.isConnected ? 'Azure AD (Demo Mode)' : 'Not Connected'}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {connectionStatus.error && (\n        <div className={styles.errorSection}>\n          <AlertCircle className={styles.errorIcon} />\n          <div>\n            <h3>Connection Error</h3>\n            <p>{connectionStatus.error}</p>\n            <div className={styles.errorHelp}>\n              <strong>Next Steps:</strong>\n              <ol>\n                <li>Verify your Azure Data Explorer cluster is running</li>\n                <li>Check that tables are created using phase1-create-tables.kql</li>\n                <li>Ensure sample data is loaded using phase2-insert-data.kql</li>\n                <li>Verify network connectivity to Azure</li>\n              </ol>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Success Message */}\n      {connectionStatus.isConnected && (\n        <div className={styles.successSection}>\n          <CheckCircle className={styles.successIcon} />\n          <div>\n            <h3>🎉 Azure Data Explorer Successfully Connected!</h3>\n            <p>Your React application is now connected to live Azure data. The dashboard will show real threat intelligence data from your ADX cluster.</p>\n            <div className={styles.nextSteps}>\n              <strong>Ready for the MSTIC interview:</strong>\n              <ul>\n                <li>✅ Live KQL queries executing against real Azure data</li>\n                <li>✅ Real-time threat intelligence monitoring</li>\n                <li>✅ Geographic threat distribution from live data</li>\n                <li>✅ Pipeline health metrics from ADX</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AzureConnection;\n"],"names":["AzureConnection","connectionStatus","setConnectionStatus","useState","activeStep","setActiveStep","testConnection","prev","result","azureService","stats","tableCount","securityEvents","threatIndicators","_a","_b","_c","e","error","setupSteps","useEffect","jsxs","styles","jsx","Server","Database","Loader","CheckCircle","AlertCircle","Fragment","Play","FileText","Monitor","step","detail","index","Key"],"mappings":"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"}