{"version":3,"file":"DataLineage-9qNENjzG.js","sources":["../../src/components/ErrorDetailsModal.tsx","../../src/pages/DataLineage.tsx"],"sourcesContent":["import { useState } from 'react';\nimport {\n  AlertTriangle,\n  XCircle,\n  ExternalLink,\n  Clock,\n  TrendingDown,\n  FileText,\n  Users,\n  MessageSquare,\n  Activity,\n  AlertCircle,\n  CheckCircle,\n  Copy,\n  Zap,\n  Shield,\n  Settings,\n  Phone,\n  Mail,\n  Gauge,\n  Server,\n  BarChart3\n} from 'lucide-react';\nimport type { ErrorDetails, LogReference, MetricHistory, ImpactAnalysis, RunbookReference } from '../types';\nimport styles from './ErrorDetailsModal.module.css';\n\n// Operational Information Interface (from DataLineage popup data)\ninterface OperationalInfo {\n  slaMetrics?: {\n    uptime: number;\n    targetUptime: number;\n    mttr: number; // Mean Time To Recovery in minutes\n    mtbf: number; // Mean Time Between Failures in hours\n  };\n  operationalInfo?: {\n    owner: string;\n    escalationPath: string[];\n    maintenanceWindow: string;\n    criticalityLevel: 'low' | 'medium' | 'high' | 'critical';\n    dataClassification: 'public' | 'internal' | 'confidential' | 'restricted';\n    complianceRequirements: string[];\n  };\n  performanceMetrics?: {\n    avgLatency: number;\n    p95Latency: number;\n    errorRate: number;\n    throughputMbps: number;\n    cpuUtilization: number;\n    memoryUtilization: number;\n  };\n  troubleshooting?: {\n    commonIssues: string[];\n    runbookUrls: string[];\n    logQuerySamples: string[];\n    healthCheckEndpoints: string[];\n  };\n  technology?: {\n    stack: string;\n    resourceGroup: string;\n    region: string;\n    subscriptionId: string;\n  };\n  contactInfo?: {\n    primaryTeam: string;\n    secondaryTeam?: string;\n    escalationContacts: Array<{\n      name: string;\n      role: string;\n      email: string;\n      phone?: string;\n      slackHandle?: string;\n    }>;\n  };\n}\n\ninterface ErrorDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  pipelineName: string;\n  currentError?: ErrorDetails;\n  errorHistory: ErrorDetails[];\n  logReferences: LogReference[];\n  metricsHistory: MetricHistory[];\n  impactAnalysis?: ImpactAnalysis;\n  runbooks: RunbookReference[];\n  oncallTeam: string;\n  slackChannel?: string;\n  teamsChannel?: string;\n  dashboardUrl?: string;\n  grafanaUrl?: string;\n  healthCheckUrl?: string;\n  // New operational information from popup data\n  operationalData?: OperationalInfo;\n}\n\nconst ErrorDetailsModal: React.FC<ErrorDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  pipelineName,\n  currentError,\n  errorHistory,\n  logReferences,\n  metricsHistory,\n  impactAnalysis,\n  runbooks,\n  oncallTeam,\n  slackChannel,\n  teamsChannel,\n  dashboardUrl,\n  grafanaUrl,\n  healthCheckUrl,\n  operationalData\n}) => {\n  const [activeTab, setActiveTab] = useState<'error' | 'logs' | 'metrics' | 'impact' | 'runbooks' | 'operations'>('error');\n  const [copiedText, setCopiedText] = useState<string | null>(null);\n\n  if (!isOpen) return null;\n\n  const copyToClipboard = async (text: string, label: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedText(label);\n      setTimeout(() => setCopiedText(null), 2000);\n    } catch (err) {\n      console.error('Failed to copy:', err);\n    }\n  };\n\n  const getErrorIcon = (errorType: string) => {\n    switch (errorType) {\n      case 'connection': return <Zap className={styles.errorIcon} />;\n      case 'data_quality': return <TrendingDown className={styles.errorIcon} />;\n      case 'timeout': return <Clock className={styles.errorIcon} />;\n      case 'authentication': return <Users className={styles.errorIcon} />;\n      default: return <AlertTriangle className={styles.errorIcon} />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return '#ef4444';\n      case 'high': return '#f97316';\n      case 'medium': return '#eab308';\n      case 'low': return '#22c55e';\n      default: return '#6b7280';\n    }\n  };\n\n  return (\n    <div className={styles.modalOverlay} onClick={onClose}>\n      <div className={styles.modal} onClick={(e) => e.stopPropagation()}>\n        <div className={styles.modalHeader}>\n          <div>\n            <h2 className={styles.modalTitle}>Pipeline Error Details</h2>\n            <p className={styles.pipelineName}>{pipelineName}</p>\n          </div>\n          <button className={styles.closeButton} onClick={onClose}>\n            <XCircle size={24} />\n          </button>\n        </div>\n\n        {/* Quick Actions Bar */}\n        <div className={styles.quickActions}>\n          <button \n            className={styles.actionButton}\n            onClick={() => window.open(healthCheckUrl, '_blank')}\n            disabled={!healthCheckUrl}\n          >\n            <Activity size={16} />\n            Health Check\n          </button>\n          <button \n            className={styles.actionButton}\n            onClick={() => window.open(dashboardUrl, '_blank')}\n            disabled={!dashboardUrl}\n          >\n            <ExternalLink size={16} />\n            Dashboard\n          </button>\n          <button \n            className={styles.actionButton}\n            onClick={() => window.open(grafanaUrl, '_blank')}\n            disabled={!grafanaUrl}\n          >\n            <TrendingDown size={16} />\n            Metrics\n          </button>\n          {slackChannel && (\n            <button \n              className={styles.actionButton}\n              onClick={() => window.open(`slack://channel?team=T123&id=${slackChannel}`, '_blank')}\n            >\n              <MessageSquare size={16} />\n              Slack\n            </button>\n          )}\n          {teamsChannel && (\n            <button \n              className={styles.actionButton}\n              onClick={() => window.open(teamsChannel, '_blank')}\n            >\n              <Users size={16} />\n              Teams\n            </button>\n          )}\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className={styles.tabNav}>\n          {['error', 'operations', 'logs', 'metrics', 'impact', 'runbooks'].map((tab) => (\n            <button\n              key={tab}\n              className={`${styles.tab} ${activeTab === tab ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab(tab as any)}\n            >\n              {tab === 'operations' ? 'Operations' : tab.charAt(0).toUpperCase() + tab.slice(1)}\n              {tab === 'error' && currentError && (\n                <span className={styles.errorBadge} style={{ backgroundColor: getSeverityColor(currentError.severity) }}>\n                  {currentError.severity}\n                </span>\n              )}\n            </button>\n          ))}\n        </div>\n\n        <div className={styles.modalContent}>\n          {/* Error Details Tab */}\n          {activeTab === 'error' && (\n            <div className={styles.tabContent}>\n              {currentError ? (\n                <div className={styles.currentError}>\n                  <div className={styles.errorHeader}>\n                    <div className={styles.errorInfo}>\n                      {getErrorIcon(currentError.errorType)}\n                      <div>\n                        <h3 className={styles.errorTitle}>{currentError.errorMessage}</h3>\n                        <div className={styles.errorMeta}>\n                          <span className={styles.errorCode}>Error Code: {currentError.errorCode}</span>\n                          <span className={styles.errorTime}>\n                            {new Date(currentError.timestamp).toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    <span \n                      className={styles.severityBadge}\n                      style={{ backgroundColor: getSeverityColor(currentError.severity) }}\n                    >\n                      {currentError.severity}\n                    </span>\n                  </div>\n\n                  {/* Stack Trace */}\n                  {currentError.stackTrace && (\n                    <div className={styles.stackTrace}>\n                      <div className={styles.stackHeader}>\n                        <h4>Stack Trace</h4>\n                        <button\n                          className={styles.copyButton}\n                          onClick={() => copyToClipboard(currentError.stackTrace!, 'Stack Trace')}\n                        >\n                          <Copy size={14} />\n                          {copiedText === 'Stack Trace' ? 'Copied!' : 'Copy'}\n                        </button>\n                      </div>\n                      <pre className={styles.stackContent}>{currentError.stackTrace}</pre>\n                    </div>\n                  )}\n\n                  {/* Suggested Actions */}\n                  <div className={styles.suggestedActions}>\n                    <h4>Suggested Actions</h4>\n                    <ul className={styles.actionsList}>\n                      {currentError.suggestedActions.map((action, index) => (\n                        <li key={index} className={styles.actionItem}>\n                          <CheckCircle size={16} className={styles.actionIcon} />\n                          {action}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  {/* Context */}\n                  {currentError.context && Object.keys(currentError.context).length > 0 && (\n                    <div className={styles.context}>\n                      <h4>Error Context</h4>\n                      <div className={styles.contextGrid}>\n                        {Object.entries(currentError.context).map(([key, value]) => (\n                          <div key={key} className={styles.contextItem}>\n                            <span className={styles.contextKey}>{key}:</span>\n                            <span className={styles.contextValue}>{String(value)}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className={styles.noError}>\n                  <CheckCircle size={48} className={styles.noErrorIcon} />\n                  <h3>No Current Errors</h3>\n                  <p>This pipeline is currently running without any detected errors.</p>\n                </div>\n              )}\n\n              {/* Error History */}\n              {errorHistory.length > 0 && (\n                <div className={styles.errorHistory}>\n                  <h4>Recent Error History</h4>\n                  <div className={styles.historyList}>\n                    {errorHistory.slice(0, 5).map((error, index) => (\n                      <div key={index} className={styles.historyItem}>\n                        <div className={styles.historyIcon}>\n                          {getErrorIcon(error.errorType)}\n                        </div>\n                        <div className={styles.historyContent}>\n                          <div className={styles.historyMessage}>{error.errorMessage}</div>\n                          <div className={styles.historyMeta}>\n                            <span>{error.errorCode}</span>\n                            <span>{new Date(error.timestamp).toLocaleString()}</span>\n                          </div>\n                        </div>\n                        <span \n                          className={styles.historySeverity}\n                          style={{ backgroundColor: getSeverityColor(error.severity) }}\n                        >\n                          {error.severity}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Operations Tab - Consolidated from popup data */}\n          {activeTab === 'operations' && (\n            <div className={styles.tabContent}>\n              <div className={styles.operationsSection}>\n                {/* Contact Information */}\n                <div className={styles.contactSection}>\n                  <h3>\n                    <Users size={20} />\n                    Contact Information\n                  </h3>\n                  <div className={styles.contactGrid}>\n                    <div className={styles.contactCard}>\n                      <h4>Primary Team</h4>\n                      <div className={styles.teamInfo}>\n                        <span className={styles.teamName}>\n                          {operationalData?.operationalInfo?.owner || oncallTeam}\n                        </span>\n                        <div className={styles.contactMethods}>\n                          {slackChannel && (\n                            <button\n                              className={styles.contactButton}\n                              onClick={() => window.open(`slack://channel?team=T123&id=${slackChannel}`, '_blank')}\n                            >\n                              <MessageSquare size={14} />\n                              #{slackChannel}\n                            </button>\n                          )}\n                          {teamsChannel && (\n                            <button\n                              className={styles.contactButton}\n                              onClick={() => window.open(teamsChannel, '_blank')}\n                            >\n                              <Users size={14} />\n                              Teams Channel\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className={styles.contactCard}>\n                      <h4>Escalation Path</h4>\n                      <div className={styles.escalationPath}>\n                        {(operationalData?.operationalInfo?.escalationPath || \n                          ['On-call Engineer', 'Senior Engineer', 'Team Lead', 'Principal Engineer']).map((level, index) => (\n                          <div key={index} className={styles.escalationLevel}>\n                            <span className={styles.escalationOrder}>{index + 1}</span>\n                            <span className={styles.escalationRole}>{level}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {operationalData?.contactInfo && (\n                      <div className={styles.contactCard}>\n                        <h4>Key Contacts</h4>\n                        <div className={styles.keyContacts}>\n                          {operationalData.contactInfo.escalationContacts.slice(0, 3).map((contact, index) => (\n                            <div key={index} className={styles.contactPerson}>\n                              <div className={styles.contactName}>{contact.name}</div>\n                              <div className={styles.contactRole}>{contact.role}</div>\n                              <div className={styles.contactDetails}>\n                                <span className={styles.contactEmail}>\n                                  <Mail size={12} />\n                                  {contact.email}\n                                </span>\n                                {contact.phone && (\n                                  <span className={styles.contactPhone}>\n                                    <Phone size={12} />\n                                    {contact.phone}\n                                  </span>\n                                )}\n                                {contact.slackHandle && (\n                                  <span className={styles.contactSlack}>\n                                    <MessageSquare size={12} />\n                                    @{contact.slackHandle}\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* SLA & Performance Metrics */}\n                {operationalData?.slaMetrics && (\n                  <div className={styles.slaSection}>\n                    <h3>\n                      <Gauge size={20} />\n                      SLA Metrics\n                    </h3>\n                    <div className={styles.slaGrid}>\n                      <div className={styles.slaCard}>\n                        <div className={styles.slaLabel}>Current Uptime</div>\n                        <div className={styles.slaValue}>\n                          {operationalData.slaMetrics.uptime.toFixed(2)}%\n                        </div>\n                        <div className={styles.slaTarget}>\n                          Target: {operationalData.slaMetrics.targetUptime}%\n                        </div>\n                      </div>\n                      <div className={styles.slaCard}>\n                        <div className={styles.slaLabel}>MTTR</div>\n                        <div className={styles.slaValue}>\n                          {operationalData.slaMetrics.mttr} min\n                        </div>\n                        <div className={styles.slaTarget}>Mean Time To Recovery</div>\n                      </div>\n                      <div className={styles.slaCard}>\n                        <div className={styles.slaLabel}>MTBF</div>\n                        <div className={styles.slaValue}>\n                          {operationalData.slaMetrics.mtbf} hrs\n                        </div>\n                        <div className={styles.slaTarget}>Mean Time Between Failures</div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Technology Stack */}\n                {operationalData?.technology && (\n                  <div className={styles.techSection}>\n                    <h3>\n                      <Server size={20} />\n                      Technology Stack\n                    </h3>\n                    <div className={styles.techGrid}>\n                      <div className={styles.techCard}>\n                        <div className={styles.techLabel}>Service</div>\n                        <div className={styles.techValue}>{operationalData.technology.stack}</div>\n                      </div>\n                      <div className={styles.techCard}>\n                        <div className={styles.techLabel}>Resource Group</div>\n                        <div className={styles.techValue}>{operationalData.technology.resourceGroup}</div>\n                      </div>\n                      <div className={styles.techCard}>\n                        <div className={styles.techLabel}>Region</div>\n                        <div className={styles.techValue}>{operationalData.technology.region}</div>\n                      </div>\n                      <div className={styles.techCard}>\n                        <div className={styles.techLabel}>Subscription</div>\n                        <div className={styles.techValue}>{operationalData.technology.subscriptionId}</div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Operational Configuration */}\n                {operationalData?.operationalInfo && (\n                  <div className={styles.configSection}>\n                    <h3>\n                      <Settings size={20} />\n                      Operational Configuration\n                    </h3>\n                    <div className={styles.configGrid}>\n                      <div className={styles.configCard}>\n                        <div className={styles.configLabel}>Criticality Level</div>\n                        <div className={`${styles.configValue} ${styles[`criticality-${operationalData.operationalInfo.criticalityLevel}`]}`}>\n                          {operationalData.operationalInfo.criticalityLevel.toUpperCase()}\n                        </div>\n                      </div>\n                      <div className={styles.configCard}>\n                        <div className={styles.configLabel}>Data Classification</div>\n                        <div className={`${styles.configValue} ${styles[`classification-${operationalData.operationalInfo.dataClassification}`]}`}>\n                          <Shield size={14} />\n                          {operationalData.operationalInfo.dataClassification.toUpperCase()}\n                        </div>\n                      </div>\n                      <div className={styles.configCard}>\n                        <div className={styles.configLabel}>Maintenance Window</div>\n                        <div className={styles.configValue}>\n                          <Clock size={14} />\n                          {operationalData.operationalInfo.maintenanceWindow}\n                        </div>\n                      </div>\n                      <div className={styles.configCard}>\n                        <div className={styles.configLabel}>Compliance</div>\n                        <div className={styles.complianceList}>\n                          {operationalData.operationalInfo.complianceRequirements.map((req, index) => (\n                            <span key={index} className={styles.complianceBadge}>{req}</span>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Performance Metrics */}\n                {operationalData?.performanceMetrics && (\n                  <div className={styles.perfSection}>\n                    <h3>\n                      <BarChart3 size={20} />\n                      Real-time Performance\n                    </h3>\n                    <div className={styles.perfGrid}>\n                      <div className={styles.perfCard}>\n                        <div className={styles.perfLabel}>Average Latency</div>\n                        <div className={styles.perfValue}>\n                          {operationalData.performanceMetrics.avgLatency}ms\n                        </div>\n                      </div>\n                      <div className={styles.perfCard}>\n                        <div className={styles.perfLabel}>P95 Latency</div>\n                        <div className={styles.perfValue}>\n                          {operationalData.performanceMetrics.p95Latency}ms\n                        </div>\n                      </div>\n                      <div className={styles.perfCard}>\n                        <div className={styles.perfLabel}>Error Rate</div>\n                        <div className={styles.perfValue}>\n                          {operationalData.performanceMetrics.errorRate.toFixed(2)}%\n                        </div>\n                      </div>\n                      <div className={styles.perfCard}>\n                        <div className={styles.perfLabel}>Throughput</div>\n                        <div className={styles.perfValue}>\n                          {operationalData.performanceMetrics.throughputMbps} MB/s\n                        </div>\n                      </div>\n                      <div className={styles.perfCard}>\n                        <div className={styles.perfLabel}>CPU Usage</div>\n                        <div className={styles.perfValue}>\n                          {operationalData.performanceMetrics.cpuUtilization.toFixed(1)}%\n                        </div>\n                      </div>\n                      <div className={styles.perfCard}>\n                        <div className={styles.perfLabel}>Memory Usage</div>\n                        <div className={styles.perfValue}>\n                          {operationalData.performanceMetrics.memoryUtilization.toFixed(1)}%\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Troubleshooting Resources */}\n                {operationalData?.troubleshooting && (\n                  <div className={styles.troubleshootSection}>\n                    <h3>\n                      <FileText size={20} />\n                      Troubleshooting Resources\n                    </h3>\n                    <div className={styles.troubleshootGrid}>\n                      <div className={styles.troubleshootCard}>\n                        <h4>Common Issues</h4>\n                        <ul className={styles.issuesList}>\n                          {operationalData.troubleshooting.commonIssues.map((issue, index) => (\n                            <li key={index} className={styles.issueItem}>\n                              <AlertCircle size={14} />\n                              {issue}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                      <div className={styles.troubleshootCard}>\n                        <h4>Health Check Endpoints</h4>\n                        <div className={styles.endpointsList}>\n                          {operationalData.troubleshooting.healthCheckEndpoints.map((endpoint, index) => (\n                            <button\n                              key={index}\n                              className={styles.endpointButton}\n                              onClick={() => window.open(endpoint, '_blank')}\n                            >\n                              <Activity size={14} />\n                              Health Check {index + 1}\n                              <ExternalLink size={12} />\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n                      <div className={styles.troubleshootCard}>\n                        <h4>Diagnostic Queries</h4>\n                        <div className={styles.queriesList}>\n                          {operationalData.troubleshooting.logQuerySamples.slice(0, 2).map((query, index) => (\n                            <div key={index} className={styles.queryItem}>\n                              <div className={styles.queryHeader}>\n                                <span>Query {index + 1}</span>\n                                <button\n                                  className={styles.copyButton}\n                                  onClick={() => copyToClipboard(query, `Query ${index + 1}`)}\n                                >\n                                  <Copy size={12} />\n                                  {copiedText === `Query ${index + 1}` ? 'Copied!' : 'Copy'}\n                                </button>\n                              </div>\n                              <code className={styles.queryCode}>{query}</code>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Logs Tab */}\n          {activeTab === 'logs' && (\n            <div className={styles.tabContent}>\n              <div className={styles.logsSection}>\n                <h3>Log References</h3>\n                <div className={styles.logsList}>\n                  {logReferences.map((log, index) => (\n                    <div key={index} className={styles.logItem}>\n                      <div className={styles.logHeader}>\n                        <div className={styles.logSystem}>\n                          <FileText size={16} />\n                          {log.logSystem.toUpperCase()}\n                        </div>\n                        <button\n                          className={styles.logButton}\n                          onClick={() => window.open(log.logUrl, '_blank')}\n                        >\n                          <ExternalLink size={14} />\n                          Open Logs\n                        </button>\n                      </div>\n                      <div className={styles.logMeta}>\n                        <span>Correlation ID: {log.correlationId}</span>\n                        <span>\n                          Time Range: {new Date(log.timeRange.start).toLocaleString()} - \n                          {new Date(log.timeRange.end).toLocaleString()}\n                        </span>\n                      </div>\n                      {log.queryTemplate && (\n                        <div className={styles.queryTemplate}>\n                          <div className={styles.queryHeader}>\n                            <span>Query Template:</span>\n                            <button\n                              className={styles.copyButton}\n                              onClick={() => copyToClipboard(log.queryTemplate!, 'Query')}\n                            >\n                              <Copy size={12} />\n                              {copiedText === 'Query' ? 'Copied!' : 'Copy'}\n                            </button>\n                          </div>\n                          <code className={styles.queryCode}>{log.queryTemplate}</code>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Metrics Tab */}\n          {activeTab === 'metrics' && (\n            <div className={styles.tabContent}>\n              <div className={styles.metricsSection}>\n                <h3>Performance Metrics History</h3>\n                {/* This would typically be a chart component */}\n                <div className={styles.metricsPlaceholder}>\n                  <Activity size={48} />\n                  <p>Interactive metrics charts would be displayed here</p>\n                  <p>Showing trends for: Records/sec, Processing Time, Error Rate, Data Quality</p>\n                  {/* metricsHistory data would be used here for chart rendering */}\n                  {metricsHistory.length > 0 && (\n                    <p className={styles.metricsInfo}>\n                      {metricsHistory.length} historical data points available\n                    </p>\n                  )}\n                  {grafanaUrl && (\n                    <button\n                      className={styles.grafanaButton}\n                      onClick={() => window.open(grafanaUrl, '_blank')}\n                    >\n                      <ExternalLink size={16} />\n                      View in Grafana\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Impact Analysis Tab */}\n          {activeTab === 'impact' && (\n            <div className={styles.tabContent}>\n              {impactAnalysis ? (\n                <div className={styles.impactSection}>\n                  <div className={styles.impactOverview}>\n                    <h3>Impact Analysis</h3>\n                    <div className={styles.impactLevel}>\n                      <span \n                        className={styles.impactBadge}\n                        style={{ backgroundColor: getSeverityColor(impactAnalysis.businessImpactLevel) }}\n                      >\n                        {impactAnalysis.businessImpactLevel.toUpperCase()} IMPACT\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className={styles.impactGrid}>\n                    <div className={styles.impactCard}>\n                      <h4>Affected Downstream Pipelines</h4>\n                      <div className={styles.affectedList}>\n                        {impactAnalysis.affectedDownstreamPipelines.map((pipeline, index) => (\n                          <div key={index} className={styles.affectedItem}>\n                            <AlertCircle size={14} />\n                            {pipeline}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className={styles.impactCard}>\n                      <h4>Affected Destinations</h4>\n                      <div className={styles.affectedList}>\n                        {impactAnalysis.affectedDestinations.map((dest, index) => (\n                          <div key={index} className={styles.affectedItem}>\n                            <AlertCircle size={14} />\n                            {dest}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className={styles.impactCard}>\n                      <h4>Estimated Data Loss</h4>\n                      <div className={styles.impactMetric}>\n                        {impactAnalysis.estimatedDataLoss.toLocaleString()} records\n                      </div>\n                    </div>\n\n                    <div className={styles.impactCard}>\n                      <h4>Recovery Time Estimate</h4>\n                      <div className={styles.impactMetric}>\n                        {impactAnalysis.recoveryTimeEstimate} minutes\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className={styles.noImpact}>\n                  <CheckCircle size={48} />\n                  <h3>No Current Impact</h3>\n                  <p>This pipeline failure is not currently impacting downstream systems.</p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Runbooks Tab */}\n          {activeTab === 'runbooks' && (\n            <div className={styles.tabContent}>\n              <div className={styles.runbooksSection}>\n                <h3>Resolution Runbooks</h3>\n                <div className={styles.runbooksList}>\n                  {runbooks.map((runbook, index) => (\n                    <div key={index} className={styles.runbookItem}>\n                      <div className={styles.runbookHeader}>\n                        <h4>{runbook.title}</h4>\n                        <div className={styles.runbookMeta}>\n                          <Clock size={14} />\n                          ~{runbook.estimatedResolutionTime} min\n                        </div>\n                      </div>\n                      <p className={styles.runbookDescription}>{runbook.description}</p>\n                      <button\n                        className={styles.runbookButton}\n                        onClick={() => window.open(runbook.url, '_blank')}\n                      >\n                        <FileText size={16} />\n                        Open Runbook\n                      </button>\n                    </div>\n                  ))}\n                </div>\n\n                <div className={styles.oncallInfo}>\n                  <h4>On-Call Team</h4>\n                  <div className={styles.oncallDetails}>\n                    <Users size={16} />\n                    <span>{oncallTeam}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ErrorDetailsModal;\n","import { useState, useRef, memo, useMemo, useEffect } from 'react';\nimport {\n  Database,\n  ArrowRight,\n  GitBranch,\n  Search,\n  Activity,\n  Clock,\n  BarChart3,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Zap,\n  HelpCircle,\n  X,\n  Maximize2,\n  Minimize2,\n  Server,\n  Shield,\n  Cpu,\n  HardDrive\n} from 'lucide-react';\nimport { mockPipelines } from '../data/mockData';\nimport type { PipelineSource, PipelineStatus } from '../types';\nimport ErrorDetailsModal from '../components/ErrorDetailsModal';\nimport HowItWorksModal from '../components/HowItWorksModal';\nimport styles from './DataLineage.module.css';\n\ninterface LineageNode {\n  id: string;\n  name: string;\n  type: 'source' | 'ingestion' | 'transformation' | 'enrichment' | 'destination';\n  source?: PipelineSource;\n  x: number;\n  y: number;\n  status: PipelineStatus;\n  recordsPerSecond: number;\n  avgProcessingTime: number;\n  connections: string[];\n  description: string;\n  lastUpdate: string;\n  dataQuality: number;\n  actualPipeline?: any; // Reference to actual pipeline for dependencies\n  destinationTypes?: string[]; // For destination routing logic\n  priority?: number; // For destination priority\n  // Enhanced error tracking\n  hasErrors?: boolean;\n  errorCount?: number;\n  pipelineData?: any; // Full pipeline data for error modal\n  // Microsoft Technology Stack Details\n  technology: string; // Specific Microsoft service (Azure Data Factory, Event Hubs, etc.)\n  resourceGroup: string;\n  subscriptionId: string;\n  region: string;\n  computeType?: string; // For processing nodes\n  storageType?: string; // For destination nodes\n  throughputUnits?: number; // For Event Hubs\n  partitionCount?: number;\n  retentionDays?: number;\n  protocols?: string[]; // HTTPS, AMQP, Kafka, etc.\n  authentication?: string; // Managed Identity, Service Principal, etc.\n  monitoring?: {\n    applicationInsights?: string;\n    logAnalyticsWorkspace?: string;\n    kustoCluster?: string;\n    alertRules?: string[];\n  };\n  dependencies?: {\n    keyVault?: string;\n    serviceAccounts?: string[];\n    externalApis?: string[];\n    networkConnections?: string[];\n  };\n  // Enhanced operational information for MSTIC engineers\n  processingMode?: 'batch' | 'streaming' | 'micro-batch' | 'hybrid';\n  dataMovementTool?: string;\n  batchFrequency?: string;\n  streamingLatency?: string;\n  dataFormat?: string[];\n  compressionType?: string;\n  slaMetrics?: {\n    uptime: number; // percentage\n    targetUptime: number; // percentage\n    mttr: number; // minutes\n    mtbf: number; // hours\n  };\n  operationalInfo?: {\n    owner: string; // Team responsible\n    escalationPath: string[]; // Contact hierarchy\n    maintenanceWindow: string; // When updates occur\n    criticalityLevel: 'low' | 'medium' | 'high' | 'critical';\n    dataClassification: 'public' | 'internal' | 'confidential' | 'restricted';\n    complianceRequirements: string[]; // GDPR, SOX, etc.\n  };\n  performanceMetrics?: {\n    avgLatency: number; // ms\n    p95Latency: number; // ms\n    errorRate: number; // percentage\n    throughputMbps: number;\n    cpuUtilization: number; // percentage\n    memoryUtilization: number; // percentage\n  };\n  troubleshooting?: {\n    commonIssues: string[];\n    runbookUrls: string[];\n    logQuerySamples: string[];\n    healthCheckEndpoints: string[];\n  };\n  // Interview scenario details (for demo purposes)\n  scenarioDetails?: {\n    problem: string;\n    solution: string;\n    sourceFormat: string;\n    targetSystem: string;\n    volumePerHour: string;\n    fieldFilter: string;\n    triggerCondition: string;\n  };\n  stagingDetails?: {\n    tableName: string;\n    partitionStrategy: string;\n    retentionPolicy: string;\n    compressionRatio: string;\n    indexStrategy: string;\n  };\n}\n\ninterface DataConnection {\n  id: string;\n  from: string;\n  to: string;\n  volume: 'low' | 'medium' | 'high';\n  health: 'healthy' | 'warning' | 'error';\n  animated: boolean;\n}const DataLineage = memo(() => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedSource, setSelectedSource] = useState<PipelineSource | 'all'>('all');\n  const [selectedNode, setSelectedNode] = useState<LineageNode | null>(null);\n  const [hoveredNode, setHoveredNode] = useState<string | null>(null);\n  const [highlightedPath, setHighlightedPath] = useState<string[]>([]);\n  const [showErrorModal, setShowErrorModal] = useState(false);\n  const [showHowItWorks, setShowHowItWorks] = useState(false);\n  // New popup states\n  const [showNodePopup, setShowNodePopup] = useState(false);\n  const [popupPosition, setPopupPosition] = useState({ x: 0, y: 0 });\n  const [popupExpanded, setPopupExpanded] = useState(false);\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  // Create a stable random number generator for consistent data\n  const seededRandom = (seed: string) => {\n    let hash = 0;\n    for (let i = 0; i < seed.length; i++) {\n      const char = seed.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    // Convert to 0-1 range\n    return Math.abs(hash) / 2147483647;\n  };\n\n  // Generate comprehensive lineage data with stable randomization\n  const generateLineageData = () => {\n    const nodes: LineageNode[] = [];\n    const connections: DataConnection[] = [];\n    \n    // Data sources (left side)\n    const sources: PipelineSource[] = ['LinkedIn', 'Twitter', 'Office365', 'AzureAD', 'GitHub', 'ThreatIntel', 'Exchange', 'Teams', 'SharePoint', 'PowerBI'];\n    sources.forEach((source, index) => {\n      const statusSeed = seededRandom(`${source}-status`);\n      const statusOptions: PipelineStatus[] = ['healthy', 'warning', 'failed'];\n      const status = statusOptions[Math.floor(statusSeed * statusOptions.length)];\n      \n      // Find a pipeline from this source to use for error data\n      const sourcePipelines = mockPipelines.filter(p => p.source === source);\n      const sourcePipeline = sourcePipelines.length > 0 ? sourcePipelines[0] : null;\n      \n      nodes.push({\n        id: `source-${source}`,\n        name: source,\n        type: 'source',\n        source,\n        x: 50,\n        y: 80 + index * 70,\n        status,\n        recordsPerSecond: Math.floor(seededRandom(`${source}-records`) * 1000) + 100,\n        avgProcessingTime: Math.floor(seededRandom(`${source}-time`) * 500) + 50,\n        connections: [],\n        description: `Data ingestion from ${source} platform`,\n        lastUpdate: new Date(Date.now() - seededRandom(`${source}-update`) * 3600000).toISOString(),\n        dataQuality: Math.floor(seededRandom(`${source}-quality`) * 20) + 80,\n        pipelineData: sourcePipeline, // Add pipeline data for error modal\n        hasErrors: status === 'failed' || status === 'warning',\n        errorCount: sourcePipeline?.errorHistory?.length || (status === 'failed' ? 3 : status === 'warning' ? 1 : 0),\n        // Microsoft Technology Stack Details\n        technology: source === 'Office365' || source === 'Exchange' || source === 'Teams' || source === 'SharePoint' ? 'Microsoft Graph API' :\n                   source === 'AzureAD' ? 'Azure Active Directory Logs' :\n                   source === 'LinkedIn' || source === 'Twitter' ? 'Azure Event Hubs' :\n                   source === 'GitHub' ? 'GitHub REST API → Azure Logic Apps' :\n                   source === 'ThreatIntel' ? 'Microsoft Defender for Threat Intelligence API' :\n                   'Azure Event Hubs',\n        resourceGroup: 'rg-mstic-prod-eastus2',\n        subscriptionId: 'mstic-prod-subscription',\n        region: 'East US 2',\n        throughputUnits: ['LinkedIn', 'Twitter'].includes(source) ? 20 : 10,\n        partitionCount: ['LinkedIn', 'Twitter'].includes(source) ? 32 : 16,\n        retentionDays: 7,\n        protocols: source === 'Office365' || source === 'AzureAD' ? ['HTTPS', 'OAuth 2.0'] :\n                  source === 'GitHub' ? ['HTTPS', 'Webhook'] :\n                  ['HTTPS', 'AMQP 1.0', 'Kafka'],\n        authentication: source === 'Office365' || source === 'AzureAD' ? 'Managed Identity + Application Registration' :\n                       source === 'GitHub' ? 'GitHub App + Personal Access Token' :\n                       'Managed Identity + Shared Access Key',\n        monitoring: {\n          applicationInsights: 'ai-mstic-ingestion-prod',\n          logAnalyticsWorkspace: 'law-mstic-prod-eastus2',\n          kustoCluster: 'msticdata.eastus2.kusto.windows.net',\n          alertRules: [`${source}_ingestion_failure`, `${source}_throughput_low`, `${source}_latency_high`]\n        },\n        dependencies: {\n          keyVault: 'kv-mstic-secrets-prod',\n          serviceAccounts: [`sa-${source.toLowerCase()}-ingestion`],\n          externalApis: source === 'Office365' ? ['graph.microsoft.com'] :\n                       source === 'GitHub' ? ['api.github.com'] :\n                       source === 'LinkedIn' ? ['api.linkedin.com'] :\n                       source === 'Twitter' ? ['api.twitter.com'] :\n                       [],\n          networkConnections: ['Virtual Network Gateway', 'Private Endpoints', 'Service Endpoints']\n        },\n        // Enhanced operational information for MSTIC engineers\n        slaMetrics: {\n          uptime: Math.max(95, 100 - seededRandom(`${source}-uptime`) * 5),\n          targetUptime: 99.9,\n          mttr: Math.floor(seededRandom(`${source}-mttr`) * 30) + 5, // 5-35 minutes\n          mtbf: Math.floor(seededRandom(`${source}-mtbf`) * 168) + 24 // 24-192 hours\n        },\n        operationalInfo: {\n          owner: source === 'Office365' || source === 'AzureAD' ? 'MSTIC Identity Team' :\n                 source === 'GitHub' || source === 'LinkedIn' ? 'MSTIC External Feeds Team' :\n                 'MSTIC Data Ingestion Team',\n          escalationPath: ['On-call Engineer', 'Team Lead', 'Principal Engineer', 'Engineering Manager'],\n          maintenanceWindow: 'Sundays 02:00-04:00 UTC',\n          criticalityLevel: ['Office365', 'AzureAD', 'ThreatIntel'].includes(source) ? 'critical' :\n                           ['LinkedIn', 'Twitter'].includes(source) ? 'high' : 'medium',\n          dataClassification: ['Office365', 'AzureAD'].includes(source) ? 'confidential' : 'internal',\n          complianceRequirements: ['Office365', 'AzureAD'].includes(source) ? \n            ['GDPR', 'SOX', 'ISO 27001', 'FedRAMP'] : \n            ['GDPR', 'ISO 27001']\n        },\n        performanceMetrics: {\n          avgLatency: Math.floor(seededRandom(`${source}-latency`) * 200) + 50,\n          p95Latency: Math.floor(seededRandom(`${source}-p95`) * 500) + 100,\n          errorRate: Math.round(seededRandom(`${source}-errors`) * 2 * 100) / 100, // 0-2%\n          throughputMbps: Math.floor(seededRandom(`${source}-throughput`) * 100) + 10,\n          cpuUtilization: Math.floor(seededRandom(`${source}-cpu`) * 30) + 20, // 20-50%\n          memoryUtilization: Math.floor(seededRandom(`${source}-memory`) * 40) + 30 // 30-70%\n        },\n        troubleshooting: {\n          commonIssues: [\n            `${source} API rate limiting`,\n            'Authentication token expiration',\n            'Network connectivity issues',\n            'Data format validation errors'\n          ],\n          runbookUrls: [\n            `https://mstic.wiki/runbooks/${source.toLowerCase()}-ingestion`,\n            `https://mstic.wiki/troubleshooting/${source.toLowerCase()}-common-issues`\n          ],\n          logQuerySamples: [\n            `${source}Ingestion_CL | where TimeGenerated > ago(1h) | where Level == \"Error\"`,\n            `${source}Metrics_CL | summarize avg(RecordsPerSecond) by bin(TimeGenerated, 5m)`\n          ],\n          healthCheckEndpoints: [\n            `https://mstic-monitoring.azurewebsites.net/health/${source.toLowerCase()}`,\n            `https://mstic-api.azurewebsites.net/status/${source.toLowerCase()}`\n          ]\n        },\n        // Processing and Data Movement Details for Sources\n        processingMode: ['LinkedIn', 'Twitter', 'ThreatIntel'].includes(source) ? 'streaming' as 'streaming' : 'batch' as 'batch',\n        dataMovementTool: source === 'Office365' || source === 'Exchange' || source === 'Teams' || source === 'SharePoint' ? 'Microsoft Graph API + Azure Logic Apps' :\n                         source === 'AzureAD' ? 'Azure AD Logs API + Event Grid' :\n                         source === 'LinkedIn' || source === 'Twitter' ? 'REST API + Azure Event Hubs' :\n                         source === 'GitHub' ? 'GitHub Webhooks + Azure Logic Apps' :\n                         'REST API + Azure Functions',\n        batchFrequency: ['Office365', 'AzureAD', 'Exchange', 'Teams', 'SharePoint'].includes(source) ? \n                       'Every 15 minutes' : 'N/A (Streaming)',\n        streamingLatency: ['LinkedIn', 'Twitter', 'ThreatIntel'].includes(source) ? \n                         '< 10 seconds' : 'N/A (Batch)',\n        dataFormat: source === 'Office365' || source === 'Exchange' || source === 'Teams' ? ['JSON', 'XML'] :\n                   source === 'AzureAD' ? ['JSON', 'CSV'] :\n                   ['JSON', 'Avro'],\n        compressionType: ['LinkedIn', 'Twitter'].includes(source) ? 'LZ4' : 'GZIP'\n      });\n    });\n\n    // Processing pipelines (middle section)\n    const pipelineTypes = [\n      { type: 'ingestion', x: 350 },\n      { type: 'transformation', x: 650 },\n      { type: 'enrichment', x: 950 }\n    ];\n\n    pipelineTypes.forEach(({ type, x }) => {\n      // Ensure we have pipelines from all sources by selecting pipelines more evenly\n      const sourceGroups: { [key: string]: any[] } = {};\n      mockPipelines.forEach(pipeline => {\n        if (!sourceGroups[pipeline.source]) {\n          sourceGroups[pipeline.source] = [];\n        }\n        sourceGroups[pipeline.source].push(pipeline);\n      });\n      \n      // Select 1 pipeline from each source (up to 10 sources)\n      const selectedPipelines: any[] = [];\n      sources.forEach(source => {\n        const sourcePipelines = sourceGroups[source] || [];\n        if (sourcePipelines.length > 0) {\n          // Use seeded random to get consistent selection for each type\n          const index = Math.floor(seededRandom(`${type}-${source}`) * sourcePipelines.length);\n          selectedPipelines.push(sourcePipelines[index]);\n        }\n      });\n      \n      const typeNodes = selectedPipelines.map((pipeline, index) => ({\n        id: `${type}-${pipeline.id}`, // Make ID unique per type\n        name: `${type.charAt(0).toUpperCase() + type.slice(1)} - ${pipeline.name.split(' ').slice(0, 3).join(' ')}`,\n        type: type as 'ingestion' | 'transformation' | 'enrichment',\n        source: pipeline.source,\n        x,\n        y: 80 + index * 70,\n        status: pipeline.status,\n        recordsPerSecond: Math.floor(pipeline.recordsProcessed / 60),\n        avgProcessingTime: pipeline.avgProcessingTime,\n        connections: [],\n        description: `${type} pipeline: ${pipeline.name}`,\n        lastUpdate: pipeline.lastRun.toISOString(),\n        dataQuality: Math.floor(seededRandom(`${pipeline.id}-quality`) * 15) + 85,\n        actualPipeline: pipeline, // Store reference to actual pipeline for dependencies\n        pipelineData: pipeline, // Full pipeline data for error modal\n        hasErrors: pipeline.status === 'failed' || pipeline.status === 'warning',\n        errorCount: pipeline.errorHistory?.length || 0,\n        // Microsoft Technology Stack Details for Processing Pipelines - Diversified for Realism\n        technology: type === 'ingestion' ? \n                   (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? 'Azure Event Hubs + Stream Analytics' :\n                    pipeline.source === 'Office365' || pipeline.source === 'AzureAD' ? 'Azure Data Factory (Copy Activity)' :\n                    pipeline.source === 'GitHub' ? 'Azure Logic Apps + Azure Functions' :\n                    'Azure Data Factory + Event Grid') :\n                   type === 'transformation' ? \n                   (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? 'Azure Stream Analytics + Databricks Streaming' :\n                    pipeline.source === 'Office365' || pipeline.source === 'Exchange' ? 'Azure Synapse Analytics (SQL Pool)' :\n                    pipeline.source === 'ThreatIntel' ? 'Azure Functions + Cosmos DB Change Feed' :\n                    'Azure Data Factory (Mapping Data Flows)') :\n                   (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? 'Azure Functions (Real-time) + SignalR' :\n                    pipeline.source === 'Office365' || pipeline.source === 'AzureAD' ? 'Azure Cognitive Services + ML Studio' :\n                    'Azure Databricks (ML Runtime) + MLflow'),\n        resourceGroup: `rg-mstic-${type}-prod-eastus2`,\n        subscriptionId: 'mstic-prod-subscription',\n        region: 'East US 2',\n        computeType: type === 'ingestion' ? \n                    (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? 'Event Hubs (20 TUs) + Auto-scale Runtime' :\n                     pipeline.source === 'Office365' || pipeline.source === 'AzureAD' ? 'Integration Runtime (Self-hosted)' :\n                     'Azure-SSIS Integration Runtime') :\n                    type === 'transformation' ? \n                    (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? 'Stream Analytics (120 SUs) + Databricks (8-node cluster)' :\n                     pipeline.source === 'Office365' || pipeline.source === 'Exchange' ? 'Synapse SQL Pool (DW500c)' :\n                     'Data Factory Mapping Data Flow (16-core)') :\n                    (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? 'Consumption Plan Functions + SignalR (Standard)' :\n                     'Databricks ML Runtime (Standard_DS4_v2)'),\n        partitionCount: type === 'transformation' ? 64 : 32,\n        retentionDays: 30,\n        protocols: type === 'ingestion' ? ['HTTPS', 'ODBC', 'JDBC'] :\n                  type === 'transformation' ? ['Spark SQL', 'Delta Lake'] :\n                  ['Python', 'Scala', 'Delta Lake', 'MLflow'],\n        authentication: 'Managed Identity + Azure Key Vault',\n        monitoring: {\n          applicationInsights: `ai-mstic-${type}-prod`,\n          logAnalyticsWorkspace: 'law-mstic-prod-eastus2',\n          kustoCluster: 'msticdata.eastus2.kusto.windows.net',\n          alertRules: [`${type}_pipeline_failure`, `${type}_processing_delay`, `${type}_resource_exhaustion`]\n        },\n        dependencies: {\n          keyVault: 'kv-mstic-secrets-prod',\n          serviceAccounts: [`sa-${type}-${pipeline.source.toLowerCase()}`],\n          externalApis: type === 'enrichment' ? ['threatintelligence.microsoft.com', 'virusshare.com'] : [],\n          networkConnections: ['Azure Virtual Network', 'Private Link', 'Managed Virtual Network']\n        },\n        // Enhanced operational information for processing pipelines\n        processingMode: (type === 'ingestion' ? \n                       (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? 'streaming' :\n                        pipeline.source === 'Office365' || pipeline.source === 'AzureAD' ? 'batch' :\n                        'hybrid') :\n                       type === 'transformation' ? \n                       (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? 'micro-batch' :\n                        pipeline.source === 'Office365' || pipeline.source === 'Exchange' ? 'batch' :\n                        'hybrid') :\n                       'streaming') as 'batch' | 'streaming' | 'micro-batch' | 'hybrid',\n        dataMovementTool: type === 'ingestion' ? \n                         (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? 'Azure Event Hubs + Stream Analytics' :\n                          pipeline.source === 'Office365' || pipeline.source === 'AzureAD' ? 'Azure Data Factory Copy Activity' :\n                          'Azure Logic Apps + HTTP Connector') :\n                         type === 'transformation' ? \n                         (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? 'Databricks Auto Loader + Delta Live Tables' :\n                          pipeline.source === 'Office365' || pipeline.source === 'Exchange' ? 'Synapse Pipelines + PolyBase' :\n                          'Azure Data Factory Mapping Data Flows') :\n                         'Azure Functions + Service Bus',\n        batchFrequency: type === 'ingestion' && ['Office365', 'AzureAD', 'Exchange', 'Teams'].includes(pipeline.source) ? \n                       'Every 15 minutes' :\n                       type === 'transformation' && ['Office365', 'Exchange', 'SharePoint'].includes(pipeline.source) ?\n                       'Hourly (00:15, 01:15, etc.)' :\n                       'N/A (Streaming)',\n        streamingLatency: ['LinkedIn', 'Twitter', 'ThreatIntel'].includes(pipeline.source) ? \n                         (type === 'ingestion' ? '< 30 seconds' :\n                          type === 'transformation' ? '< 2 minutes' :\n                          '< 5 seconds') :\n                         'N/A (Batch)',\n        dataFormat: type === 'ingestion' ? \n                   (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? ['JSON', 'Avro'] :\n                    pipeline.source === 'Office365' || pipeline.source === 'AzureAD' ? ['JSON', 'CSV'] :\n                    ['JSON', 'XML']) :\n                   type === 'transformation' ? \n                   (pipeline.source === 'LinkedIn' || pipeline.source === 'Twitter' ? ['Parquet', 'Delta'] :\n                    ['Parquet', 'ORC', 'Delta']) :\n                   ['JSON', 'Parquet'],\n        compressionType: type === 'ingestion' ? 'Snappy' :\n                        type === 'transformation' ? 'GZIP' :\n                        'LZ4',\n        slaMetrics: {\n          uptime: Math.max(95, 100 - seededRandom(`${pipeline.id}-uptime`) * 5),\n          targetUptime: type === 'ingestion' ? 99.95 : 99.9,\n          mttr: Math.floor(seededRandom(`${pipeline.id}-mttr`) * 20) + 10,\n          mtbf: Math.floor(seededRandom(`${pipeline.id}-mtbf`) * 120) + 48\n        },\n        operationalInfo: {\n          owner: type === 'ingestion' ? 'MSTIC Data Ingestion Team' :\n                 type === 'transformation' ? 'MSTIC Data Platform Team' :\n                 'MSTIC ML Engineering Team',\n          escalationPath: ['On-call Engineer', 'Senior Engineer', 'Team Lead', 'Principal Engineer'],\n          maintenanceWindow: type === 'transformation' ? 'Saturdays 01:00-03:00 UTC' : 'Sundays 03:00-05:00 UTC',\n          criticalityLevel: (type === 'ingestion' ? 'high' : type === 'transformation' ? 'critical' : 'medium') as 'low' | 'medium' | 'high' | 'critical',\n          dataClassification: 'internal' as 'public' | 'internal' | 'confidential' | 'restricted',\n          complianceRequirements: ['GDPR', 'ISO 27001', 'SOC 2']\n        },\n        performanceMetrics: {\n          avgLatency: type === 'ingestion' ? Math.floor(seededRandom(`${pipeline.id}-lat1`) * 100) + 20 :\n                     type === 'transformation' ? Math.floor(seededRandom(`${pipeline.id}-lat2`) * 300) + 100 :\n                     Math.floor(seededRandom(`${pipeline.id}-lat3`) * 500) + 200,\n          p95Latency: type === 'ingestion' ? Math.floor(seededRandom(`${pipeline.id}-p95-1`) * 200) + 50 :\n                     type === 'transformation' ? Math.floor(seededRandom(`${pipeline.id}-p95-2`) * 600) + 200 :\n                     Math.floor(seededRandom(`${pipeline.id}-p95-3`) * 1000) + 500,\n          errorRate: Math.round(seededRandom(`${pipeline.id}-errors`) * 1.5 * 100) / 100,\n          throughputMbps: Math.floor(seededRandom(`${pipeline.id}-throughput`) * 200) + 50,\n          cpuUtilization: Math.floor(seededRandom(`${pipeline.id}-cpu`) * 40) + 30,\n          memoryUtilization: Math.floor(seededRandom(`${pipeline.id}-memory`) * 50) + 25\n        },\n        troubleshooting: {\n          commonIssues: [\n            `${type} pipeline timeout issues`,\n            'Resource scaling limitations',\n            'Data schema validation errors',\n            'Memory pressure during peak loads'\n          ],\n          runbookUrls: [\n            `https://mstic.wiki/runbooks/${type}-pipeline-troubleshooting`,\n            `https://mstic.wiki/scaling/${type}-performance-tuning`\n          ],\n          logQuerySamples: [\n            `${type.charAt(0).toUpperCase() + type.slice(1)}Pipeline_CL | where TimeGenerated > ago(1h) | where Level == \"Error\"`,\n            `${type.charAt(0).toUpperCase() + type.slice(1)}Metrics_CL | summarize avg(ProcessingTimeMs) by bin(TimeGenerated, 5m)`\n          ],\n          healthCheckEndpoints: [\n            `https://mstic-monitoring.azurewebsites.net/health/${type}`,\n            `https://mstic-${type}.azurewebsites.net/status`\n          ]\n        }\n      }));\n        \n      nodes.push(...typeNodes);\n    });\n\n    // Destinations (right side) - organized by purpose for realistic MSTIC routing\n    const destinations = [\n      { name: 'MSTIC Data Lake', types: ['storage', 'archive'], priority: 1 },\n      { name: 'Threat Intelligence DB', types: ['threat', 'intel'], priority: 1 },\n      { name: 'Security Analytics Store', types: ['analytics', 'ml'], priority: 2 },\n      { name: 'Alert System', types: ['realtime', 'alerts'], priority: 1 },\n      { name: 'ML Training Data', types: ['ml', 'training'], priority: 3 },\n      { name: 'Compliance Archive', types: ['compliance', 'audit'], priority: 2 },\n      { name: 'Real-time Dashboard', types: ['realtime', 'dashboard'], priority: 1 },\n      { name: 'API Gateway', types: ['api', 'external'], priority: 2 },\n      { name: 'Kusto Analytics Engine', types: ['kusto', 'analytics'], priority: 1 }\n    ];\n\n    // Special Parquet-to-Kusto Staging Pipeline (Interview Scenario #1)\n    // This demonstrates the technical solution discussed in the interview:\n    // How to manage specific JSON field extraction from Parquet files with thousands of files per hour\n    const parquetToKustoStaging: LineageNode = {\n      id: 'parquet-staging-pipeline',\n      name: 'Parquet Field Extraction Staging',\n            type: 'transformation',\n      x: 500,\n      y: 780, // Position below main pipeline flow (after 10 sources + spacing)\n      status: 'healthy',\n      recordsPerSecond: 2340,\n      avgProcessingTime: 450,\n      connections: [],\n      description: 'Staging table for selective JSON field extraction from high-volume Parquet ingestion',\n      lastUpdate: new Date().toISOString(),\n      dataQuality: 98,\n      technology: 'Azure Data Factory + Delta Lake + Kusto',\n      resourceGroup: 'rg-mstic-staging-prod-eastus2',\n      subscriptionId: 'mstic-prod-subscription',\n      region: 'East US 2',\n      computeType: 'Azure Data Factory Integration Runtime',\n      partitionCount: 64,\n      retentionDays: 7,\n      protocols: ['HTTPS', 'Delta Lake', 'KQL'],\n      authentication: 'Managed Identity + Service Principal',\n      monitoring: {\n        applicationInsights: 'ai-mstic-staging-prod',\n        logAnalyticsWorkspace: 'law-mstic-prod-eastus2',\n        kustoCluster: 'msticdata.eastus2.kusto.windows.net',\n        alertRules: ['parquet_staging_failure', 'parquet_field_extraction_delay', 'staging_table_capacity']\n      },\n      dependencies: {\n        keyVault: 'kv-mstic-secrets-prod',\n        serviceAccounts: ['sa-parquet-staging'],\n        externalApis: [],\n        networkConnections: ['Private Link to Kusto', 'ADLS Private Endpoint']\n      },\n      // Processing and Data Movement Details for Interview Scenario\n      processingMode: 'batch' as 'batch',\n      dataMovementTool: 'Azure Data Factory + Delta Lake Engine',\n      batchFrequency: 'Triggered by file arrival (Event Grid)',\n      streamingLatency: 'N/A (Batch Processing)',\n      dataFormat: ['Parquet', 'JSON', 'Delta'],\n      compressionType: 'Snappy (Parquet native)',\n      slaMetrics: {\n        uptime: 99.8,\n        targetUptime: 99.9,\n        mttr: 12,\n        mtbf: 168\n      },\n      operationalInfo: {\n        owner: 'MSTIC Data Platform Team',\n        escalationPath: ['On-call Engineer', 'Senior Data Engineer', 'Principal Engineer'],\n        maintenanceWindow: 'Saturdays 02:00-04:00 UTC',\n        criticalityLevel: 'high',\n        dataClassification: 'internal',\n        complianceRequirements: ['GDPR', 'ISO 27001']\n      },\n      performanceMetrics: {\n        avgLatency: 450,\n        p95Latency: 850,\n        errorRate: 0.8,\n        throughputMbps: 320,\n        cpuUtilization: 45,\n        memoryUtilization: 60\n      },\n      troubleshooting: {\n        commonIssues: [\n          'JSON field extraction timeout',\n          'Parquet schema evolution issues',\n          'Kusto ingestion capacity limits',\n          'Delta Lake table optimization needed'\n        ],\n        runbookUrls: [\n          'https://mstic.wiki/runbooks/parquet-staging-troubleshooting',\n          'https://mstic.wiki/kusto/field-extraction-optimization'\n        ],\n        logQuerySamples: [\n          'ParquetStagingPipeline_CL | where TimeGenerated > ago(1h) | where Level == \"Error\"',\n          'ParquetFieldExtraction_CL | summarize avg(ProcessingTimeMs) by bin(TimeGenerated, 5m)'\n        ],\n        healthCheckEndpoints: [\n          'https://mstic-monitoring.azurewebsites.net/health/parquet-staging',\n          'https://mstic-staging.azurewebsites.net/status/field-extraction'\n        ]\n      },\n      // Interview scenario details (custom properties for demo)\n      scenarioDetails: {\n        problem: 'Extract specific JSON fields from thousands of Parquet files per hour',\n        solution: 'Staging table with conditional ingestion trigger',\n        sourceFormat: 'Parquet files (Azure Data Lake)',\n        targetSystem: 'Azure Data Explorer (Kusto)',\n        volumePerHour: '~3,000 files',\n        fieldFilter: 'user_activity.threat_indicators',\n        triggerCondition: 'IF field_exists AND field_not_null'\n      },\n      stagingDetails: {\n        tableName: 'threat_indicators_staging',\n        partitionStrategy: 'BY (date_hour, source_system)',\n        retentionPolicy: '7 days (staging only)',\n        compressionRatio: '85%',\n        indexStrategy: 'Clustered on timestamp, source_ip'\n      }\n    };\n\n    destinations.forEach((dest, index) => {\n      const statusSeed = seededRandom(`${dest.name}-status`);\n      const statusOptions: PipelineStatus[] = ['healthy', 'warning'];\n      const status = statusOptions[Math.floor(statusSeed * statusOptions.length)];\n      \n      nodes.push({\n        id: `dest-${dest.name}`,\n        name: dest.name,\n        type: 'destination',\n        x: 1250,\n        y: 80 + index * 70,\n        status,\n        recordsPerSecond: Math.floor(seededRandom(`${dest.name}-records`) * 500) + 50,\n        avgProcessingTime: Math.floor(seededRandom(`${dest.name}-time`) * 100) + 20,\n        connections: [],\n        description: `Data destination: ${dest.name}`,\n        lastUpdate: new Date(Date.now() - seededRandom(`${dest.name}-update`) * 1800000).toISOString(),\n        dataQuality: Math.floor(seededRandom(`${dest.name}-quality`) * 10) + 90,\n        destinationTypes: dest.types,\n        priority: dest.priority,\n        // Microsoft Technology Stack Details for Destinations\n        technology: dest.name.includes('Data Lake') ? 'Azure Data Lake Storage Gen2 (ADLS)' :\n                   dest.name.includes('DB') || dest.name.includes('Database') ? 'Azure SQL Database (Premium)' :\n                   dest.name.includes('Analytics') ? 'Azure Synapse Analytics (SQL Pool)' :\n                   dest.name.includes('Alert') ? 'Azure Logic Apps + Service Bus' :\n                   dest.name.includes('ML') ? 'Azure Machine Learning Studio' :\n                   dest.name.includes('Compliance') ? 'Azure Purview + Archive Storage' :\n                   dest.name.includes('Dashboard') ? 'Power BI Premium + Azure SignalR' :\n                   'Azure API Management + Application Gateway',\n        resourceGroup: `rg-mstic-storage-prod-eastus2`,\n        subscriptionId: 'mstic-prod-subscription',\n        region: 'East US 2',\n        storageType: dest.name.includes('Data Lake') ? 'Hot (Standard LRS) + Cool Archive' :\n                    dest.name.includes('Analytics') ? 'Premium SSD + Columnstore Index' :\n                    dest.name.includes('ML') ? 'Standard SSD + Blob Storage' :\n                    dest.name.includes('Compliance') ? 'Archive Storage (GRS)' :\n                    'Standard Storage (ZRS)',\n        partitionCount: dest.name.includes('Data Lake') ? 128 :\n                       dest.name.includes('Analytics') ? 256 :\n                       dest.name.includes('Alert') ? 64 : 32,\n        retentionDays: dest.name.includes('Compliance') ? 2555 : // 7 years\n                      dest.name.includes('Archive') ? 365 :\n                      dest.name.includes('ML') ? 180 :\n                      90,\n        protocols: dest.name.includes('Data Lake') ? ['HTTPS', 'REST API', 'ABFS'] :\n                  dest.name.includes('DB') ? ['TDS', 'HTTPS', 'ODBC'] :\n                  dest.name.includes('Alert') ? ['HTTPS', 'AMQP', 'Service Bus'] :\n                  dest.name.includes('API') ? ['HTTPS', 'OAuth 2.0', 'OpenAPI'] :\n                  ['HTTPS', 'WebSocket', 'REST API'],\n        authentication: dest.name.includes('Data Lake') ? 'Managed Identity + ACLs + RBAC' :\n                       dest.name.includes('DB') ? 'Managed Identity + SQL Authentication' :\n                       dest.name.includes('ML') ? 'Service Principal + Workspace MSI' :\n                       'Managed Identity + Key Vault',\n        monitoring: {\n          applicationInsights: `ai-mstic-destinations-prod`,\n          logAnalyticsWorkspace: 'law-mstic-prod-eastus2',\n          kustoCluster: 'msticdata.eastus2.kusto.windows.net',\n          alertRules: [`${dest.name.replace(/\\s+/g, '_').toLowerCase()}_capacity`, \n                      `${dest.name.replace(/\\s+/g, '_').toLowerCase()}_latency`,\n                      `${dest.name.replace(/\\s+/g, '_').toLowerCase()}_availability`]\n        },\n        dependencies: {\n          keyVault: 'kv-mstic-secrets-prod',\n          serviceAccounts: [`sa-${dest.name.replace(/\\s+/g, '-').toLowerCase()}`],\n          externalApis: dest.name.includes('API') ? ['partner-apis.microsoft.com'] : [],\n          networkConnections: ['Private Endpoints', 'VNet Integration', 'Service Endpoints']\n        },\n        // Enhanced operational information for destination nodes\n        slaMetrics: {\n          uptime: Math.max(98, 100 - seededRandom(`${dest.name}-uptime`) * 2),\n          targetUptime: dest.name.includes('Data Lake') || dest.name.includes('Alert') ? 99.99 : 99.9,\n          mttr: Math.floor(seededRandom(`${dest.name}-mttr`) * 15) + 5,\n          mtbf: Math.floor(seededRandom(`${dest.name}-mtbf`) * 200) + 100\n        },\n        operationalInfo: {\n          owner: dest.name.includes('Data Lake') || dest.name.includes('Analytics') ? 'MSTIC Data Platform Team' :\n                 dest.name.includes('Alert') || dest.name.includes('Dashboard') ? 'MSTIC Operations Team' :\n                 dest.name.includes('ML') ? 'MSTIC ML Engineering Team' :\n                 dest.name.includes('Compliance') ? 'MSTIC Compliance Team' :\n                 'MSTIC Infrastructure Team',\n          escalationPath: ['On-call Engineer', 'Senior Engineer', 'Team Lead', 'Engineering Manager'],\n          maintenanceWindow: dest.name.includes('Alert') ? 'None (24/7 Operations)' : 'Sundays 01:00-03:00 UTC',\n          criticalityLevel: (dest.name.includes('Alert') || dest.name.includes('Data Lake') ? 'critical' :\n                           dest.name.includes('Dashboard') || dest.name.includes('Analytics') ? 'high' :\n                           'medium') as 'low' | 'medium' | 'high' | 'critical',\n          dataClassification: (dest.name.includes('Compliance') ? 'confidential' : 'internal') as 'public' | 'internal' | 'confidential' | 'restricted',\n          complianceRequirements: dest.name.includes('Compliance') ? \n            ['GDPR', 'SOX', 'ISO 27001', 'FedRAMP', 'HIPAA'] : \n            ['GDPR', 'ISO 27001', 'SOC 2']\n        },\n        performanceMetrics: {\n          avgLatency: dest.name.includes('Data Lake') ? Math.floor(seededRandom(`${dest.name}-lat1`) * 50) + 10 :\n                     dest.name.includes('Alert') ? Math.floor(seededRandom(`${dest.name}-lat2`) * 100) + 50 :\n                     dest.name.includes('Analytics') ? Math.floor(seededRandom(`${dest.name}-lat3`) * 200) + 100 :\n                     Math.floor(seededRandom(`${dest.name}-lat4`) * 150) + 75,\n          p95Latency: dest.name.includes('Data Lake') ? Math.floor(seededRandom(`${dest.name}-p95-1`) * 100) + 25 :\n                     dest.name.includes('Alert') ? Math.floor(seededRandom(`${dest.name}-p95-2`) * 200) + 100 :\n                     dest.name.includes('Analytics') ? Math.floor(seededRandom(`${dest.name}-p95-3`) * 500) + 250 :\n                     Math.floor(seededRandom(`${dest.name}-p95-4`) * 300) + 150,\n          errorRate: Math.round(seededRandom(`${dest.name}-errors`) * 1 * 100) / 100, // Lower error rates for destinations\n          throughputMbps: dest.name.includes('Data Lake') ? Math.floor(seededRandom(`${dest.name}-through1`) * 500) + 100 :\n                         dest.name.includes('Analytics') ? Math.floor(seededRandom(`${dest.name}-through2`) * 300) + 50 :\n                         Math.floor(seededRandom(`${dest.name}-through3`) * 200) + 25,\n          cpuUtilization: Math.floor(seededRandom(`${dest.name}-cpu`) * 25) + 15, // Lower for storage systems\n          memoryUtilization: Math.floor(seededRandom(`${dest.name}-memory`) * 35) + 20\n        },\n        troubleshooting: {\n          commonIssues: [\n            `${dest.name} capacity management`,\n            'Query performance optimization',\n            'Connection pool exhaustion',\n            'Storage tier optimization'\n          ],\n          runbookUrls: [\n            `https://mstic.wiki/runbooks/${dest.name.replace(/\\s+/g, '-').toLowerCase()}-maintenance`,\n            `https://mstic.wiki/troubleshooting/${dest.name.replace(/\\s+/g, '-').toLowerCase()}-performance`\n          ],\n          logQuerySamples: [\n            `${dest.name.replace(/\\s+/g, '')}Logs_CL | where TimeGenerated > ago(1h) | where Level == \"Error\"`,\n            `${dest.name.replace(/\\s+/g, '')}Metrics_CL | summarize avg(ResponseTimeMs) by bin(TimeGenerated, 5m)`\n          ],\n          healthCheckEndpoints: [\n            `https://mstic-monitoring.azurewebsites.net/health/${dest.name.replace(/\\s+/g, '-').toLowerCase()}`,\n            `https://mstic-storage.azurewebsites.net/status/${dest.name.replace(/\\s+/g, '-').toLowerCase()}`\n          ]\n        },\n        // Processing and Data Movement Details for Destinations\n        processingMode: dest.name.includes('Real-time') || dest.name.includes('Alert') ? 'streaming' as 'streaming' : 'batch' as 'batch',\n        dataMovementTool: dest.name.includes('Data Lake') ? 'PolyBase + COPY INTO (T-SQL)' :\n                         dest.name.includes('Analytics') ? 'Azure Synapse Pipelines + SQL Pools' :\n                         dest.name.includes('Alert') ? 'Azure Logic Apps + Service Bus' :\n                         dest.name.includes('ML') ? 'Azure ML Pipelines + AutoML' :\n                         dest.name.includes('API') ? 'Azure API Management + Application Gateway' :\n                         'Azure Data Factory + REST API',\n        batchFrequency: dest.name.includes('Real-time') || dest.name.includes('Alert') ? \n                       'N/A (Streaming)' : \n                       dest.name.includes('Compliance') ? 'Daily at 02:00 UTC' :\n                       'Hourly (00:30, 01:30, etc.)',\n        streamingLatency: dest.name.includes('Real-time') || dest.name.includes('Alert') ? \n                         '< 5 seconds' : 'N/A (Batch)',\n        dataFormat: dest.name.includes('Data Lake') ? ['Parquet', 'Delta', 'JSON'] :\n                   dest.name.includes('Analytics') ? ['Parquet', 'ORC', 'Columnstore'] :\n                   dest.name.includes('ML') ? ['Parquet', 'CSV', 'JSON'] :\n                   ['JSON', 'Avro'],\n        compressionType: dest.name.includes('Data Lake') ? 'Snappy' :\n                        dest.name.includes('Analytics') ? 'GZIP' :\n                        'LZ4'\n      });\n    });\n\n    // Add the Parquet-to-Kusto staging pipeline node\n    nodes.push(parquetToKustoStaging);\n\n    // Add source node for Parquet files (ADLS)\n    nodes.push({\n      id: 'parquet-source-adls',\n      name: 'Azure Data Lake (Parquet)',\n      type: 'source',\n      source: 'AzureAD' as PipelineSource, // Using AzureAD as representative source\n            x: 50,\n      y: 780, // Position below main sources (after 10 sources + spacing)\n      status: 'healthy' as PipelineStatus,\n      recordsPerSecond: 4500,\n      avgProcessingTime: 120,\n      connections: [],\n      description: 'High-volume Parquet file ingestion from ADLS Gen2',\n      lastUpdate: new Date().toISOString(),\n      dataQuality: 96,\n      technology: 'Azure Data Lake Storage Gen2',\n      resourceGroup: 'rg-mstic-datalake-prod-eastus2',\n      subscriptionId: 'mstic-prod-subscription',\n      region: 'East US 2',\n      throughputUnits: 50,\n      partitionCount: 128,\n      retentionDays: 30,\n      protocols: ['HTTPS', 'ABFS', 'REST API'],\n      authentication: 'Managed Identity + ACLs',\n      monitoring: {\n        applicationInsights: 'ai-mstic-datalake-prod',\n        logAnalyticsWorkspace: 'law-mstic-prod-eastus2',\n        kustoCluster: 'msticdata.eastus2.kusto.windows.net',\n        alertRules: ['parquet_ingestion_failure', 'parquet_throughput_low', 'parquet_storage_capacity']\n      },\n      dependencies: {\n        keyVault: 'kv-mstic-secrets-prod',\n        serviceAccounts: ['sa-adls-parquet-reader'],\n        externalApis: [],\n        networkConnections: ['Private Endpoints', 'VNet Integration']\n      },\n      slaMetrics: {\n        uptime: 99.95,\n        targetUptime: 99.99,\n        mttr: 5,\n        mtbf: 720\n      },\n      operationalInfo: {\n        owner: 'MSTIC Data Platform Team',\n        escalationPath: ['On-call Engineer', 'Storage Lead', 'Principal Engineer', 'Engineering Manager'],\n        maintenanceWindow: 'Sundays 01:00-02:00 UTC',\n        criticalityLevel: 'critical',\n        dataClassification: 'internal',\n        complianceRequirements: ['GDPR', 'ISO 27001', 'SOC 2']\n      },\n      performanceMetrics: {\n        avgLatency: 45,\n        p95Latency: 120,\n        errorRate: 0.05,\n        throughputMbps: 850,\n        cpuUtilization: 15,\n        memoryUtilization: 25\n      },\n      troubleshooting: {\n        commonIssues: [\n          'Parquet file format validation errors',\n          'Storage tier access delays',\n          'Network connectivity to ADLS',\n          'Authentication token expiration'\n        ],\n        runbookUrls: [\n          'https://mstic.wiki/runbooks/adls-parquet-troubleshooting',\n          'https://mstic.wiki/storage/adls-performance-optimization'\n        ],\n        logQuerySamples: [\n          'ADLSParquetIngestion_CL | where TimeGenerated > ago(1h) | where Level == \"Error\"',\n          'ADLSMetrics_CL | summarize avg(ThroughputMbps) by bin(TimeGenerated, 5m)'\n        ],\n        healthCheckEndpoints: [\n          'https://mstic-monitoring.azurewebsites.net/health/adls-parquet',\n          'https://mstic-datalake.azurewebsites.net/status/parquet-ingestion'\n        ]\n      },\n      actualPipeline: null,\n      hasErrors: false,\n      errorCount: 0,\n      // Processing and Data Movement Details\n      processingMode: 'batch' as 'batch',\n      dataMovementTool: 'ADLS Gen2 REST API + Azure Storage Explorer',\n      batchFrequency: 'Continuous (new files every 2-3 minutes)',\n      streamingLatency: 'N/A (File-based ingestion)',\n      dataFormat: ['Parquet', 'JSON', 'Avro'],\n      compressionType: 'Snappy (default for Parquet)'\n    });\n\n    // Generate connections with realistic data flow and failure handling\n    nodes.forEach(node => {\n      if (node.type === 'source') {\n        // Sources connect to ingestion pipelines of the same source\n        const ingestionNodes = nodes.filter(n => n.type === 'ingestion' && n.source === node.source);\n        ingestionNodes.forEach(ingestionNode => {\n          const connectionId = `${node.id}-${ingestionNode.id}`;\n          const volumeSeed = seededRandom(`${connectionId}-volume`);\n          const volumeOptions: ('low' | 'medium' | 'high')[] = ['low', 'medium', 'high'];\n          const volume = volumeOptions[Math.floor(volumeSeed * volumeOptions.length)];\n          \n          connections.push({\n            id: connectionId,\n            from: node.id,\n            to: ingestionNode.id,\n            volume,\n            health: node.status === 'failed' ? 'error' : node.status === 'warning' ? 'warning' : 'healthy',\n            animated: node.status !== 'failed' // No animation if source is failed\n          });\n          node.connections.push(ingestionNode.id);\n          ingestionNode.connections.push(node.id);\n        });\n      } else if (node.type === 'ingestion') {\n        // Only connect if the source is not failed\n        const sourceNode = nodes.find(n => n.type === 'source' && n.source === node.source);\n        if (sourceNode?.status !== 'failed') {\n          const transformationNodes = nodes.filter(n => n.type === 'transformation' && n.source === node.source).slice(0, 2);\n          transformationNodes.forEach(transformNode => {\n            const connectionId = `${node.id}-${transformNode.id}`;\n            const volumeSeed = seededRandom(`${connectionId}-volume`);\n            const volumeOptions: ('medium' | 'high')[] = ['medium', 'high'];\n            const volume = volumeOptions[Math.floor(volumeSeed * volumeOptions.length)];\n            \n            connections.push({\n              id: connectionId,\n              from: node.id,\n              to: transformNode.id,\n              volume,\n              health: node.status === 'failed' ? 'error' : node.status === 'warning' ? 'warning' : 'healthy',\n              animated: node.status !== 'failed'\n            });\n            node.connections.push(transformNode.id);\n            transformNode.connections.push(node.id);\n          });\n        }\n      } else if (node.type === 'transformation') {\n        // Only connect if upstream is healthy\n        const ingestionNode = nodes.find(n => n.type === 'ingestion' && n.source === node.source);\n        const sourceNode = nodes.find(n => n.type === 'source' && n.source === node.source);\n        if (sourceNode?.status !== 'failed' && ingestionNode?.status !== 'failed') {\n          const enrichmentNodes = nodes.filter(n => n.type === 'enrichment' && n.source === node.source).slice(0, 2);\n          enrichmentNodes.forEach(enrichNode => {\n            const connectionId = `${node.id}-${enrichNode.id}`;\n            connections.push({\n              id: connectionId,\n              from: node.id,\n              to: enrichNode.id,\n              volume: 'high',\n              health: node.status === 'failed' ? 'error' : node.status === 'warning' ? 'warning' : 'healthy',\n              animated: node.status !== 'failed'\n            });\n            node.connections.push(enrichNode.id);\n            enrichNode.connections.push(node.id);\n          });\n        }\n      } else if (node.type === 'enrichment') {\n        // Smart destination routing based on source type and pipeline health\n        const sourceNode = nodes.find(n => n.type === 'source' && n.source === node.source);\n        const ingestionNode = nodes.find(n => n.type === 'ingestion' && n.source === node.source);\n        const transformationNode = nodes.find(n => n.type === 'transformation' && n.source === node.source);\n        \n        // Only connect if entire pipeline upstream is healthy\n        if (sourceNode?.status !== 'failed' && ingestionNode?.status !== 'failed' && transformationNode?.status !== 'failed') {\n          // Smart routing based on data source type\n          const destinationMappings = {\n            'LinkedIn': ['Threat Intelligence DB', 'MSTIC Data Lake', 'ML Training Data'],\n            'Twitter': ['Real-time Dashboard', 'Alert System', 'Security Analytics Store'],\n            'Office365': ['Compliance Archive', 'Security Analytics Store', 'Alert System'],\n            'AzureAD': ['Security Analytics Store', 'Alert System', 'Threat Intelligence DB'],\n            'GitHub': ['Threat Intelligence DB', 'Security Analytics Store', 'API Gateway'],\n            'ThreatIntel': ['Alert System', 'Threat Intelligence DB', 'Real-time Dashboard'],\n            'Exchange': ['Compliance Archive', 'Security Analytics Store', 'Alert System'],\n            'Teams': ['Compliance Archive', 'Real-time Dashboard', 'Security Analytics Store'],\n            'SharePoint': ['Compliance Archive', 'MSTIC Data Lake', 'Security Analytics Store'],\n            'PowerBI': ['Real-time Dashboard', 'Security Analytics Store', 'API Gateway']\n          };\n          \n          const targetDestinations = destinationMappings[node.source as keyof typeof destinationMappings] || \n                                   ['MSTIC Data Lake', 'Security Analytics Store', 'Alert System'];\n          \n          const destNodes = nodes.filter(n => \n            n.type === 'destination' && targetDestinations.includes(n.name)\n          );\n          \n          destNodes.forEach(destNode => {\n            const connectionId = `${node.id}-${destNode.id}`;\n            connections.push({\n              id: connectionId,\n              from: node.id,\n              to: destNode.id,\n              volume: 'high',\n              health: node.status === 'failed' ? 'error' : node.status === 'warning' ? 'warning' : 'healthy',\n              animated: node.status !== 'failed'\n            });\n            node.connections.push(destNode.id);\n            destNode.connections.push(node.id);\n          });\n        }\n      }\n    });\n\n    // Add connections for the Parquet-to-Kusto staging pipeline (Interview Scenario #1)\n    const parquetSource = nodes.find(n => n.id === 'parquet-source-adls');\n    const stagingPipeline = nodes.find(n => n.id === 'parquet-staging-pipeline');\n    const kustoDestination = nodes.find(n => n.name === 'Kusto Analytics Engine');\n\n    if (parquetSource && stagingPipeline && kustoDestination) {\n      // Parquet source -> Staging pipeline\n      connections.push({\n        id: 'parquet-to-staging',\n        from: parquetSource.id,\n        to: stagingPipeline.id,\n        volume: 'high',\n        health: 'healthy',\n        animated: true\n      });\n      parquetSource.connections.push(stagingPipeline.id);\n      stagingPipeline.connections.push(parquetSource.id);\n\n      // Staging pipeline -> Kusto destination\n      connections.push({\n        id: 'staging-to-kusto',\n        from: stagingPipeline.id,\n        to: kustoDestination.id,\n        volume: 'medium',\n        health: 'healthy',\n        animated: true\n      });\n      stagingPipeline.connections.push(kustoDestination.id);\n      kustoDestination.connections.push(stagingPipeline.id);\n    }\n\n    return { nodes, connections };\n  };\n\n  // Use useMemo to prevent regeneration on every render, but regenerate all connections\n  const { nodes: allNodes, connections: allConnections } = useMemo(() => {\n    const result = generateLineageData();\n    const nodesWithErrors = result.nodes.filter(n => n.hasErrors);\n    console.log('Generated nodes:', {\n      total: result.nodes.length,\n      withErrors: nodesWithErrors.length,\n      errorNodes: nodesWithErrors.map(n => ({ id: n.id, name: n.name, status: n.status, errorCount: n.errorCount }))\n    });\n    return result;\n  }, []);\n\n  // Filter connections based on selected source\n  const filteredConnections = useMemo(() => {\n    if (selectedSource === 'all') {\n      return allConnections;\n    }\n    \n    // Show all connections that are part of the selected source's data flow path\n    return allConnections.filter(conn => {\n      const fromNode = allNodes.find(n => n.id === conn.from);\n      const toNode = allNodes.find(n => n.id === conn.to);\n      \n      // Direct connections involving the selected source\n      if (fromNode?.source === selectedSource || toNode?.source === selectedSource) {\n        return true;\n      }\n      \n      // For destination connections, check if there's a path from the selected source\n      if (toNode?.type === 'destination') {\n        // Find if there's any pipeline in the enrichment stage that connects to this destination\n        // and that pipeline is part of the selected source flow\n        const enrichmentConnections = allConnections.filter(c => \n          c.to === toNode.id && allNodes.find(n => n.id === c.from)?.type === 'enrichment'\n        );\n        \n        return enrichmentConnections.some(enrichConn => {\n          const enrichNode = allNodes.find(n => n.id === enrichConn.from);\n          return enrichNode?.source === selectedSource;\n        });\n      }\n      \n      return false;\n    });\n  }, [allNodes, allConnections, selectedSource]);\n\n  // Use filtered data\n  const nodes = allNodes;\n  const connections = filteredConnections;\n\n  // Clear highlighted path when source changes\n  useEffect(() => {\n    setHighlightedPath([]);\n    setSelectedNode(null);\n  }, [selectedSource]);\n\n  // Handle window resize to reposition popup if needed\n  useEffect(() => {\n    const handleResize = () => {\n      if (showNodePopup && selectedNode) {\n        // Simple repositioning on resize - keep popup visible\n        const popupWidth = 420;\n        const popupHeight = 400;\n        \n        let x = popupPosition.x;\n        let y = popupPosition.y;\n        \n        // Check if popup would go off right edge\n        if (x + popupWidth > window.innerWidth - 20) {\n          x = window.innerWidth - popupWidth - 20;\n        }\n        \n        // Check if popup would go off bottom edge\n        if (y + popupHeight > window.innerHeight - 20) {\n          y = window.innerHeight - popupHeight - 20;\n        }\n        \n        // Ensure popup doesn't go off edges\n        if (x < 20) x = 20;\n        if (y < 20) y = 20;\n        \n        setPopupPosition({ x, y });\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [showNodePopup, selectedNode, popupPosition]);\n\n  // Filter nodes based on search\n  const filteredNodes = nodes.filter(node =>\n    node.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (node.source && node.source.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  // Highlight path from selected node\n  const highlightPath = (nodeId: string) => {\n    const visited = new Set<string>();\n    const path: string[] = [];\n    \n    const traverse = (currentId: string) => {\n      if (visited.has(currentId)) return;\n      visited.add(currentId);\n      path.push(currentId);\n      \n      const node = nodes.find(n => n.id === currentId);\n      if (node) {\n        node.connections.forEach(connectedId => {\n          if (!visited.has(connectedId)) {\n            traverse(connectedId);\n          }\n        });\n      }\n    };\n    \n    traverse(nodeId);\n    setHighlightedPath(path);\n  };\n\n  const handleNodeClick = (node: LineageNode, event: React.MouseEvent) => {\n    // Reset popup expansion when clicking a new node\n    setPopupExpanded(false);\n    \n    // Calculate popup dimensions based on expansion state\n    const popupWidth = 420; // Compact width\n    const popupHeight = 400; // Compact height\n    \n    // Get mouse position relative to viewport\n    const mouseX = event.clientX;\n    const mouseY = event.clientY;\n    \n    // Calculate optimal position with smart positioning\n    let x = mouseX + 15; // Default offset to the right\n    let y = mouseY + 15; // Default offset below\n    \n    // Check if popup would go off right edge of screen\n    if (x + popupWidth > window.innerWidth - 20) {\n      x = mouseX - popupWidth - 15; // Position to the left of cursor\n    }\n    \n    // Check if popup would go off bottom edge of screen\n    if (y + popupHeight > window.innerHeight - 20) {\n      y = mouseY - popupHeight - 15; // Position above cursor\n    }\n    \n    // Ensure popup doesn't go off left edge\n    if (x < 20) {\n      x = 20;\n    }\n    \n    // Ensure popup doesn't go off top edge\n    if (y < 20) {\n      y = 20;\n    }\n    \n    // If popup is still too large for screen (edge case), center it\n    if (popupWidth > window.innerWidth - 40) {\n      x = 20;\n    }\n    if (popupHeight > window.innerHeight - 40) {\n      y = 20;\n    }\n    \n    setPopupPosition({ x, y });\n    \n    // Set the selected node and show popup\n    setSelectedNode(node);\n    setShowNodePopup(true);\n    \n    // If clicking on a source node, update the selectedSource filter\n    if (node.type === 'source' && node.source) {\n      setSelectedSource(node.source);\n      // Clear any existing highlights to show the full source flow\n      setHighlightedPath([]);\n    } else {\n      // For non-source nodes, highlight the path\n      highlightPath(node.id);\n    }\n  };\n\n  // Function to handle popup expansion and repositioning\n  const handlePopupExpansion = () => {\n    const newExpanded = !popupExpanded;\n    setPopupExpanded(newExpanded);\n    \n    if (!selectedNode) return;\n    \n    // Recalculate position for expanded popup\n    const popupWidth = newExpanded ? 800 : 420;\n    const popupHeight = newExpanded ? 600 : 400;\n    \n    let x = popupPosition.x;\n    let y = popupPosition.y;\n    \n    // Check if expanded popup would go off right edge\n    if (x + popupWidth > window.innerWidth - 20) {\n      x = window.innerWidth - popupWidth - 20;\n    }\n    \n    // Check if expanded popup would go off bottom edge\n    if (y + popupHeight > window.innerHeight - 20) {\n      y = window.innerHeight - popupHeight - 20;\n    }\n    \n    // Ensure popup doesn't go off left edge\n    if (x < 20) {\n      x = 20;\n    }\n    \n    // Ensure popup doesn't go off top edge\n    if (y < 20) {\n      y = 20;\n    }\n    \n    setPopupPosition({ x, y });\n  };\n\n  const handleNodeDoubleClick = (node: LineageNode) => {\n    console.log('Node double-clicked:', {\n      id: node.id,\n      name: node.name,\n      status: node.status,\n      hasErrors: node.hasErrors,\n      errorCount: node.errorCount,\n      hasPipelineData: !!node.pipelineData,\n      pipelineDataKeys: node.pipelineData ? Object.keys(node.pipelineData) : []\n    });\n    \n    // Open error details modal on double-click for failed/warning nodes\n    if ((node.status === 'failed' || node.status === 'warning') && node.pipelineData) {\n      console.log('Opening error modal for node:', node.name);\n      setSelectedNode(node);\n      setShowErrorModal(true);\n    } else {\n      console.log('Not opening modal - conditions not met');\n    }\n  };\n\n  const getNodeColor = (node: LineageNode) => {\n    // If there's a highlighted path and this node is not in it, dim it\n    if (highlightedPath.length > 0 && !highlightedPath.includes(node.id)) {\n      return '#444';\n    }\n    \n    // If a specific source is selected, apply source filtering\n    if (selectedSource !== 'all') {\n      // Highlight the selected source\n      if (node.type === 'source' && node.source === selectedSource) {\n        return '#0078d4'; // Bright blue for selected source\n      }\n      // Dim other sources when a specific source is selected\n      if (node.type === 'source' && node.source !== selectedSource) {\n        return '#333'; // Dimmed color for non-selected sources\n      }\n      // For pipeline nodes, check if they belong to the selected source\n      if (node.type !== 'source' && node.type !== 'destination') {\n        if (node.source === selectedSource) {\n          // Normal colors for pipeline nodes of the selected source\n          switch (node.type) {\n            case 'ingestion': return '#52c41a';\n            case 'transformation': return '#faad14';\n            case 'enrichment': return '#8b5cf6';\n            default: return '#888';\n          }\n        } else {\n          return '#333'; // Dim pipeline nodes from other sources\n        }\n      }\n      // Destinations: check if they have connections in current filtered set\n      if (node.type === 'destination') {\n        const hasConnections = connections.some(conn => conn.to === node.id);\n        return hasConnections ? '#ef4444' : '#333';\n      }\n    }\n    \n    // Default colors when no source is selected\n    switch (node.type) {\n      case 'source': return '#0078d4';\n      case 'ingestion': return '#52c41a';\n      case 'transformation': return '#faad14';\n      case 'enrichment': return '#8b5cf6';\n      case 'destination': return '#ef4444';\n      default: return '#888';\n    }\n  };\n\n  const getConnectionStyle = (connection: DataConnection) => {\n    const isHighlighted = highlightedPath.includes(connection.from) && highlightedPath.includes(connection.to);\n    \n    const baseStyle = {\n      strokeWidth: connection.volume === 'high' ? '3' : connection.volume === 'medium' ? '2' : '1',\n      stroke: connection.health === 'error' ? '#ef4444' :\n              connection.health === 'warning' ? '#faad14' : '#52c41a',\n      opacity: highlightedPath.length > 0 ? (isHighlighted ? '1' : '0.2') : '0.8',\n      strokeDasharray: connection.volume === 'low' ? '5,5' : 'none',\n      markerEnd: connection.health === 'error' ? 'url(#arrowhead-error)' :\n                 connection.health === 'warning' ? 'url(#arrowhead-warning)' : \n                 'url(#arrowhead-healthy)'\n    };\n    \n    return baseStyle;\n  };\n\n  const getStatusIcon = (status: PipelineStatus) => {\n    switch (status) {\n      case 'healthy': return <CheckCircle size={16} className={styles.statusHealthy} />;\n      case 'warning': return <AlertTriangle size={16} className={styles.statusWarning} />;\n      case 'failed': return <XCircle size={16} className={styles.statusFailed} />;\n      case 'processing': return <Activity size={16} className={styles.statusProcessing} />;\n      default: return null;\n    }\n  };\n\n  const uniqueSources = [...new Set(mockPipelines.map(p => p.source))];\n\n  return (\n    <div className={styles.dataLineage}>\n      <div className={styles.header}>\n        <div className={styles.headerContent}>\n          <div className={styles.titleSection}>\n            <h1 className={styles.title}>\n              Interactive Data Lineage\n              <button \n                className={styles.infoButton}\n                onClick={() => setShowHowItWorks(true)}\n                title=\"How does this system work?\"\n              >\n                <HelpCircle size={18} />\n              </button>\n            </h1>\n            <p className={styles.subtitle}>Visualize and explore data flow through your threat intelligence pipelines</p>\n          </div>\n        </div>\n      </div>\n\n      <div className={styles.mainContent}>\n        {/* Controls */}\n        <div className={styles.controls}>\n          <div className={styles.searchContainer}>\n            <Search className={styles.searchIcon} />\n            <input\n              type=\"text\"\n              placeholder=\"Search nodes and pipelines...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className={styles.searchInput}\n            />\n          </div>\n          <select\n            value={selectedSource}\n            onChange={(e) => setSelectedSource(e.target.value as PipelineSource | 'all')}\n            className={styles.filterSelect}\n          >\n            <option value=\"all\">All Sources</option>\n            {uniqueSources.map(source => (\n              <option key={source} value={source}>{source}</option>\n            ))}\n          </select>\n          <button \n            className={styles.clearButton}\n            onClick={() => {\n              setSelectedNode(null);\n              setHighlightedPath([]);\n              setSelectedSource('all');\n            }}\n          >\n            Clear Selection\n          </button>\n          <button \n            className={styles.clearButton}\n            onClick={() => {\n              // Find a node with errors for testing\n              const errorNode = allNodes.find(n => n.hasErrors && n.pipelineData);\n              if (errorNode) {\n                console.log('Test: Opening modal for', errorNode.name);\n                setSelectedNode(errorNode);\n                setShowErrorModal(true);\n              } else {\n                console.log('Test: No error nodes found');\n              }\n            }}\n            style={{ background: '#dc3545' }}\n          >\n            Test Error Modal\n          </button>\n        </div>\n\n        {/* Selected Source Indicator */}\n        {selectedSource !== 'all' && (\n          <div className={styles.filterIndicator}>\n            <span>Showing data flow for: <strong>{selectedSource}</strong></span>\n            <button \n              className={styles.clearFilterButton}\n              onClick={() => setSelectedSource('all')}\n              title=\"Show all sources\"\n            >\n              ×\n            </button>\n          </div>\n        )}\n\n        <div className={styles.contentGrid}>\n          {/* Main Visualization */}\n          <div className={styles.visualizationPanel}>\n            {/* Legend */}\n            <div className={styles.legend}>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendDot} ${styles.source}`}></div>\n                <span>Data Sources</span>\n              </div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendDot} ${styles.ingestion}`}></div>\n                <span>Ingestion</span>\n              </div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendDot} ${styles.transformation}`}></div>\n                <span>Transformation</span>\n              </div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendDot} ${styles.enrichment}`}></div>\n                <span>Enrichment</span>\n              </div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendDot} ${styles.destination}`}></div>\n                <span>Destinations</span>\n              </div>\n              <div className={styles.legendSeparator}></div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendProcessingBadge} ${styles.streaming}`}>STRM</div>\n                <span>Streaming</span>\n              </div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendProcessingBadge} ${styles.microBatch}`}>μBTCH</div>\n                <span>Micro-batch</span>\n              </div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendProcessingBadge} ${styles.batch}`}>BTCH</div>\n                <span>Batch</span>\n              </div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendProcessingBadge} ${styles.hybrid}`}>HYB</div>\n                <span>Hybrid</span>\n              </div>\n            </div>\n\n            {/* SVG Visualization */}\n            <div className={styles.lineageContainer}>\n              <svg \n                ref={svgRef}\n                className={styles.lineageSvg}\n                viewBox=\"0 0 1600 900\"\n                preserveAspectRatio=\"xMidYMid meet\"\n              >\n                {/* Animated gradient definitions */}\n                <defs>\n                  <linearGradient id=\"flowGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"0%\" stopColor=\"rgba(82, 196, 26, 0.1)\" />\n                    <stop offset=\"50%\" stopColor=\"rgba(82, 196, 26, 0.8)\" />\n                    <stop offset=\"100%\" stopColor=\"rgba(82, 196, 26, 0.1)\" />\n                    <animateTransform\n                      attributeName=\"gradientTransform\"\n                      attributeType=\"XML\"\n                      type=\"translate\"\n                      values=\"-100 0; 200 0; -100 0\"\n                      dur=\"3s\"\n                      repeatCount=\"indefinite\"\n                    />\n                  </linearGradient>\n                  \n                  {/* Dynamic arrow markers for different connection colors */}\n                  <marker\n                    id=\"arrowhead-healthy\"\n                    markerWidth=\"6\"\n                    markerHeight=\"4\"\n                    refX=\"5\"\n                    refY=\"2\"\n                    orient=\"auto\"\n                  >\n                    <polygon points=\"0 0, 6 2, 0 4\" fill=\"#52c41a\" />\n                  </marker>\n                  \n                  <marker\n                    id=\"arrowhead-warning\"\n                    markerWidth=\"6\"\n                    markerHeight=\"4\"\n                    refX=\"5\"\n                    refY=\"2\"\n                    orient=\"auto\"\n                  >\n                    <polygon points=\"0 0, 6 2, 0 4\" fill=\"#faad14\" />\n                  </marker>\n                  \n                  <marker\n                    id=\"arrowhead-error\"\n                    markerWidth=\"6\"\n                    markerHeight=\"4\"\n                    refX=\"5\"\n                    refY=\"2\"\n                    orient=\"auto\"\n                  >\n                    <polygon points=\"0 0, 6 2, 0 4\" fill=\"#ef4444\" />\n                  </marker>\n                  \n                  <filter id=\"glow\">\n                    <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n                    <feMerge> \n                      <feMergeNode in=\"coloredBlur\"/>\n                      <feMergeNode in=\"SourceGraphic\"/>\n                    </feMerge>\n                  </filter>\n                </defs>\n\n                {/* Section labels */}\n                <text x=\"120\" y=\"50\" className={styles.sectionLabel}>Data Sources</text>\n                <text x=\"420\" y=\"50\" className={styles.sectionLabel}>Ingestion</text>\n                <text x=\"720\" y=\"50\" className={styles.sectionLabel}>Transformation</text>\n                <text x=\"1020\" y=\"50\" className={styles.sectionLabel}>Enrichment</text>\n                <text x=\"1320\" y=\"50\" className={styles.sectionLabel}>Destinations</text>\n\n                {/* Render connections */}\n                {connections\n                  .filter(conn => {\n                    const fromNode = filteredNodes.find(n => n.id === conn.from);\n                    const toNode = filteredNodes.find(n => n.id === conn.to);\n                    return fromNode && toNode;\n                  })\n                  .map((conn) => {\n                    const fromNode = filteredNodes.find(n => n.id === conn.from)!;\n                    const toNode = filteredNodes.find(n => n.id === conn.to)!;\n                    const style = getConnectionStyle(conn);\n                    \n                    return (\n                      <g key={conn.id}>\n                        <line\n                          x1={fromNode.x + 180}\n                          y1={fromNode.y + 22}\n                          x2={toNode.x - 20}\n                          y2={toNode.y + 22}\n                          stroke={style.stroke}\n                          strokeWidth={style.strokeWidth}\n                          opacity={style.opacity}\n                          strokeDasharray={style.strokeDasharray}\n                          markerEnd={style.markerEnd}\n                          className={styles.connectionLine}\n                        />\n                        {conn.animated && (\n                          <circle\n                            r=\"3\"\n                            fill={style.stroke}\n                            className={styles.flowDot}\n                          >\n                            <animateMotion\n                              dur=\"3s\"\n                              repeatCount=\"indefinite\"\n                              path={`M${fromNode.x + 180},${fromNode.y + 22} L${toNode.x - 20},${toNode.y + 22}`}\n                            />\n                          </circle>\n                        )}\n                      </g>\n                    );\n                  })}\n\n                {/* Render nodes */}\n                {filteredNodes.map(node => {\n                  const isSelectedSource = node.type === 'source' && selectedSource !== 'all' && node.source === selectedSource;\n                  \n                  return (\n                  <g \n                    key={node.id}\n                    className={styles.nodeGroup}\n                    onClick={(e) => handleNodeClick(node, e)}\n                    onDoubleClick={() => handleNodeDoubleClick(node)}\n                    onMouseEnter={() => setHoveredNode(node.id)}\n                    onMouseLeave={() => setHoveredNode(null)}\n                  >\n                    <rect\n                      x={node.x}\n                      y={node.y}\n                      width=\"180\"\n                      height=\"45\"\n                      fill={getNodeColor(node)}\n                      rx=\"6\"\n                      className={`${styles.nodeRect} ${selectedNode?.id === node.id ? styles.selectedNode : ''}`}\n                      filter={selectedNode?.id === node.id || isSelectedSource ? \"url(#glow)\" : \"none\"}\n                      stroke={isSelectedSource ? \"#ffffff\" : \"transparent\"}\n                      strokeWidth={isSelectedSource ? \"2\" : \"0\"}\n                    />\n                    <text\n                      x={node.x + 90}\n                      y={node.y + 18}\n                      textAnchor=\"middle\"\n                      fill=\"white\"\n                      fontSize=\"11\"\n                      fontWeight=\"600\"\n                      className={styles.nodeText}\n                    >\n                      {node.name.length > 20 ? `${node.name.substring(0, 17)}...` : node.name}\n                    </text>\n                    \n                    {/* Microsoft Technology Label */}\n                    <text\n                      x={node.x + 90}\n                      y={node.y + 30}\n                      textAnchor=\"middle\"\n                      fill=\"#0078d4\"\n                      fontSize=\"8\"\n                      fontWeight=\"500\"\n                    >\n                      {node.technology.length > 30 ? \n                        node.technology.split(' ')[0] + (node.technology.includes('Azure') ? ' ' + node.technology.split(' ')[1] : '') :\n                        node.technology\n                      }\n                    </text>\n                    \n                    {/* Processing Mode Badge */}\n                    <rect\n                      x={node.x + 5}\n                      y={node.y + 5}\n                      width=\"28\"\n                      height=\"12\"\n                      fill={node.processingMode === 'streaming' ? '#52c41a' :\n                            node.processingMode === 'micro-batch' ? '#faad14' :\n                            node.processingMode === 'hybrid' ? '#8b5cf6' :\n                            '#0078d4'}\n                      rx=\"2\"\n                    />\n                    <text\n                      x={node.x + 19}\n                      y={node.y + 13}\n                      textAnchor=\"middle\"\n                      fill=\"white\"\n                      fontSize=\"6\"\n                      fontWeight=\"700\"\n                    >\n                      {node.processingMode === 'streaming' ? 'STRM' :\n                       node.processingMode === 'micro-batch' ? 'μBTCH' :\n                       node.processingMode === 'hybrid' ? 'HYB' :\n                       'BTCH'}\n                    </text>\n                    \n                    <text\n                      x={node.x + 90}\n                      y={node.y + 40}\n                      textAnchor=\"middle\"\n                      fill=\"rgba(255,255,255,0.8)\"\n                      fontSize=\"9\"\n                      className={styles.nodeSubtext}\n                    >\n                      {node.recordsPerSecond}/s\n                    </text>\n                    \n                    {/* Status indicator */}\n                    <circle\n                      cx={node.x + 160}\n                      cy={node.y + 12}\n                      r=\"5\"\n                      fill={node.status === 'healthy' ? '#52c41a' :\n                            node.status === 'warning' ? '#faad14' :\n                            node.status === 'failed' ? '#ef4444' : '#1890ff'}\n                    />\n                    \n                    {/* ENHANCED Error count indicator - BIGGER and MORE VISIBLE */}\n                    {node.hasErrors && node.errorCount && node.errorCount > 0 && (\n                      <g>\n                        <circle\n                          cx={node.x + 170}\n                          cy={node.y + 35}\n                          r=\"12\"\n                          fill=\"#ef4444\"\n                          stroke=\"#ffffff\"\n                          strokeWidth=\"2\"\n                        />\n                        <text\n                          x={node.x + 170}\n                          y={node.y + 40}\n                          textAnchor=\"middle\"\n                          fill=\"white\"\n                          fontSize=\"11\"\n                          fontWeight=\"700\"\n                        >\n                          {node.errorCount > 9 ? '9+' : node.errorCount}\n                        </text>\n                      </g>\n                    )}\n                    \n                    {/* Enhanced visual indicator for nodes with errors - THICKER BORDER */}\n                    {node.hasErrors && (\n                      <rect\n                        x={node.x - 3}\n                        y={node.y - 3}\n                        width=\"186\"\n                        height=\"51\"\n                        fill=\"none\"\n                        stroke={node.status === 'failed' ? '#ef4444' : '#faad14'}\n                        strokeWidth=\"3\"\n                        rx=\"8\"\n                        className={styles.errorBorder}\n                      />\n                    )}\n                    \n                    {/* Double-click hint for error nodes */}\n                    {node.hasErrors && hoveredNode === node.id && (\n                      <g>\n                        <rect\n                          x={node.x + 20}\n                          y={node.y + 55}\n                          width=\"140\"\n                          height=\"20\"\n                          fill=\"rgba(0, 0, 0, 0.8)\"\n                          rx=\"4\"\n                        />\n                        <text\n                          x={node.x + 90}\n                          y={node.y + 68}\n                          textAnchor=\"middle\"\n                          fill=\"#faad14\"\n                          fontSize=\"10\"\n                          fontWeight=\"600\"\n                        >\n                          Double-click for error details\n                        </text>\n                      </g>\n                    )}\n                  </g>\n                  );\n                })}\n                \n                {/* Render tooltips separately to ensure they appear on top */}\n                {hoveredNode && filteredNodes.map(node => {\n                  if (hoveredNode !== node.id) return null;\n                  \n                  // Smart positioning: if node is too far right, show tooltip on the left\n                  const tooltipX = node.x > 1000 ? node.x - 210 : node.x + 190;\n                  const tooltipY = node.y - 10;\n                  \n                  return (\n                    <g key={`tooltip-${node.id}`} className={styles.tooltip}>\n                      <rect\n                        x={tooltipX}\n                        y={tooltipY}\n                        width=\"240\"\n                        height=\"110\"\n                        fill=\"rgba(0,0,0,0.95)\"\n                        rx=\"6\"\n                        stroke=\"#555\"\n                        strokeWidth=\"1\"\n                      />\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 15}\n                        fill=\"white\"\n                        fontSize=\"11\"\n                        fontWeight=\"600\"\n                      >\n                        {node.name}\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 28}\n                        fill=\"#0078d4\"\n                        fontSize=\"9\"\n                        fontWeight=\"500\"\n                      >\n                        {node.technology}\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 40}\n                        fill=\"#ccc\"\n                        fontSize=\"9\"\n                      >\n                        Processing: {node.processingMode?.toUpperCase()} | {node.dataMovementTool}\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 52}\n                        fill=\"#ccc\"\n                        fontSize=\"9\"\n                      >\n                        Records/sec: {node.recordsPerSecond} | Avg Time: {node.avgProcessingTime}ms\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 64}\n                        fill=\"#ccc\"\n                        fontSize=\"9\"\n                      >\n                        {node.processingMode === 'streaming' ? `Latency: ${node.streamingLatency}` : \n                         node.processingMode === 'batch' ? `Frequency: ${node.batchFrequency}` :\n                         'Mode: Hybrid Processing'}\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 76}\n                        fill=\"#ccc\"\n                        fontSize=\"9\"\n                      >\n                        Format: {node.dataFormat} | Quality: {node.dataQuality}%\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 88}\n                        fill=\"#ccc\"\n                        fontSize=\"9\"\n                      >\n                        RG: {node.resourceGroup.split('-').slice(-2).join('-')}\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 100}\n                        fill=\"#52c41a\"\n                        fontSize=\"8\"\n                      >\n                        Click for detailed tech specs →\n                      </text>\n                    </g>\n                  );\n                })}\n              </svg>\n            </div>\n          </div>\n\n          {/* Side Panel */}\n        </div>\n\n        {/* Node Details Popup */}\n        {showNodePopup && selectedNode && (\n          <>\n            <div className={styles.popupOverlay} onClick={() => setShowNodePopup(false)} />\n            <div \n              className={`${styles.nodePopup} ${popupExpanded ? styles.nodePopupExpanded : ''}`}\n              style={{\n                left: `${popupPosition.x}px`,\n                top: `${popupPosition.y}px`\n              }}\n            >\n              <div className={styles.popupHeader}>\n                <h3 className={styles.popupTitle}>\n                  {selectedNode.type === 'source' && <Database size={18} />}\n                  {selectedNode.type === 'ingestion' && <ArrowRight size={18} />}\n                  {selectedNode.type === 'transformation' && <GitBranch size={18} />}\n                  {selectedNode.type === 'enrichment' && <Zap size={18} />}\n                  {selectedNode.type === 'destination' && <HardDrive size={18} />}\n                  {selectedNode.name}\n                </h3>\n                <div className={styles.popupActions}>\n                  <button \n                    className={styles.popupButton}\n                    onClick={() => setShowNodePopup(false)}\n                    title=\"Close\"\n                  >\n                    <X size={16} />\n                  </button>\n                </div>\n              </div>\n              \n              <div className={styles.popupContent}>\n                {/* Quick Info Grid */}\n                <div className={styles.quickInfo}>\n                  <div className={styles.quickInfoItem}>\n                    <span className={styles.quickInfoLabel}>Status</span>\n                    <div className={styles.quickInfoValue}>\n                      <span className={`${styles.statusBadge} ${styles[`status${selectedNode.status.charAt(0).toUpperCase() + selectedNode.status.slice(1)}`]}`}>\n                        {getStatusIcon(selectedNode.status)}\n                        {selectedNode.status}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className={styles.quickInfoItem}>\n                    <span className={styles.quickInfoLabel}>Technology</span>\n                    <div className={styles.quickInfoValue}>\n                      <Server size={14} />\n                      {selectedNode.technology}\n                    </div>\n                  </div>\n                  \n                  <div className={styles.quickInfoItem}>\n                    <span className={styles.quickInfoLabel}>Throughput</span>\n                    <div className={styles.quickInfoValue}>\n                      <Activity size={14} />\n                      {selectedNode.recordsPerSecond}/s\n                    </div>\n                  </div>\n                  \n                  <div className={styles.quickInfoItem}>\n                    <span className={styles.quickInfoLabel}>Processing Time</span>\n                    <div className={styles.quickInfoValue}>\n                      <Clock size={14} />\n                      {selectedNode.avgProcessingTime}ms\n                    </div>\n                  </div>\n                </div>\n\n                {/* Performance Metrics */}\n                <div className={styles.metricGrid}>\n                  <div className={styles.metricItem}>\n                    <p className={styles.metricValue}>{selectedNode.dataQuality}%</p>\n                    <p className={styles.metricLabel}>Data Quality</p>\n                  </div>\n                  <div className={styles.metricItem}>\n                    <p className={styles.metricValue}>{selectedNode.connections.length}</p>\n                    <p className={styles.metricLabel}>Connections</p>\n                  </div>\n                  <div className={styles.metricItem}>\n                    <p className={styles.metricValue}>{selectedNode.region}</p>\n                    <p className={styles.metricLabel}>Region</p>\n                  </div>\n                </div>\n\n                {/* Expand Button */}\n                <div className={styles.expandButtonContainer}>\n                  <button \n                    className={styles.expandButton}\n                    onClick={handlePopupExpansion}\n                    title={popupExpanded ? \"Show less details\" : \"Show more details\"}\n                  >\n                    {popupExpanded ? <Minimize2 size={14} /> : <Maximize2 size={14} />}\n                    {popupExpanded ? \"Less Details\" : \"More Details\"}\n                  </button>\n                </div>\n\n                {/* Detailed Information - Conditional */}\n                {popupExpanded && (\n                <div className={styles.expandedContent}>\n                  <div className={styles.expandedSection}>\n                    <h4 className={styles.expandedSectionTitle}>\n                      <Shield size={16} />\n                      Security & Authentication\n                    </h4>\n                    <div className={styles.expandedSectionContent}>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Authentication:</span>\n                        <span className={styles.detailValue}>{selectedNode.authentication}</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Protocols:</span>\n                        <div className={styles.tagList}>\n                          {selectedNode.protocols?.slice(0, 3).map((protocol, idx) => (\n                            <span key={idx} className={styles.tag}>{protocol}</span>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className={styles.expandedSection}>\n                    <h4 className={styles.expandedSectionTitle}>\n                      <Cpu size={16} />\n                      Infrastructure\n                    </h4>\n                    <div className={styles.expandedSectionContent}>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Resource Group:</span>\n                        <span className={styles.detailValue}>{selectedNode.resourceGroup}</span>\n                      </div>\n                      {selectedNode.computeType && (\n                        <div className={styles.detailItem}>\n                          <span className={styles.detailLabel}>Compute:</span>\n                          <span className={styles.detailValue}>{selectedNode.computeType}</span>\n                        </div>\n                      )}\n                      {selectedNode.storageType && (\n                        <div className={styles.detailItem}>\n                          <span className={styles.detailLabel}>Storage:</span>\n                          <span className={styles.detailValue}>{selectedNode.storageType}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className={styles.expandedSection}>\n                    <h4 className={styles.expandedSectionTitle}>\n                      <BarChart3 size={16} />\n                      Monitoring\n                    </h4>\n                    <div className={styles.expandedSectionContent}>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>App Insights:</span>\n                        <span className={styles.detailValue}>{selectedNode.monitoring?.applicationInsights}</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Log Analytics:</span>\n                        <span className={styles.detailValue}>{selectedNode.monitoring?.logAnalyticsWorkspace}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className={styles.expandedSection}>\n                    <h4 className={styles.expandedSectionTitle}>\n                      <AlertTriangle size={16} />\n                      Dependencies\n                    </h4>\n                    <div className={styles.expandedSectionContent}>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Key Vault:</span>\n                        <span className={styles.detailValue}>{selectedNode.dependencies?.keyVault}</span>\n                      </div>\n                      {selectedNode.dependencies?.externalApis && selectedNode.dependencies.externalApis.length > 0 && (\n                        <div className={styles.detailItem}>\n                          <span className={styles.detailLabel}>External APIs:</span>\n                          <div className={styles.tagList}>\n                            {selectedNode.dependencies.externalApis.slice(0, 2).map((api, idx) => (\n                              <span key={idx} className={styles.tag}>{api}</span>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Operational Information Section */}\n                  <div className={styles.expandedSection}>\n                    <h4 className={styles.expandedSectionTitle}>\n                      <Cpu size={16} />\n                      Operational Information\n                    </h4>\n                    <div className={styles.expandedSectionContent}>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Owner:</span>\n                        <span className={styles.detailValue}>{selectedNode.operationalInfo?.owner}</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Escalation Path:</span>\n                        <div className={styles.tagList}>\n                          {selectedNode.operationalInfo?.escalationPath?.map((contact, idx) => (\n                            <span key={idx} className={styles.tag}>{contact}</span>\n                          ))}\n                        </div>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Maintenance Window:</span>\n                        <span className={styles.detailValue}>{selectedNode.operationalInfo?.maintenanceWindow}</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Criticality Level:</span>\n                        <span className={styles.detailValue}>{selectedNode.operationalInfo?.criticalityLevel}</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Data Classification:</span>\n                        <span className={styles.detailValue}>{selectedNode.operationalInfo?.dataClassification}</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Compliance Requirements:</span>\n                        <div className={styles.tagList}>\n                          {selectedNode.operationalInfo?.complianceRequirements?.map((req, idx) => (\n                            <span key={idx} className={styles.tag}>{req}</span>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* SLA Metrics Section */}\n                  <div className={styles.expandedSection}>\n                    <h4 className={styles.expandedSectionTitle}>\n                      <Clock size={16} />\n                      SLA Metrics\n                    </h4>\n                    <div className={styles.expandedSectionContent}>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Uptime:</span>\n                        <span className={styles.detailValue}>{selectedNode.slaMetrics?.uptime}%</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Target Uptime:</span>\n                        <span className={styles.detailValue}>{selectedNode.slaMetrics?.targetUptime}%</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>MTTR:</span>\n                        <span className={styles.detailValue}>{selectedNode.slaMetrics?.mttr} minutes</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>MTBF:</span>\n                        <span className={styles.detailValue}>{selectedNode.slaMetrics?.mtbf} hours</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Performance Metrics Section */}\n                  <div className={styles.expandedSection}>\n                    <h4 className={styles.expandedSectionTitle}>\n                      <BarChart3 size={16} />\n                      Performance Metrics\n                    </h4>\n                    <div className={styles.expandedSectionContent}>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Avg Latency:</span>\n                        <span className={styles.detailValue}>{selectedNode.performanceMetrics?.avgLatency}ms</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>P95 Latency:</span>\n                        <span className={styles.detailValue}>{selectedNode.performanceMetrics?.p95Latency}ms</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Error Rate:</span>\n                        <span className={styles.detailValue}>{selectedNode.performanceMetrics?.errorRate}%</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Throughput:</span>\n                        <span className={styles.detailValue}>{selectedNode.performanceMetrics?.throughputMbps} Mbps</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>CPU Utilization:</span>\n                        <span className={styles.detailValue}>{selectedNode.performanceMetrics?.cpuUtilization}%</span>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Memory Utilization:</span>\n                        <span className={styles.detailValue}>{selectedNode.performanceMetrics?.memoryUtilization}%</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Troubleshooting Section */}\n                  <div className={styles.expandedSection}>\n                    <h4 className={styles.expandedSectionTitle}>\n                      <HelpCircle size={16} />\n                      Troubleshooting Resources\n                    </h4>\n                    <div className={styles.expandedSectionContent}>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Common Issues:</span>\n                        <div className={styles.tagList}>\n                          {selectedNode.troubleshooting?.commonIssues?.slice(0, 2).map((issue, idx) => (\n                            <span key={idx} className={styles.tag}>{issue}</span>\n                          ))}\n                        </div>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Runbook URLs:</span>\n                        <div className={styles.linkList}>\n                          {selectedNode.troubleshooting?.runbookUrls?.map((url, idx) => (\n                            <a key={idx} href={url} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.link}>\n                              Runbook {idx + 1}\n                            </a>\n                          ))}\n                        </div>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Health Check Endpoints:</span>\n                        <div className={styles.linkList}>\n                          {selectedNode.troubleshooting?.healthCheckEndpoints?.map((endpoint, idx) => (\n                            <a key={idx} href={endpoint} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.link}>\n                              Health Check {idx + 1}\n                            </a>\n                          ))}\n                        </div>\n                      </div>\n                      <div className={styles.detailItem}>\n                        <span className={styles.detailLabel}>Sample Log Queries:</span>\n                        <div className={styles.codeSnippets}>\n                          {selectedNode.troubleshooting?.logQuerySamples?.map((query, idx) => (\n                            <code key={idx} className={styles.codeSnippet}>\n                              {query}\n                            </code>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                )}\n\n                {/* Error Status & Actions */}\n                {(selectedNode.hasErrors || selectedNode.status === 'failed' || selectedNode.status === 'warning') && (\n                  <div style={{ marginTop: '1rem', padding: '1rem', background: '#1a1a1a', borderRadius: '8px', border: '1px solid #ef4444' }}>\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.5rem' }}>\n                      <AlertTriangle size={16} style={{ color: '#ef4444' }} />\n                      <span style={{ fontWeight: '600', color: '#ef4444' }}>\n                        {selectedNode.errorCount ? `${selectedNode.errorCount} Active Errors` : 'System Issues Detected'}\n                      </span>\n                    </div>\n                    \n                    {selectedNode.pipelineData?.currentError && (\n                      <p style={{ fontSize: '0.85rem', color: '#cccccc', margin: '0 0 0.75rem 0' }}>\n                        {selectedNode.pipelineData.currentError.errorMessage.slice(0, 100)}...\n                      </p>\n                    )}\n                    \n                    <button \n                      onClick={() => {\n                        setShowErrorModal(true);\n                        setShowNodePopup(false);\n                      }}\n                      style={{\n                        background: '#ef4444',\n                        color: 'white',\n                        border: 'none',\n                        padding: '0.5rem 1rem',\n                        borderRadius: '6px',\n                        fontSize: '0.85rem',\n                        cursor: 'pointer',\n                        display: 'flex',\n                        alignItems: 'center',\n                        gap: '0.5rem'\n                      }}\n                    >\n                      <AlertTriangle size={14} />\n                      View Error Details\n                    </button>\n                  </div>\n                )}\n\n                {/* Last Updated */}\n                <div style={{ marginTop: '1rem', fontSize: '0.8rem', color: '#888', textAlign: 'center' }}>\n                  Last updated: {new Date(selectedNode.lastUpdate).toLocaleString()}\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Error Details Modal */}\n        {showErrorModal && selectedNode && selectedNode.pipelineData && (\n          <ErrorDetailsModal\n            isOpen={showErrorModal}\n            onClose={() => setShowErrorModal(false)}\n            pipelineName={selectedNode.name}\n            currentError={selectedNode.pipelineData.currentError}\n            errorHistory={selectedNode.pipelineData.errorHistory || []}\n            logReferences={selectedNode.pipelineData.logs || []}\n            metricsHistory={selectedNode.pipelineData.metrics || []}\n            impactAnalysis={selectedNode.pipelineData.impact}\n            runbooks={selectedNode.pipelineData.runbooks || []}\n            oncallTeam={selectedNode.operationalInfo?.owner || 'MSTIC Data Engineering Team'}\n            slackChannel=\"#mstic-incidents\"\n            teamsChannel=\"MSTIC Operations\"\n            operationalData={{\n              slaMetrics: selectedNode.slaMetrics,\n              operationalInfo: selectedNode.operationalInfo,\n              performanceMetrics: selectedNode.performanceMetrics,\n              troubleshooting: selectedNode.troubleshooting,\n              contactInfo: {\n                primaryTeam: selectedNode.operationalInfo?.owner || 'MSTIC Data Engineering Team',\n                secondaryTeam: 'MSTIC Platform Team',\n                escalationContacts: [\n                  {\n                    name: 'On-call Engineer',\n                    role: 'Level 1 Support',\n                    email: 'mstic-oncall@microsoft.com',\n                    phone: '+1-425-882-8080',\n                    slackHandle: '@mstic-oncall'\n                  },\n                  {\n                    name: 'Senior Engineer',\n                    role: 'Level 2 Support',\n                    email: 'mstic-senior@microsoft.com',\n                    phone: '+1-425-882-8081',\n                    slackHandle: '@mstic-senior'\n                  },\n                  {\n                    name: 'Engineering Manager',\n                    role: 'Level 3 Escalation',\n                    email: 'mstic-manager@microsoft.com',\n                    phone: '+1-425-882-8082',\n                    slackHandle: '@mstic-manager'\n                  }\n                ]\n              },\n              technology: {\n                stack: selectedNode.technology,\n                resourceGroup: selectedNode.resourceGroup,\n                subscriptionId: selectedNode.subscriptionId,\n                region: selectedNode.region\n              }\n            }}\n          />\n        )}\n\n        {/* Summary Stats */}\n        <div className={styles.summaryGrid}>\n          <div className={styles.summaryCard}>\n            <div className={styles.summaryIcon}>\n              <Database size={24} />\n            </div>\n            <div className={styles.summaryContent}>\n              <div className={styles.summaryValue}>{nodes.filter(n => n.type === 'source').length}</div>\n              <div className={styles.summaryLabel}>Data Sources</div>\n            </div>\n          </div>\n\n          <div className={styles.summaryCard}>\n            <div className={styles.summaryIcon}>\n              <GitBranch size={24} />\n            </div>\n            <div className={styles.summaryContent}>\n              <div className={styles.summaryValue}>\n                {nodes.filter(n => ['ingestion', 'transformation', 'enrichment'].includes(n.type)).length}\n              </div>\n              <div className={styles.summaryLabel}>Processing Pipelines</div>\n            </div>\n          </div>\n\n          <div className={styles.summaryCard}>\n            <div className={styles.summaryIcon}>\n              <ArrowRight size={24} />\n            </div>\n            <div className={styles.summaryContent}>\n              <div className={styles.summaryValue}>{connections.length}</div>\n              <div className={styles.summaryLabel}>Data Flows</div>\n            </div>\n          </div>\n\n          <div className={styles.summaryCard}>\n            <div className={styles.summaryIcon}>\n              <HardDrive size={24} />\n            </div>\n            <div className={styles.summaryContent}>\n              <div className={styles.summaryValue}>{nodes.filter(n => n.type === 'destination').length}</div>\n              <div className={styles.summaryLabel}>Destinations</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Error Details Modal */}\n      {showErrorModal && selectedNode && selectedNode.pipelineData && (\n        <ErrorDetailsModal\n          isOpen={showErrorModal}\n          onClose={() => setShowErrorModal(false)}\n          pipelineName={selectedNode.pipelineData.name}\n          currentError={selectedNode.pipelineData.currentError}\n          errorHistory={selectedNode.pipelineData.errorHistory || []}\n          logReferences={selectedNode.pipelineData.logReferences || []}\n          metricsHistory={selectedNode.pipelineData.metricsHistory || []}\n          impactAnalysis={selectedNode.pipelineData.impactAnalysis}\n          runbooks={selectedNode.pipelineData.runbooks || []}\n          oncallTeam={selectedNode.pipelineData.oncallTeam || 'MSTIC Data Engineering'}\n          slackChannel={selectedNode.pipelineData.slackChannel}\n          teamsChannel={selectedNode.pipelineData.teamsChannel}\n          dashboardUrl={selectedNode.pipelineData.dashboardUrl}\n          grafanaUrl={selectedNode.pipelineData.grafanaUrl}\n          healthCheckUrl={selectedNode.pipelineData.healthCheckUrl}\n          operationalData={{\n            slaMetrics: selectedNode.slaMetrics,\n            operationalInfo: selectedNode.operationalInfo,\n            performanceMetrics: selectedNode.performanceMetrics,\n            troubleshooting: selectedNode.troubleshooting,\n            technology: {\n              stack: selectedNode.technology,\n              resourceGroup: selectedNode.resourceGroup,\n              region: selectedNode.region,\n              subscriptionId: selectedNode.subscriptionId\n            },\n            contactInfo: {\n              primaryTeam: selectedNode.operationalInfo?.owner || 'MSTIC Data Engineering',\n              escalationContacts: selectedNode.operationalInfo?.escalationPath?.map((role, index) => ({\n                name: `${role} Contact`,\n                role: role,\n                email: `${role.toLowerCase().replace(/\\s+/g, '.')}@microsoft.com`,\n                phone: index === 0 ? '+1-555-0123' : undefined,\n                slackHandle: `@${role.toLowerCase().replace(/\\s+/g, '')}`\n              })) || []\n            }\n          }}\n        />\n      )}\n      \n      <HowItWorksModal \n        isOpen={showHowItWorks}\n        onClose={() => setShowHowItWorks(false)}\n        section=\"dataLineage\"\n      />\n    </div>\n  );\n});\n\nDataLineage.displayName = 'DataLineage';\n\nexport default DataLineage;"],"names":["ErrorDetailsModal","isOpen","onClose","pipelineName","currentError","errorHistory","logReferences","metricsHistory","impactAnalysis","runbooks","oncallTeam","slackChannel","teamsChannel","dashboardUrl","grafanaUrl","healthCheckUrl","operationalData","activeTab","setActiveTab","useState","copiedText","setCopiedText","copyToClipboard","text","label","err","getErrorIcon","errorType","jsx","Zap","styles","TrendingDown","Clock","Users","AlertTriangle","getSeverityColor","severity","jsxs","e","XCircle","Activity","ExternalLink","MessageSquare","tab","Copy","action","index","CheckCircle","key","value","error","_a","_b","level","contact","Mail","Phone","Gauge","Server","Settings","Shield","req","BarChart3","FileText","issue","AlertCircle","endpoint","query","log","pipeline","dest","runbook","DataLineage","memo","searchTerm","setSearchTerm","selectedSource","setSelectedSource","selectedNode","setSelectedNode","hoveredNode","setHoveredNode","highlightedPath","setHighlightedPath","showErrorModal","setShowErrorModal","showHowItWorks","setShowHowItWorks","showNodePopup","setShowNodePopup","popupPosition","setPopupPosition","popupExpanded","setPopupExpanded","svgRef","useRef","seededRandom","seed","hash","i","char","generateLineageData","nodes","connections","sources","source","statusSeed","statusOptions","status","sourcePipelines","mockPipelines","p","sourcePipeline","type","x","sourceGroups","selectedPipelines","typeNodes","destinations","parquetToKustoStaging","node","n","ingestionNode","connectionId","volumeSeed","volumeOptions","volume","sourceNode","transformNode","enrichNode","transformationNode","targetDestinations","destNode","parquetSource","stagingPipeline","kustoDestination","allNodes","allConnections","useMemo","result","nodesWithErrors","filteredConnections","conn","fromNode","toNode","c","enrichConn","useEffect","handleResize","y","filteredNodes","highlightPath","nodeId","visited","path","traverse","currentId","connectedId","handleNodeClick","event","popupWidth","popupHeight","mouseX","mouseY","handlePopupExpansion","newExpanded","handleNodeDoubleClick","getNodeColor","getConnectionStyle","connection","isHighlighted","getStatusIcon","uniqueSources","HelpCircle","Search","errorNode","style","isSelectedSource","tooltipX","tooltipY","Fragment","Database","ArrowRight","GitBranch","HardDrive","X","Minimize2","Maximize2","protocol","idx","Cpu","_c","_d","_e","api","_f","_h","_g","_i","_j","_k","_m","_l","_n","_o","_p","_q","_r","_s","_t","_u","_v","_w","_A","_z","url","_C","_B","_E","_D","_F","_G","_H","_I","_K","_J","role","HowItWorksModal"],"mappings":"88MA+FMA,GAAsD,CAAC,CAC3D,OAAAC,EACA,QAAAC,EACA,aAAAC,EACA,aAAAC,EACA,aAAAC,EACA,cAAAC,EACA,eAAAC,EACA,eAAAC,EACA,SAAAC,EACA,WAAAC,EACA,aAAAC,EACA,aAAAC,EACA,aAAAC,EACA,WAAAC,EACA,eAAAC,EACA,gBAAAC,CACF,IAAM,SACJ,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAAA,SAA8E,OAAO,EACjH,CAACC,EAAYC,CAAa,EAAIF,EAAAA,SAAwB,IAAI,EAE5D,GAAA,CAAClB,EAAe,OAAA,KAEd,MAAAqB,EAAkB,MAAOC,EAAcC,IAAkB,CACzD,GAAA,CACI,MAAA,UAAU,UAAU,UAAUD,CAAI,EACxCF,EAAcG,CAAK,EACnB,WAAW,IAAMH,EAAc,IAAI,EAAG,GAAI,QACnCI,EAAK,CACJ,QAAA,MAAM,kBAAmBA,CAAG,CAAA,CAExC,EAEMC,EAAgBC,GAAsB,CAC1C,OAAQA,EAAW,CACjB,IAAK,aAAc,OAAQC,EAAAA,IAAAC,GAAA,CAAI,UAAWC,EAAO,SAAW,CAAA,EAC5D,IAAK,eAAgB,OAAQF,EAAAA,IAAAG,GAAA,CAAa,UAAWD,EAAO,SAAW,CAAA,EACvE,IAAK,UAAW,OAAQF,EAAAA,IAAAI,EAAA,CAAM,UAAWF,EAAO,SAAW,CAAA,EAC3D,IAAK,iBAAkB,OAAQF,EAAAA,IAAAK,EAAA,CAAM,UAAWH,EAAO,SAAW,CAAA,EAClE,QAAS,OAAQF,EAAAA,IAAAM,EAAA,CAAc,UAAWJ,EAAO,SAAW,CAAA,CAAA,CAEhE,EAEMK,EAAoBC,GAAqB,CAC7C,OAAQA,EAAU,CAChB,IAAK,WAAmB,MAAA,UACxB,IAAK,OAAe,MAAA,UACpB,IAAK,SAAiB,MAAA,UACtB,IAAK,MAAc,MAAA,UACnB,QAAgB,MAAA,SAAA,CAEpB,EAEA,aACG,MAAI,CAAA,UAAWN,EAAO,aAAc,QAAS5B,EAC5C,SAAAmC,EAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,MAAO,QAAUQ,GAAMA,EAAE,gBAC9C,EAAA,SAAA,CAACD,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAAAO,OAAC,MACC,CAAA,SAAA,CAAAT,EAAA,IAAC,KAAG,CAAA,UAAWE,EAAO,WAAY,SAAsB,yBAAA,EACvDF,EAAA,IAAA,IAAA,CAAE,UAAWE,EAAO,aAAe,SAAa3B,CAAA,CAAA,CAAA,EACnD,EACAyB,EAAAA,IAAC,SAAO,CAAA,UAAWE,EAAO,YAAa,QAAS5B,EAC9C,SAAC0B,EAAA,IAAAW,GAAA,CAAQ,KAAM,EAAI,CAAA,CACrB,CAAA,CAAA,EACF,EAGCF,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,aACrB,SAAA,CAAAO,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,aAClB,QAAS,IAAM,OAAO,KAAKf,EAAgB,QAAQ,EACnD,SAAU,CAACA,EAEX,SAAA,CAACa,EAAAA,IAAAY,EAAA,CAAS,KAAM,EAAI,CAAA,EAAE,cAAA,CAAA,CAExB,EACAH,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,aAClB,QAAS,IAAM,OAAO,KAAKjB,EAAc,QAAQ,EACjD,SAAU,CAACA,EAEX,SAAA,CAACe,EAAAA,IAAAa,GAAA,CAAa,KAAM,EAAI,CAAA,EAAE,WAAA,CAAA,CAE5B,EACAJ,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,aAClB,QAAS,IAAM,OAAO,KAAKhB,EAAY,QAAQ,EAC/C,SAAU,CAACA,EAEX,SAAA,CAACc,EAAAA,IAAAG,GAAA,CAAa,KAAM,EAAI,CAAA,EAAE,SAAA,CAAA,CAE5B,EACCpB,GACC0B,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,aAClB,QAAS,IAAM,OAAO,KAAK,gCAAgCnB,CAAY,GAAI,QAAQ,EAEnF,SAAA,CAACiB,EAAAA,IAAAc,GAAA,CAAc,KAAM,EAAI,CAAA,EAAE,OAAA,CAAA,CAE7B,EAED9B,GACCyB,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,aAClB,QAAS,IAAM,OAAO,KAAKlB,EAAc,QAAQ,EAEjD,SAAA,CAACgB,EAAAA,IAAAK,EAAA,CAAM,KAAM,EAAI,CAAA,EAAE,OAAA,CAAA,CAAA,CAErB,EAEJ,EAGCL,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,OACpB,SAAC,CAAA,QAAS,aAAc,OAAQ,UAAW,SAAU,UAAU,EAAE,IAAKa,GACrEN,EAAA,KAAC,SAAA,CAEC,UAAW,GAAGP,EAAO,GAAG,IAAIb,IAAc0B,EAAMb,EAAO,UAAY,EAAE,GACrE,QAAS,IAAMZ,EAAayB,CAAU,EAErC,SAAA,CAAQA,IAAA,aAAe,aAAeA,EAAI,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAI,MAAM,CAAC,EAC/EA,IAAQ,SAAWvC,GACjBwB,EAAAA,IAAA,OAAA,CAAK,UAAWE,EAAO,WAAY,MAAO,CAAE,gBAAiBK,EAAiB/B,EAAa,QAAQ,CAAE,EACnG,WAAa,QAChB,CAAA,CAAA,CAAA,EARGuC,CAWR,CAAA,EACH,EAECN,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,aAEpB,SAAA,CAAAb,IAAc,SACboB,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,WACpB,SAAA,CAAA1B,EACEiC,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,aACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UACpB,SAAA,CAAAJ,EAAatB,EAAa,SAAS,SACnC,MACC,CAAA,SAAA,CAAAwB,MAAC,KAAG,CAAA,UAAWE,EAAO,WAAa,WAAa,aAAa,EAC5DO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UACrB,SAAA,CAACO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,UAAW,SAAA,CAAA,eAAa1B,EAAa,SAAA,EAAU,EACvEwB,EAAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,UACrB,SAAI,IAAA,KAAK1B,EAAa,SAAS,EAAE,eAAA,CACpC,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EACAwB,EAAA,IAAC,OAAA,CACC,UAAWE,EAAO,cAClB,MAAO,CAAE,gBAAiBK,EAAiB/B,EAAa,QAAQ,CAAE,EAEjE,SAAaA,EAAA,QAAA,CAAA,CAChB,EACF,EAGCA,EAAa,YACZiC,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,WACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAW,aAAA,CAAA,EACfS,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,WAClB,QAAS,IAAMR,EAAgBlB,EAAa,WAAa,aAAa,EAEtE,SAAA,CAACwB,EAAAA,IAAAgB,GAAA,CAAK,KAAM,EAAI,CAAA,EACfxB,IAAe,cAAgB,UAAY,MAAA,CAAA,CAAA,CAC9C,EACF,QACC,MAAI,CAAA,UAAWU,EAAO,aAAe,WAAa,UAAW,CAAA,CAAA,EAChE,EAIDO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,iBACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAiB,mBAAA,CAAA,EACpBA,MAAA,KAAA,CAAG,UAAWE,EAAO,YACnB,SAAa1B,EAAA,iBAAiB,IAAI,CAACyC,EAAQC,IAC1CT,EAAAA,KAAC,KAAe,CAAA,UAAWP,EAAO,WAChC,SAAA,CAAAF,EAAA,IAACmB,GAAY,CAAA,KAAM,GAAI,UAAWjB,EAAO,WAAY,EACpDe,CAAA,CAFM,EAAAC,CAGT,CACD,CACH,CAAA,CAAA,EACF,EAGC1C,EAAa,SAAW,OAAO,KAAKA,EAAa,OAAO,EAAE,OAAS,GAClEiC,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,QACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAa,eAAA,CAAA,EACjBA,MAAC,OAAI,UAAWE,EAAO,YACpB,SAAO,OAAA,QAAQ1B,EAAa,OAAO,EAAE,IAAI,CAAC,CAAC4C,EAAKC,CAAK,WACnD,MAAc,CAAA,UAAWnB,EAAO,YAC/B,SAAA,CAACO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,WAAa,SAAA,CAAAkB,EAAI,GAAA,EAAC,QACzC,OAAK,CAAA,UAAWlB,EAAO,aAAe,SAAA,OAAOmB,CAAK,CAAE,CAAA,CAAA,CAF7C,EAAAD,CAGV,CACD,CACH,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,EAEAX,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,QACrB,SAAA,CAAAF,EAAA,IAACmB,GAAY,CAAA,KAAM,GAAI,UAAWjB,EAAO,YAAa,EACtDF,EAAAA,IAAC,MAAG,SAAiB,mBAAA,CAAA,EACrBA,EAAAA,IAAC,KAAE,SAA+D,iEAAA,CAAA,CAAA,EACpE,EAIDvB,EAAa,OAAS,UACpB,MAAI,CAAA,UAAWyB,EAAO,aACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAoB,sBAAA,CAAA,QACvB,MAAI,CAAA,UAAWE,EAAO,YACpB,SAAAzB,EAAa,MAAM,EAAG,CAAC,EAAE,IAAI,CAAC6C,EAAOJ,WACnC,MAAgB,CAAA,UAAWhB,EAAO,YACjC,SAAA,CAAAF,EAAAA,IAAC,OAAI,UAAWE,EAAO,YACpB,SAAaJ,EAAAwB,EAAM,SAAS,EAC/B,EACCb,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAAAF,MAAC,MAAI,CAAA,UAAWE,EAAO,eAAiB,WAAM,aAAa,EAC1DO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAACF,EAAAA,IAAA,OAAA,CAAM,WAAM,SAAU,CAAA,EACvBA,MAAC,QAAM,SAAI,IAAA,KAAKsB,EAAM,SAAS,EAAE,gBAAiB,CAAA,CAAA,CACpD,CAAA,CAAA,EACF,EACAtB,EAAA,IAAC,OAAA,CACC,UAAWE,EAAO,gBAClB,MAAO,CAAE,gBAAiBK,EAAiBe,EAAM,QAAQ,CAAE,EAE1D,SAAMA,EAAA,QAAA,CAAA,CACT,CAhBQ,EAAAJ,CAiBV,CACD,CACH,CAAA,CAAA,CACF,CAAA,CAAA,EAEJ,EAID7B,IAAc,cACbW,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,WACrB,SAACO,EAAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,kBAErB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAAAO,OAAC,KACC,CAAA,SAAA,CAACT,EAAAA,IAAAK,EAAA,CAAM,KAAM,EAAI,CAAA,EAAE,qBAAA,EAErB,EACCI,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAY,cAAA,CAAA,EACfS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAAAF,EAAAA,IAAC,QAAK,UAAWE,EAAO,SACrB,WAAiBqB,EAAAnC,GAAA,YAAAA,EAAA,kBAAA,YAAAmC,EAAiB,QAASzC,CAC9C,CAAA,EACC2B,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACpB,SAAA,CACCnB,GAAA0B,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,cAClB,QAAS,IAAM,OAAO,KAAK,gCAAgCnB,CAAY,GAAI,QAAQ,EAEnF,SAAA,CAACiB,EAAAA,IAAAc,GAAA,CAAc,KAAM,EAAI,CAAA,EAAE,IACzB/B,CAAA,CAAA,CACJ,EAEDC,GACCyB,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,cAClB,QAAS,IAAM,OAAO,KAAKlB,EAAc,QAAQ,EAEjD,SAAA,CAACgB,EAAAA,IAAAK,EAAA,CAAM,KAAM,EAAI,CAAA,EAAE,eAAA,CAAA,CAAA,CAErB,CAEJ,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAECI,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAe,iBAAA,CAAA,EACnBA,EAAAA,IAAC,OAAI,UAAWE,EAAO,eACnB,YAAiBsB,EAAApC,GAAA,YAAAA,EAAA,kBAAA,YAAAoC,EAAiB,iBAClC,CAAC,mBAAoB,kBAAmB,YAAa,oBAAoB,GAAG,IAAI,CAACC,EAAOP,IACvFT,OAAA,MAAA,CAAgB,UAAWP,EAAO,gBACjC,SAAA,CAAAF,MAAC,OAAK,CAAA,UAAWE,EAAO,gBAAkB,WAAQ,EAAE,EACnDF,EAAA,IAAA,OAAA,CAAK,UAAWE,EAAO,eAAiB,SAAMuB,CAAA,CAAA,CAAA,CAFvC,EAAAP,CAGV,CACD,CACH,CAAA,CAAA,EACF,GAEC9B,GAAA,YAAAA,EAAiB,cAChBqB,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,YACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAY,cAAA,CAAA,EAChBA,EAAAA,IAAC,OAAI,UAAWE,EAAO,YACpB,SAAgBd,EAAA,YAAY,mBAAmB,MAAM,EAAG,CAAC,EAAE,IAAI,CAACsC,EAASR,WACvE,MAAgB,CAAA,UAAWhB,EAAO,cACjC,SAAA,CAAAF,MAAC,MAAI,CAAA,UAAWE,EAAO,YAAc,WAAQ,KAAK,QACjD,MAAI,CAAA,UAAWA,EAAO,YAAc,WAAQ,KAAK,EACjDO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAACO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,aACtB,SAAA,CAACF,EAAAA,IAAA2B,GAAA,CAAK,KAAM,EAAI,CAAA,EACfD,EAAQ,KAAA,EACX,EACCA,EAAQ,OACPjB,EAAAA,KAAC,OAAK,CAAA,UAAWP,EAAO,aACtB,SAAA,CAACF,EAAAA,IAAA4B,GAAA,CAAM,KAAM,EAAI,CAAA,EAChBF,EAAQ,KAAA,EACX,EAEDA,EAAQ,aACPjB,EAAAA,KAAC,OAAK,CAAA,UAAWP,EAAO,aACtB,SAAA,CAACF,EAAAA,IAAAc,GAAA,CAAc,KAAM,EAAI,CAAA,EAAE,IACzBY,EAAQ,WAAA,CACZ,CAAA,CAAA,CAEJ,CAAA,CAAA,CApBQ,EAAAR,CAqBV,CACD,CACH,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,CAAA,EACF,GAGC9B,GAAA,YAAAA,EAAiB,aAChBqB,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,WACrB,SAAA,CAAAO,OAAC,KACC,CAAA,SAAA,CAACT,EAAAA,IAAA6B,GAAA,CAAM,KAAM,EAAI,CAAA,EAAE,aAAA,EAErB,EACCpB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,QACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,QACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,SAAU,SAAc,iBAAA,EAC9CO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACpB,SAAA,CAAgBd,EAAA,WAAW,OAAO,QAAQ,CAAC,EAAE,GAAA,EAChD,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UAAW,SAAA,CAAA,WACvBd,EAAgB,WAAW,aAAa,GAAA,CACnD,CAAA,CAAA,EACF,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,QACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,SAAU,SAAI,OAAA,EACpCO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACpB,SAAA,CAAAd,EAAgB,WAAW,KAAK,MAAA,EACnC,EACCY,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,UAAW,SAAqB,uBAAA,CAAA,CAAA,EACzD,EACCO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,QACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,SAAU,SAAI,OAAA,EACpCO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACpB,SAAA,CAAAd,EAAgB,WAAW,KAAK,MAAA,EACnC,EACCY,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,UAAW,SAA0B,4BAAA,CAAA,CAAA,CAC9D,CAAA,CAAA,CACF,CAAA,CAAA,EACF,GAIDd,GAAA,YAAAA,EAAiB,aAChBqB,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,YACrB,SAAA,CAAAO,OAAC,KACC,CAAA,SAAA,CAACT,EAAAA,IAAA8B,GAAA,CAAO,KAAM,EAAI,CAAA,EAAE,kBAAA,EAEtB,EACCrB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,UAAW,SAAO,UAAA,QACxC,MAAI,CAAA,UAAWA,EAAO,UAAY,SAAAd,EAAgB,WAAW,KAAM,CAAA,CAAA,EACtE,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,UAAW,SAAc,iBAAA,QAC/C,MAAI,CAAA,UAAWA,EAAO,UAAY,SAAAd,EAAgB,WAAW,aAAc,CAAA,CAAA,EAC9E,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,UAAW,SAAM,SAAA,QACvC,MAAI,CAAA,UAAWA,EAAO,UAAY,SAAAd,EAAgB,WAAW,MAAO,CAAA,CAAA,EACvE,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,UAAW,SAAY,eAAA,QAC7C,MAAI,CAAA,UAAWA,EAAO,UAAY,SAAAd,EAAgB,WAAW,cAAe,CAAA,CAAA,CAC/E,CAAA,CAAA,CACF,CAAA,CAAA,EACF,GAIDA,GAAA,YAAAA,EAAiB,kBAChBqB,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,cACrB,SAAA,CAAAO,OAAC,KACC,CAAA,SAAA,CAACT,EAAAA,IAAA+B,GAAA,CAAS,KAAM,EAAI,CAAA,EAAE,2BAAA,EAExB,EACCtB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,YAAa,SAAiB,oBAAA,QACpD,MAAI,CAAA,UAAW,GAAGA,EAAO,WAAW,IAAIA,EAAO,eAAed,EAAgB,gBAAgB,gBAAgB,EAAE,CAAC,GAC/G,WAAgB,gBAAgB,iBAAiB,aACpD,CAAA,CAAA,EACF,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,YAAa,SAAmB,sBAAA,EACtDO,EAAA,KAAA,MAAA,CAAI,UAAW,GAAGP,EAAO,WAAW,IAAIA,EAAO,kBAAkBd,EAAgB,gBAAgB,kBAAkB,EAAE,CAAC,GACrH,SAAA,CAACY,EAAAA,IAAAgC,GAAA,CAAO,KAAM,EAAI,CAAA,EACjB5C,EAAgB,gBAAgB,mBAAmB,YAAY,CAAA,CAClE,CAAA,CAAA,EACF,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,YAAa,SAAkB,qBAAA,EACrDO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAACF,EAAAA,IAAAI,EAAA,CAAM,KAAM,EAAI,CAAA,EAChBhB,EAAgB,gBAAgB,iBAAA,CACnC,CAAA,CAAA,EACF,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,YAAa,SAAU,aAAA,EAC9CF,EAAAA,IAAC,OAAI,UAAWE,EAAO,eACpB,SAAgBd,EAAA,gBAAgB,uBAAuB,IAAI,CAAC6C,EAAKf,IAChElB,EAAA,IAAC,QAAiB,UAAWE,EAAO,gBAAkB,SAA3C+B,GAAAf,CAA+C,CAC3D,CACH,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,GAID9B,GAAA,YAAAA,EAAiB,qBAChBqB,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,YACrB,SAAA,CAAAO,OAAC,KACC,CAAA,SAAA,CAACT,EAAAA,IAAAkC,GAAA,CAAU,KAAM,EAAI,CAAA,EAAE,uBAAA,EAEzB,EACCzB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,UAAW,SAAe,kBAAA,EAChDO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UACpB,SAAA,CAAAd,EAAgB,mBAAmB,WAAW,IAAA,CACjD,CAAA,CAAA,EACF,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,UAAW,SAAW,cAAA,EAC5CO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UACpB,SAAA,CAAAd,EAAgB,mBAAmB,WAAW,IAAA,CACjD,CAAA,CAAA,EACF,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,UAAW,SAAU,aAAA,EAC3CO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UACpB,SAAA,CAAgBd,EAAA,mBAAmB,UAAU,QAAQ,CAAC,EAAE,GAAA,CAC3D,CAAA,CAAA,EACF,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,UAAW,SAAU,aAAA,EAC3CO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UACpB,SAAA,CAAAd,EAAgB,mBAAmB,eAAe,OAAA,CACrD,CAAA,CAAA,EACF,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,UAAW,SAAS,YAAA,EAC1CO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UACpB,SAAA,CAAgBd,EAAA,mBAAmB,eAAe,QAAQ,CAAC,EAAE,GAAA,CAChE,CAAA,CAAA,EACF,EACCqB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAAAF,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,UAAW,SAAY,eAAA,EAC7CO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UACpB,SAAA,CAAgBd,EAAA,mBAAmB,kBAAkB,QAAQ,CAAC,EAAE,GAAA,CACnE,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,GAIDA,GAAA,YAAAA,EAAiB,kBAChBqB,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,oBACrB,SAAA,CAAAO,OAAC,KACC,CAAA,SAAA,CAACT,EAAAA,IAAAmC,GAAA,CAAS,KAAM,EAAI,CAAA,EAAE,2BAAA,EAExB,EACC1B,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,iBACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,iBACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAa,eAAA,CAAA,QAChB,KAAG,CAAA,UAAWE,EAAO,WACnB,WAAgB,gBAAgB,aAAa,IAAI,CAACkC,EAAOlB,IACxDT,OAAC,KAAe,CAAA,UAAWP,EAAO,UAChC,SAAA,CAACF,EAAAA,IAAAqC,GAAA,CAAY,KAAM,EAAI,CAAA,EACtBD,CAAA,CAFM,EAAAlB,CAGT,CACD,CACH,CAAA,CAAA,EACF,EACCT,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,iBACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAsB,wBAAA,CAAA,EAC1BA,EAAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,cACpB,SAAgBd,EAAA,gBAAgB,qBAAqB,IAAI,CAACkD,EAAUpB,IACnET,EAAA,KAAC,SAAA,CAEC,UAAWP,EAAO,eAClB,QAAS,IAAM,OAAO,KAAKoC,EAAU,QAAQ,EAE7C,SAAA,CAACtC,EAAAA,IAAAY,EAAA,CAAS,KAAM,EAAI,CAAA,EAAE,gBACRM,EAAQ,EACtBlB,EAAAA,IAACa,GAAa,CAAA,KAAM,EAAI,CAAA,CAAA,CAAA,EANnBK,CAAA,CAQR,CACH,CAAA,CAAA,EACF,EACCT,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,iBACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAkB,oBAAA,CAAA,EACtBA,EAAAA,IAAC,OAAI,UAAWE,EAAO,YACpB,SAAgBd,EAAA,gBAAgB,gBAAgB,MAAM,EAAG,CAAC,EAAE,IAAI,CAACmD,EAAOrB,WACtE,MAAgB,CAAA,UAAWhB,EAAO,UACjC,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAAAO,OAAC,OAAK,CAAA,SAAA,CAAA,SAAOS,EAAQ,CAAA,EAAE,EACvBT,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,WAClB,QAAS,IAAMR,EAAgB6C,EAAO,SAASrB,EAAQ,CAAC,EAAE,EAE1D,SAAA,CAAClB,EAAAA,IAAAgB,GAAA,CAAK,KAAM,EAAI,CAAA,EACfxB,IAAe,SAAS0B,EAAQ,CAAC,GAAK,UAAY,MAAA,CAAA,CAAA,CACrD,EACF,EACClB,EAAA,IAAA,OAAA,CAAK,UAAWE,EAAO,UAAY,SAAMqC,CAAA,CAAA,CAAA,CAXlC,EAAArB,CAYV,CACD,CACH,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CAEJ,CACF,CAAA,EAID7B,IAAc,QACbW,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,WACrB,SAACO,EAAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAc,gBAAA,CAAA,EACjBA,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,SACpB,SAAcxB,EAAA,IAAI,CAAC8D,EAAKtB,IACvBT,EAAAA,KAAC,MAAgB,CAAA,UAAWP,EAAO,QACjC,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UACrB,SAAA,CAACF,EAAAA,IAAAmC,GAAA,CAAS,KAAM,EAAI,CAAA,EACnBK,EAAI,UAAU,YAAY,CAAA,EAC7B,EACA/B,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,UAClB,QAAS,IAAM,OAAO,KAAKsC,EAAI,OAAQ,QAAQ,EAE/C,SAAA,CAACxC,EAAAA,IAAAa,GAAA,CAAa,KAAM,EAAI,CAAA,EAAE,WAAA,CAAA,CAAA,CAE5B,EACF,EACCJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,QACrB,SAAA,CAAAO,OAAC,OAAK,CAAA,SAAA,CAAA,mBAAiB+B,EAAI,aAAA,EAAc,SACxC,OAAK,CAAA,SAAA,CAAA,eACS,IAAI,KAAKA,EAAI,UAAU,KAAK,EAAE,eAAe,EAAE,KAC3D,IAAI,KAAKA,EAAI,UAAU,GAAG,EAAE,eAAe,CAAA,CAC9C,CAAA,CAAA,EACF,EACCA,EAAI,eACH/B,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,cACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAAAF,EAAAA,IAAC,QAAK,SAAe,iBAAA,CAAA,EACrBS,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,WAClB,QAAS,IAAMR,EAAgB8C,EAAI,cAAgB,OAAO,EAE1D,SAAA,CAACxC,EAAAA,IAAAgB,GAAA,CAAK,KAAM,EAAI,CAAA,EACfxB,IAAe,QAAU,UAAY,MAAA,CAAA,CAAA,CACxC,EACF,QACC,OAAK,CAAA,UAAWU,EAAO,UAAY,WAAI,aAAc,CAAA,CAAA,CACxD,CAAA,CAAA,CAlCM,EAAAgB,CAoCV,CACD,CACH,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EAID7B,IAAc,WACbW,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,WACrB,SAACO,EAAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAA2B,6BAAA,CAAA,EAE9BS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,mBACrB,SAAA,CAACF,EAAAA,IAAAY,EAAA,CAAS,KAAM,EAAI,CAAA,EACpBZ,EAAAA,IAAC,KAAE,SAAkD,oDAAA,CAAA,EACrDA,EAAAA,IAAC,KAAE,SAA0E,4EAAA,CAAA,EAE5ErB,EAAe,OAAS,UACtB,IAAE,CAAA,UAAWuB,EAAO,YAClB,SAAA,CAAevB,EAAA,OAAO,mCAAA,EACzB,EAEDO,GACCuB,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,cAClB,QAAS,IAAM,OAAO,KAAKhB,EAAY,QAAQ,EAE/C,SAAA,CAACc,EAAAA,IAAAa,GAAA,CAAa,KAAM,EAAI,CAAA,EAAE,iBAAA,CAAA,CAAA,CAE5B,CAEJ,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EAIDxB,IAAc,UACZW,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,WACpB,SAAAtB,EACE6B,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,cACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAe,iBAAA,CAAA,EAClBA,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,YACrB,SAAAO,EAAA,KAAC,OAAA,CACC,UAAWP,EAAO,YAClB,MAAO,CAAE,gBAAiBK,EAAiB3B,EAAe,mBAAmB,CAAE,EAE9E,SAAA,CAAAA,EAAe,oBAAoB,YAAY,EAAE,SAAA,CAAA,CAAA,CAEtD,CAAA,CAAA,EACF,EAEC6B,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAA6B,+BAAA,CAAA,EAChCA,MAAA,MAAA,CAAI,UAAWE,EAAO,aACpB,SAAetB,EAAA,4BAA4B,IAAI,CAAC6D,EAAUvB,IACzDT,EAAAA,KAAC,MAAgB,CAAA,UAAWP,EAAO,aACjC,SAAA,CAACF,EAAAA,IAAAqC,GAAA,CAAY,KAAM,EAAI,CAAA,EACtBI,CAAA,CAFO,EAAAvB,CAGV,CACD,CACH,CAAA,CAAA,EACF,EAECT,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAqB,uBAAA,CAAA,EACxBA,MAAA,MAAA,CAAI,UAAWE,EAAO,aACpB,SAAetB,EAAA,qBAAqB,IAAI,CAAC8D,EAAMxB,IAC9CT,EAAAA,KAAC,MAAgB,CAAA,UAAWP,EAAO,aACjC,SAAA,CAACF,EAAAA,IAAAqC,GAAA,CAAY,KAAM,EAAI,CAAA,EACtBK,CAAA,CAFO,EAAAxB,CAGV,CACD,CACH,CAAA,CAAA,EACF,EAECT,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAmB,qBAAA,CAAA,EACtBS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,aACpB,SAAA,CAAAtB,EAAe,kBAAkB,eAAe,EAAE,UAAA,CACrD,CAAA,CAAA,EACF,EAEC6B,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAsB,wBAAA,CAAA,EACzBS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,aACpB,SAAA,CAAetB,EAAA,qBAAqB,UAAA,CACvC,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EAEA6B,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,SACrB,SAAA,CAACF,EAAAA,IAAAmB,GAAA,CAAY,KAAM,EAAI,CAAA,EACvBnB,EAAAA,IAAC,MAAG,SAAiB,mBAAA,CAAA,EACrBA,EAAAA,IAAC,KAAE,SAAoE,sEAAA,CAAA,CAAA,CAAA,CACzE,CAEJ,CAAA,EAIDX,IAAc,YACbW,EAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,WACrB,SAACO,EAAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,gBACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAmB,qBAAA,CAAA,EACtBA,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,aACpB,SAASrB,EAAA,IAAI,CAAC8D,EAASzB,IACtBT,EAAAA,KAAC,MAAgB,CAAA,UAAWP,EAAO,YACjC,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,cACrB,SAAA,CAACF,EAAAA,IAAA,KAAA,CAAI,WAAQ,KAAM,CAAA,EAClBS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAACF,EAAAA,IAAAI,EAAA,CAAM,KAAM,EAAI,CAAA,EAAE,IACjBuC,EAAQ,wBAAwB,MAAA,CACpC,CAAA,CAAA,EACF,QACC,IAAE,CAAA,UAAWzC,EAAO,mBAAqB,WAAQ,YAAY,EAC9DO,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,cAClB,QAAS,IAAM,OAAO,KAAKyC,EAAQ,IAAK,QAAQ,EAEhD,SAAA,CAAC3C,EAAAA,IAAAmC,GAAA,CAAS,KAAM,EAAI,CAAA,EAAE,cAAA,CAAA,CAAA,CAExB,GAfQjB,CAgBV,CACD,EACH,EAECT,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAY,cAAA,CAAA,EACfS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,cACrB,SAAA,CAACF,EAAAA,IAAAK,EAAA,CAAM,KAAM,EAAI,CAAA,EACjBL,EAAAA,IAAC,QAAM,SAAWlB,CAAA,CAAA,CAAA,CACpB,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CAEJ,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAEJ,2lKClrBO8D,GAAcC,OAAK,IAAM,oHAC9B,KAAM,CAACC,EAAYC,CAAa,EAAIxD,EAAAA,SAAS,EAAE,EACzC,CAACyD,EAAgBC,CAAiB,EAAI1D,EAAAA,SAAiC,KAAK,EAC5E,CAAC2D,EAAcC,CAAe,EAAI5D,EAAAA,SAA6B,IAAI,EACnE,CAAC6D,EAAaC,CAAc,EAAI9D,EAAAA,SAAwB,IAAI,EAC5D,CAAC+D,EAAiBC,CAAkB,EAAIhE,EAAAA,SAAmB,CAAA,CAAE,EAC7D,CAACiE,EAAgBC,CAAiB,EAAIlE,EAAAA,SAAS,EAAK,EACpD,CAACmE,EAAgBC,CAAiB,EAAIpE,EAAAA,SAAS,EAAK,EAEpD,CAACqE,EAAeC,CAAgB,EAAItE,EAAAA,SAAS,EAAK,EAClD,CAACuE,EAAeC,CAAgB,EAAIxE,EAAA,SAAS,CAAE,EAAG,EAAG,EAAG,EAAG,EAC3D,CAACyE,EAAeC,CAAgB,EAAI1E,EAAAA,SAAS,EAAK,EAClD2E,EAASC,SAAsB,IAAI,EAGnCC,EAAgBC,GAAiB,CACrC,IAAIC,EAAO,EACX,QAASC,EAAI,EAAGA,EAAIF,EAAK,OAAQE,IAAK,CAC9B,MAAAC,EAAOH,EAAK,WAAWE,CAAC,EACrBD,GAAAA,GAAQ,GAAKA,EAAQE,EAC9BF,EAAOA,EAAOA,CAAA,CAGT,OAAA,KAAK,IAAIA,CAAI,EAAI,UAC1B,EAGMG,EAAsB,IAAM,CAChC,MAAMC,EAAuB,CAAC,EACxBC,EAAgC,CAAC,EAGjCC,EAA4B,CAAC,WAAY,UAAW,YAAa,UAAW,SAAU,cAAe,WAAY,QAAS,aAAc,SAAS,EAC/IA,EAAA,QAAQ,CAACC,EAAQ3D,IAAU,OACjC,MAAM4D,EAAaV,EAAa,GAAGS,CAAM,SAAS,EAC5CE,EAAkC,CAAC,UAAW,UAAW,QAAQ,EACjEC,EAASD,EAAc,KAAK,MAAMD,EAAaC,EAAc,MAAM,CAAC,EAGpEE,EAAkBC,GAAc,OAAYC,IAAAA,GAAE,SAAWN,CAAM,EAC/DO,EAAiBH,EAAgB,OAAS,EAAIA,EAAgB,CAAC,EAAI,KAEzEP,EAAM,KAAK,CACT,GAAI,UAAUG,CAAM,GACpB,KAAMA,EACN,KAAM,SACN,OAAAA,EACA,EAAG,GACH,EAAG,GAAK3D,EAAQ,GAChB,OAAA8D,EACA,iBAAkB,KAAK,MAAMZ,EAAa,GAAGS,CAAM,UAAU,EAAI,GAAI,EAAI,IACzE,kBAAmB,KAAK,MAAMT,EAAa,GAAGS,CAAM,OAAO,EAAI,GAAG,EAAI,GACtE,YAAa,CAAC,EACd,YAAa,uBAAuBA,CAAM,YAC1C,WAAY,IAAI,KAAK,KAAK,IAAI,EAAIT,EAAa,GAAGS,CAAM,SAAS,EAAI,IAAO,EAAE,YAAY,EAC1F,YAAa,KAAK,MAAMT,EAAa,GAAGS,CAAM,UAAU,EAAI,EAAE,EAAI,GAClE,aAAcO,EACd,UAAWJ,IAAW,UAAYA,IAAW,UAC7C,aAAYzD,EAAA6D,GAAA,YAAAA,EAAgB,eAAhB,YAAA7D,EAA8B,UAAWyD,IAAW,SAAW,EAAIA,IAAW,UAAY,EAAI,GAE1G,WAAYH,IAAW,aAAeA,IAAW,YAAcA,IAAW,SAAWA,IAAW,aAAe,sBACpGA,IAAW,UAAY,8BACvBA,IAAW,YAAcA,IAAW,UAAY,mBAChDA,IAAW,SAAW,qCACtBA,IAAW,cAAgB,iDAC3B,mBACX,cAAe,wBACf,eAAgB,0BAChB,OAAQ,YACR,gBAAiB,CAAC,WAAY,SAAS,EAAE,SAASA,CAAM,EAAI,GAAK,GACjE,eAAgB,CAAC,WAAY,SAAS,EAAE,SAASA,CAAM,EAAI,GAAK,GAChE,cAAe,EACf,UAAWA,IAAW,aAAeA,IAAW,UAAY,CAAC,QAAS,WAAW,EACvEA,IAAW,SAAW,CAAC,QAAS,SAAS,EACzC,CAAC,QAAS,WAAY,OAAO,EACvC,eAAgBA,IAAW,aAAeA,IAAW,UAAY,8CAClDA,IAAW,SAAW,qCACtB,uCACf,WAAY,CACV,oBAAqB,0BACrB,sBAAuB,yBACvB,aAAc,sCACd,WAAY,CAAC,GAAGA,CAAM,qBAAsB,GAAGA,CAAM,kBAAmB,GAAGA,CAAM,eAAe,CAClG,EACA,aAAc,CACZ,SAAU,wBACV,gBAAiB,CAAC,MAAMA,EAAO,YAAA,CAAa,YAAY,EACxD,aAAcA,IAAW,YAAc,CAAC,qBAAqB,EAChDA,IAAW,SAAW,CAAC,gBAAgB,EACvCA,IAAW,WAAa,CAAC,kBAAkB,EAC3CA,IAAW,UAAY,CAAC,iBAAiB,EACzC,CAAC,EACd,mBAAoB,CAAC,0BAA2B,oBAAqB,mBAAmB,CAC1F,EAEA,WAAY,CACV,OAAQ,KAAK,IAAI,GAAI,IAAMT,EAAa,GAAGS,CAAM,SAAS,EAAI,CAAC,EAC/D,aAAc,KACd,KAAM,KAAK,MAAMT,EAAa,GAAGS,CAAM,OAAO,EAAI,EAAE,EAAI,EACxD,KAAM,KAAK,MAAMT,EAAa,GAAGS,CAAM,OAAO,EAAI,GAAG,EAAI,EAC3D,EACA,gBAAiB,CACf,MAAOA,IAAW,aAAeA,IAAW,UAAY,sBACjDA,IAAW,UAAYA,IAAW,WAAa,4BAC/C,4BACP,eAAgB,CAAC,mBAAoB,YAAa,qBAAsB,qBAAqB,EAC7F,kBAAmB,0BACnB,iBAAkB,CAAC,YAAa,UAAW,aAAa,EAAE,SAASA,CAAM,EAAI,WAC5D,CAAC,WAAY,SAAS,EAAE,SAASA,CAAM,EAAI,OAAS,SACrE,mBAAoB,CAAC,YAAa,SAAS,EAAE,SAASA,CAAM,EAAI,eAAiB,WACjF,uBAAwB,CAAC,YAAa,SAAS,EAAE,SAASA,CAAM,EAC9D,CAAC,OAAQ,MAAO,YAAa,SAAS,EACtC,CAAC,OAAQ,WAAW,CACxB,EACA,mBAAoB,CAClB,WAAY,KAAK,MAAMT,EAAa,GAAGS,CAAM,UAAU,EAAI,GAAG,EAAI,GAClE,WAAY,KAAK,MAAMT,EAAa,GAAGS,CAAM,MAAM,EAAI,GAAG,EAAI,IAC9D,UAAW,KAAK,MAAMT,EAAa,GAAGS,CAAM,SAAS,EAAI,EAAI,GAAG,EAAI,IACpE,eAAgB,KAAK,MAAMT,EAAa,GAAGS,CAAM,aAAa,EAAI,GAAG,EAAI,GACzE,eAAgB,KAAK,MAAMT,EAAa,GAAGS,CAAM,MAAM,EAAI,EAAE,EAAI,GACjE,kBAAmB,KAAK,MAAMT,EAAa,GAAGS,CAAM,SAAS,EAAI,EAAE,EAAI,EACzE,EACA,gBAAiB,CACf,aAAc,CACZ,GAAGA,CAAM,qBACT,kCACA,8BACA,+BACF,EACA,YAAa,CACX,+BAA+BA,EAAO,YAAA,CAAa,aACnD,sCAAsCA,EAAO,YAAA,CAAa,gBAC5D,EACA,gBAAiB,CACf,GAAGA,CAAM,wEACT,GAAGA,CAAM,wEACX,EACA,qBAAsB,CACpB,qDAAqDA,EAAO,YAAA,CAAa,GACzE,8CAA8CA,EAAO,aAAa,EAAA,CAEtE,EAEA,eAAgB,CAAC,WAAY,UAAW,aAAa,EAAE,SAASA,CAAM,EAAI,YAA6B,QACvG,iBAAkBA,IAAW,aAAeA,IAAW,YAAcA,IAAW,SAAWA,IAAW,aAAe,yCACpGA,IAAW,UAAY,iCACvBA,IAAW,YAAcA,IAAW,UAAY,8BAChDA,IAAW,SAAW,qCACtB,6BACjB,eAAgB,CAAC,YAAa,UAAW,WAAY,QAAS,YAAY,EAAE,SAASA,CAAM,EAC5E,mBAAqB,kBACpC,iBAAkB,CAAC,WAAY,UAAW,aAAa,EAAE,SAASA,CAAM,EACvD,eAAiB,cAClC,WAAYA,IAAW,aAAeA,IAAW,YAAcA,IAAW,QAAU,CAAC,OAAQ,KAAK,EACvFA,IAAW,UAAY,CAAC,OAAQ,KAAK,EACrC,CAAC,OAAQ,MAAM,EAC1B,gBAAiB,CAAC,WAAY,SAAS,EAAE,SAASA,CAAM,EAAI,MAAQ,MAAA,CACrE,CAAA,CACF,EAGqB,CACpB,CAAE,KAAM,YAAa,EAAG,GAAI,EAC5B,CAAE,KAAM,iBAAkB,EAAG,GAAI,EACjC,CAAE,KAAM,aAAc,EAAG,GAAI,CAC/B,EAEc,QAAQ,CAAC,CAAE,KAAAQ,EAAM,EAAAC,KAAQ,CAErC,MAAMC,EAAyC,CAAC,EAChDL,GAAc,QAAoBzC,GAAA,CAC3B8C,EAAa9C,EAAS,MAAM,IAClB8C,EAAA9C,EAAS,MAAM,EAAI,CAAC,GAEnC8C,EAAa9C,EAAS,MAAM,EAAE,KAAKA,CAAQ,CAAA,CAC5C,EAGD,MAAM+C,EAA2B,CAAC,EAClCZ,EAAQ,QAAkBC,GAAA,CACxB,MAAMI,EAAkBM,EAAaV,CAAM,GAAK,CAAC,EAC7C,GAAAI,EAAgB,OAAS,EAAG,CAExB,MAAA/D,EAAQ,KAAK,MAAMkD,EAAa,GAAGiB,CAAI,IAAIR,CAAM,EAAE,EAAII,EAAgB,MAAM,EACjEO,EAAA,KAAKP,EAAgB/D,CAAK,CAAC,CAAA,CAC/C,CACD,EAED,MAAMuE,EAAYD,EAAkB,IAAI,CAAC/C,EAAUvB,IAAW,OAAA,OAC5D,GAAI,GAAGmE,CAAI,IAAI5C,EAAS,EAAE,GAC1B,KAAM,GAAG4C,EAAK,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAK,MAAM,CAAC,CAAC,MAAM5C,EAAS,KAAK,MAAM,GAAG,EAAE,MAAM,EAAG,CAAC,EAAE,KAAK,GAAG,CAAC,GACzG,KAAA4C,EACA,OAAQ5C,EAAS,OACjB,EAAA6C,EACA,EAAG,GAAKpE,EAAQ,GAChB,OAAQuB,EAAS,OACjB,iBAAkB,KAAK,MAAMA,EAAS,iBAAmB,EAAE,EAC3D,kBAAmBA,EAAS,kBAC5B,YAAa,CAAC,EACd,YAAa,GAAG4C,CAAI,cAAc5C,EAAS,IAAI,GAC/C,WAAYA,EAAS,QAAQ,YAAY,EACzC,YAAa,KAAK,MAAM2B,EAAa,GAAG3B,EAAS,EAAE,UAAU,EAAI,EAAE,EAAI,GACvE,eAAgBA,EAChB,aAAcA,EACd,UAAWA,EAAS,SAAW,UAAYA,EAAS,SAAW,UAC/D,aAAYlB,EAAAkB,EAAS,eAAT,YAAAlB,EAAuB,SAAU,EAE7C,WAAY8D,IAAS,YACT5C,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,sCAClEA,EAAS,SAAW,aAAeA,EAAS,SAAW,UAAY,qCACnEA,EAAS,SAAW,SAAW,qCAC/B,kCACD4C,IAAS,iBACR5C,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,gDAClEA,EAAS,SAAW,aAAeA,EAAS,SAAW,WAAa,qCACpEA,EAAS,SAAW,cAAgB,0CACpC,0CACAA,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,wCAClEA,EAAS,SAAW,aAAeA,EAAS,SAAW,UAAY,uCACnE,yCACZ,cAAe,YAAY4C,CAAI,gBAC/B,eAAgB,0BAChB,OAAQ,YACR,YAAaA,IAAS,YACT5C,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,2CAClEA,EAAS,SAAW,aAAeA,EAAS,SAAW,UAAY,oCACnE,iCACD4C,IAAS,iBACR5C,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,2DAClEA,EAAS,SAAW,aAAeA,EAAS,SAAW,WAAa,4BACpE,2CACAA,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,kDAClE,0CACb,eAAgB4C,IAAS,iBAAmB,GAAK,GACjD,cAAe,GACf,UAAWA,IAAS,YAAc,CAAC,QAAS,OAAQ,MAAM,EAChDA,IAAS,iBAAmB,CAAC,YAAa,YAAY,EACtD,CAAC,SAAU,QAAS,aAAc,QAAQ,EACpD,eAAgB,qCAChB,WAAY,CACV,oBAAqB,YAAYA,CAAI,QACrC,sBAAuB,yBACvB,aAAc,sCACd,WAAY,CAAC,GAAGA,CAAI,oBAAqB,GAAGA,CAAI,oBAAqB,GAAGA,CAAI,sBAAsB,CACpG,EACA,aAAc,CACZ,SAAU,wBACV,gBAAiB,CAAC,MAAMA,CAAI,IAAI5C,EAAS,OAAO,YAAa,CAAA,EAAE,EAC/D,aAAc4C,IAAS,aAAe,CAAC,mCAAoC,gBAAgB,EAAI,CAAC,EAChG,mBAAoB,CAAC,wBAAyB,eAAgB,yBAAyB,CACzF,EAEA,eAAiBA,IAAS,YACV5C,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,YAClEA,EAAS,SAAW,aAAeA,EAAS,SAAW,UAAY,QACnE,SACD4C,IAAS,iBACR5C,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,cAClEA,EAAS,SAAW,aAAeA,EAAS,SAAW,WAAa,QACpE,SACD,YACf,iBAAkB4C,IAAS,YACT5C,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,sCAClEA,EAAS,SAAW,aAAeA,EAAS,SAAW,UAAY,mCACnE,oCACD4C,IAAS,iBACR5C,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,6CAClEA,EAAS,SAAW,aAAeA,EAAS,SAAW,WAAa,+BACpE,wCACD,gCACjB,eAAgB4C,IAAS,aAAe,CAAC,YAAa,UAAW,WAAY,OAAO,EAAE,SAAS5C,EAAS,MAAM,EAC/F,mBACA4C,IAAS,kBAAoB,CAAC,YAAa,WAAY,YAAY,EAAE,SAAS5C,EAAS,MAAM,EAC7F,8BACA,kBACf,iBAAkB,CAAC,WAAY,UAAW,aAAa,EAAE,SAASA,EAAS,MAAM,EAC/D4C,IAAS,YAAc,eACvBA,IAAS,iBAAmB,cAC5B,cACD,cACjB,WAAYA,IAAS,YACT5C,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,CAAC,OAAQ,MAAM,EACjFA,EAAS,SAAW,aAAeA,EAAS,SAAW,UAAY,CAAC,OAAQ,KAAK,EACjF,CAAC,OAAQ,KAAK,EACf4C,IAAS,iBACR5C,EAAS,SAAW,YAAcA,EAAS,SAAW,UAAY,CAAC,UAAW,OAAO,EACrF,CAAC,UAAW,MAAO,OAAO,EAC3B,CAAC,OAAQ,SAAS,EAC7B,gBAAiB4C,IAAS,YAAc,SACxBA,IAAS,iBAAmB,OAC5B,MAChB,WAAY,CACV,OAAQ,KAAK,IAAI,GAAI,IAAMjB,EAAa,GAAG3B,EAAS,EAAE,SAAS,EAAI,CAAC,EACpE,aAAc4C,IAAS,YAAc,MAAQ,KAC7C,KAAM,KAAK,MAAMjB,EAAa,GAAG3B,EAAS,EAAE,OAAO,EAAI,EAAE,EAAI,GAC7D,KAAM,KAAK,MAAM2B,EAAa,GAAG3B,EAAS,EAAE,OAAO,EAAI,GAAG,EAAI,EAChE,EACA,gBAAiB,CACf,MAAO4C,IAAS,YAAc,4BACvBA,IAAS,iBAAmB,2BAC5B,4BACP,eAAgB,CAAC,mBAAoB,kBAAmB,YAAa,oBAAoB,EACzF,kBAAmBA,IAAS,iBAAmB,4BAA8B,0BAC7E,iBAAmBA,IAAS,YAAc,OAASA,IAAS,iBAAmB,WAAa,SAC5F,mBAAoB,WACpB,uBAAwB,CAAC,OAAQ,YAAa,OAAO,CACvD,EACA,mBAAoB,CAClB,WAAYA,IAAS,YAAc,KAAK,MAAMjB,EAAa,GAAG3B,EAAS,EAAE,OAAO,EAAI,GAAG,EAAI,GAChF4C,IAAS,iBAAmB,KAAK,MAAMjB,EAAa,GAAG3B,EAAS,EAAE,OAAO,EAAI,GAAG,EAAI,IACpF,KAAK,MAAM2B,EAAa,GAAG3B,EAAS,EAAE,OAAO,EAAI,GAAG,EAAI,IACnE,WAAY4C,IAAS,YAAc,KAAK,MAAMjB,EAAa,GAAG3B,EAAS,EAAE,QAAQ,EAAI,GAAG,EAAI,GACjF4C,IAAS,iBAAmB,KAAK,MAAMjB,EAAa,GAAG3B,EAAS,EAAE,QAAQ,EAAI,GAAG,EAAI,IACrF,KAAK,MAAM2B,EAAa,GAAG3B,EAAS,EAAE,QAAQ,EAAI,GAAI,EAAI,IACrE,UAAW,KAAK,MAAM2B,EAAa,GAAG3B,EAAS,EAAE,SAAS,EAAI,IAAM,GAAG,EAAI,IAC3E,eAAgB,KAAK,MAAM2B,EAAa,GAAG3B,EAAS,EAAE,aAAa,EAAI,GAAG,EAAI,GAC9E,eAAgB,KAAK,MAAM2B,EAAa,GAAG3B,EAAS,EAAE,MAAM,EAAI,EAAE,EAAI,GACtE,kBAAmB,KAAK,MAAM2B,EAAa,GAAG3B,EAAS,EAAE,SAAS,EAAI,EAAE,EAAI,EAC9E,EACA,gBAAiB,CACf,aAAc,CACZ,GAAG4C,CAAI,2BACP,+BACA,gCACA,mCACF,EACA,YAAa,CACX,+BAA+BA,CAAI,4BACnC,8BAA8BA,CAAI,qBACpC,EACA,gBAAiB,CACf,GAAGA,EAAK,OAAO,CAAC,EAAE,cAAgBA,EAAK,MAAM,CAAC,CAAC,uEAC/C,GAAGA,EAAK,OAAO,CAAC,EAAE,YAAgB,EAAAA,EAAK,MAAM,CAAC,CAAC,wEACjD,EACA,qBAAsB,CACpB,qDAAqDA,CAAI,GACzD,iBAAiBA,CAAI,2BAAA,CACvB,CACF,EACA,EAEFX,EAAM,KAAK,GAAGe,CAAS,CAAA,CACxB,EAGD,MAAMC,EAAe,CACnB,CAAE,KAAM,kBAAmB,MAAO,CAAC,UAAW,SAAS,EAAG,SAAU,CAAE,EACtE,CAAE,KAAM,yBAA0B,MAAO,CAAC,SAAU,OAAO,EAAG,SAAU,CAAE,EAC1E,CAAE,KAAM,2BAA4B,MAAO,CAAC,YAAa,IAAI,EAAG,SAAU,CAAE,EAC5E,CAAE,KAAM,eAAgB,MAAO,CAAC,WAAY,QAAQ,EAAG,SAAU,CAAE,EACnE,CAAE,KAAM,mBAAoB,MAAO,CAAC,KAAM,UAAU,EAAG,SAAU,CAAE,EACnE,CAAE,KAAM,qBAAsB,MAAO,CAAC,aAAc,OAAO,EAAG,SAAU,CAAE,EAC1E,CAAE,KAAM,sBAAuB,MAAO,CAAC,WAAY,WAAW,EAAG,SAAU,CAAE,EAC7E,CAAE,KAAM,cAAe,MAAO,CAAC,MAAO,UAAU,EAAG,SAAU,CAAE,EAC/D,CAAE,KAAM,yBAA0B,MAAO,CAAC,QAAS,WAAW,EAAG,SAAU,CAAE,CAC/E,EAKMC,EAAqC,CACzC,GAAI,2BACJ,KAAM,mCACA,KAAM,iBACZ,EAAG,IACH,EAAG,IACH,OAAQ,UACR,iBAAkB,KAClB,kBAAmB,IACnB,YAAa,CAAC,EACd,YAAa,uFACb,WAAY,IAAI,KAAK,EAAE,YAAY,EACnC,YAAa,GACb,WAAY,0CACZ,cAAe,gCACf,eAAgB,0BAChB,OAAQ,YACR,YAAa,yCACb,eAAgB,GAChB,cAAe,EACf,UAAW,CAAC,QAAS,aAAc,KAAK,EACxC,eAAgB,uCAChB,WAAY,CACV,oBAAqB,wBACrB,sBAAuB,yBACvB,aAAc,sCACd,WAAY,CAAC,0BAA2B,iCAAkC,wBAAwB,CACpG,EACA,aAAc,CACZ,SAAU,wBACV,gBAAiB,CAAC,oBAAoB,EACtC,aAAc,CAAC,EACf,mBAAoB,CAAC,wBAAyB,uBAAuB,CACvE,EAEA,eAAgB,QAChB,iBAAkB,yCAClB,eAAgB,yCAChB,iBAAkB,yBAClB,WAAY,CAAC,UAAW,OAAQ,OAAO,EACvC,gBAAiB,0BACjB,WAAY,CACV,OAAQ,KACR,aAAc,KACd,KAAM,GACN,KAAM,GACR,EACA,gBAAiB,CACf,MAAO,2BACP,eAAgB,CAAC,mBAAoB,uBAAwB,oBAAoB,EACjF,kBAAmB,4BACnB,iBAAkB,OAClB,mBAAoB,WACpB,uBAAwB,CAAC,OAAQ,WAAW,CAC9C,EACA,mBAAoB,CAClB,WAAY,IACZ,WAAY,IACZ,UAAW,GACX,eAAgB,IAChB,eAAgB,GAChB,kBAAmB,EACrB,EACA,gBAAiB,CACf,aAAc,CACZ,gCACA,kCACA,kCACA,sCACF,EACA,YAAa,CACX,8DACA,wDACF,EACA,gBAAiB,CACf,qFACA,uFACF,EACA,qBAAsB,CACpB,oEACA,iEAAA,CAEJ,EAEA,gBAAiB,CACf,QAAS,wEACT,SAAU,mDACV,aAAc,kCACd,aAAc,8BACd,cAAe,eACf,YAAa,kCACb,iBAAkB,oCACpB,EACA,eAAgB,CACd,UAAW,4BACX,kBAAmB,gCACnB,gBAAiB,wBACjB,iBAAkB,MAClB,cAAe,mCAAA,CAEnB,EAEaD,EAAA,QAAQ,CAAChD,EAAMxB,IAAU,CACpC,MAAM4D,EAAaV,EAAa,GAAG1B,EAAK,IAAI,SAAS,EAC/CqC,EAAkC,CAAC,UAAW,SAAS,EACvDC,EAASD,EAAc,KAAK,MAAMD,EAAaC,EAAc,MAAM,CAAC,EAE1EL,EAAM,KAAK,CACT,GAAI,QAAQhC,EAAK,IAAI,GACrB,KAAMA,EAAK,KACX,KAAM,cACN,EAAG,KACH,EAAG,GAAKxB,EAAQ,GAChB,OAAA8D,EACA,iBAAkB,KAAK,MAAMZ,EAAa,GAAG1B,EAAK,IAAI,UAAU,EAAI,GAAG,EAAI,GAC3E,kBAAmB,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,OAAO,EAAI,GAAG,EAAI,GACzE,YAAa,CAAC,EACd,YAAa,qBAAqBA,EAAK,IAAI,GAC3C,WAAY,IAAI,KAAK,KAAK,MAAQ0B,EAAa,GAAG1B,EAAK,IAAI,SAAS,EAAI,IAAO,EAAE,YAAY,EAC7F,YAAa,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,UAAU,EAAI,EAAE,EAAI,GACrE,iBAAkBA,EAAK,MACvB,SAAUA,EAAK,SAEf,WAAYA,EAAK,KAAK,SAAS,WAAW,EAAI,sCACnCA,EAAK,KAAK,SAAS,IAAI,GAAKA,EAAK,KAAK,SAAS,UAAU,EAAI,+BAC7DA,EAAK,KAAK,SAAS,WAAW,EAAI,qCAClCA,EAAK,KAAK,SAAS,OAAO,EAAI,iCAC9BA,EAAK,KAAK,SAAS,IAAI,EAAI,gCAC3BA,EAAK,KAAK,SAAS,YAAY,EAAI,kCACnCA,EAAK,KAAK,SAAS,WAAW,EAAI,mCAClC,6CACX,cAAe,gCACf,eAAgB,0BAChB,OAAQ,YACR,YAAaA,EAAK,KAAK,SAAS,WAAW,EAAI,oCACnCA,EAAK,KAAK,SAAS,WAAW,EAAI,kCAClCA,EAAK,KAAK,SAAS,IAAI,EAAI,8BAC3BA,EAAK,KAAK,SAAS,YAAY,EAAI,wBACnC,yBACZ,eAAgBA,EAAK,KAAK,SAAS,WAAW,EAAI,IACnCA,EAAK,KAAK,SAAS,WAAW,EAAI,IAClCA,EAAK,KAAK,SAAS,OAAO,EAAI,GAAK,GAClD,cAAeA,EAAK,KAAK,SAAS,YAAY,EAAI,KACpCA,EAAK,KAAK,SAAS,SAAS,EAAI,IAChCA,EAAK,KAAK,SAAS,IAAI,EAAI,IAC3B,GACd,UAAWA,EAAK,KAAK,SAAS,WAAW,EAAI,CAAC,QAAS,WAAY,MAAM,EAC/DA,EAAK,KAAK,SAAS,IAAI,EAAI,CAAC,MAAO,QAAS,MAAM,EAClDA,EAAK,KAAK,SAAS,OAAO,EAAI,CAAC,QAAS,OAAQ,aAAa,EAC7DA,EAAK,KAAK,SAAS,KAAK,EAAI,CAAC,QAAS,YAAa,SAAS,EAC5D,CAAC,QAAS,YAAa,UAAU,EAC3C,eAAgBA,EAAK,KAAK,SAAS,WAAW,EAAI,iCACnCA,EAAK,KAAK,SAAS,IAAI,EAAI,wCAC3BA,EAAK,KAAK,SAAS,IAAI,EAAI,oCAC3B,+BACf,WAAY,CACV,oBAAqB,6BACrB,sBAAuB,yBACvB,aAAc,sCACd,WAAY,CAAC,GAAGA,EAAK,KAAK,QAAQ,OAAQ,GAAG,EAAE,YAAa,CAAA,YAChD,GAAGA,EAAK,KAAK,QAAQ,OAAQ,GAAG,EAAE,YAAa,CAAA,WAC/C,GAAGA,EAAK,KAAK,QAAQ,OAAQ,GAAG,EAAE,aAAa,eAAA,CAC7D,EACA,aAAc,CACZ,SAAU,wBACV,gBAAiB,CAAC,MAAMA,EAAK,KAAK,QAAQ,OAAQ,GAAG,EAAE,YAAY,CAAC,EAAE,EACtE,aAAcA,EAAK,KAAK,SAAS,KAAK,EAAI,CAAC,4BAA4B,EAAI,CAAC,EAC5E,mBAAoB,CAAC,oBAAqB,mBAAoB,mBAAmB,CACnF,EAEA,WAAY,CACV,OAAQ,KAAK,IAAI,GAAI,IAAM0B,EAAa,GAAG1B,EAAK,IAAI,SAAS,EAAI,CAAC,EAClE,aAAcA,EAAK,KAAK,SAAS,WAAW,GAAKA,EAAK,KAAK,SAAS,OAAO,EAAI,MAAQ,KACvF,KAAM,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,OAAO,EAAI,EAAE,EAAI,EAC3D,KAAM,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,OAAO,EAAI,GAAG,EAAI,GAC9D,EACA,gBAAiB,CACf,MAAOA,EAAK,KAAK,SAAS,WAAW,GAAKA,EAAK,KAAK,SAAS,WAAW,EAAI,2BACrEA,EAAK,KAAK,SAAS,OAAO,GAAKA,EAAK,KAAK,SAAS,WAAW,EAAI,wBACjEA,EAAK,KAAK,SAAS,IAAI,EAAI,4BAC3BA,EAAK,KAAK,SAAS,YAAY,EAAI,wBACnC,4BACP,eAAgB,CAAC,mBAAoB,kBAAmB,YAAa,qBAAqB,EAC1F,kBAAmBA,EAAK,KAAK,SAAS,OAAO,EAAI,yBAA2B,0BAC5E,iBAAmBA,EAAK,KAAK,SAAS,OAAO,GAAKA,EAAK,KAAK,SAAS,WAAW,EAAI,WACnEA,EAAK,KAAK,SAAS,WAAW,GAAKA,EAAK,KAAK,SAAS,WAAW,EAAI,OACrE,SACjB,mBAAqBA,EAAK,KAAK,SAAS,YAAY,EAAI,eAAiB,WACzE,uBAAwBA,EAAK,KAAK,SAAS,YAAY,EACrD,CAAC,OAAQ,MAAO,YAAa,UAAW,OAAO,EAC/C,CAAC,OAAQ,YAAa,OAAO,CACjC,EACA,mBAAoB,CAClB,WAAYA,EAAK,KAAK,SAAS,WAAW,EAAI,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,OAAO,EAAI,EAAE,EAAI,GACxFA,EAAK,KAAK,SAAS,OAAO,EAAI,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,OAAO,EAAI,GAAG,EAAI,GACpFA,EAAK,KAAK,SAAS,WAAW,EAAI,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,OAAO,EAAI,GAAG,EAAI,IACxF,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,OAAO,EAAI,GAAG,EAAI,GACjE,WAAYA,EAAK,KAAK,SAAS,WAAW,EAAI,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,QAAQ,EAAI,GAAG,EAAI,GAC1FA,EAAK,KAAK,SAAS,OAAO,EAAI,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,QAAQ,EAAI,GAAG,EAAI,IACrFA,EAAK,KAAK,SAAS,WAAW,EAAI,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,QAAQ,EAAI,GAAG,EAAI,IACzF,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,QAAQ,EAAI,GAAG,EAAI,IAClE,UAAW,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,SAAS,EAAI,EAAI,GAAG,EAAI,IACvE,eAAgBA,EAAK,KAAK,SAAS,WAAW,EAAI,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,WAAW,EAAI,GAAG,EAAI,IAC7FA,EAAK,KAAK,SAAS,WAAW,EAAI,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,WAAW,EAAI,GAAG,EAAI,GAC5F,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,WAAW,EAAI,GAAG,EAAI,GACzE,eAAgB,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,MAAM,EAAI,EAAE,EAAI,GACpE,kBAAmB,KAAK,MAAM0B,EAAa,GAAG1B,EAAK,IAAI,SAAS,EAAI,EAAE,EAAI,EAC5E,EACA,gBAAiB,CACf,aAAc,CACZ,GAAGA,EAAK,IAAI,uBACZ,iCACA,6BACA,2BACF,EACA,YAAa,CACX,+BAA+BA,EAAK,KAAK,QAAQ,OAAQ,GAAG,EAAE,YAAa,CAAA,eAC3E,sCAAsCA,EAAK,KAAK,QAAQ,OAAQ,GAAG,EAAE,aAAa,cACpF,EACA,gBAAiB,CACf,GAAGA,EAAK,KAAK,QAAQ,OAAQ,EAAE,CAAC,mEAChC,GAAGA,EAAK,KAAK,QAAQ,OAAQ,EAAE,CAAC,sEAClC,EACA,qBAAsB,CACpB,qDAAqDA,EAAK,KAAK,QAAQ,OAAQ,GAAG,EAAE,aAAa,GACjG,kDAAkDA,EAAK,KAAK,QAAQ,OAAQ,GAAG,EAAE,aAAa,EAAA,CAElG,EAEA,eAAgBA,EAAK,KAAK,SAAS,WAAW,GAAKA,EAAK,KAAK,SAAS,OAAO,EAAI,YAA6B,QAC9G,iBAAkBA,EAAK,KAAK,SAAS,WAAW,EAAI,+BACnCA,EAAK,KAAK,SAAS,WAAW,EAAI,sCAClCA,EAAK,KAAK,SAAS,OAAO,EAAI,iCAC9BA,EAAK,KAAK,SAAS,IAAI,EAAI,8BAC3BA,EAAK,KAAK,SAAS,KAAK,EAAI,6CAC5B,gCACjB,eAAgBA,EAAK,KAAK,SAAS,WAAW,GAAKA,EAAK,KAAK,SAAS,OAAO,EAC9D,kBACAA,EAAK,KAAK,SAAS,YAAY,EAAI,qBACnC,8BACf,iBAAkBA,EAAK,KAAK,SAAS,WAAW,GAAKA,EAAK,KAAK,SAAS,OAAO,EAC9D,cAAgB,cACjC,WAAYA,EAAK,KAAK,SAAS,WAAW,EAAI,CAAC,UAAW,QAAS,MAAM,EAC9DA,EAAK,KAAK,SAAS,WAAW,EAAI,CAAC,UAAW,MAAO,aAAa,EAClEA,EAAK,KAAK,SAAS,IAAI,EAAI,CAAC,UAAW,MAAO,MAAM,EACpD,CAAC,OAAQ,MAAM,EAC1B,gBAAiBA,EAAK,KAAK,SAAS,WAAW,EAAI,SACnCA,EAAK,KAAK,SAAS,WAAW,EAAI,OAClC,KAAA,CACjB,CAAA,CACF,EAGDgC,EAAM,KAAKiB,CAAqB,EAGhCjB,EAAM,KAAK,CACT,GAAI,sBACJ,KAAM,4BACN,KAAM,SACN,OAAQ,UACF,EAAG,GACT,EAAG,IACH,OAAQ,UACR,iBAAkB,KAClB,kBAAmB,IACnB,YAAa,CAAC,EACd,YAAa,oDACb,WAAY,IAAI,KAAK,EAAE,YAAY,EACnC,YAAa,GACb,WAAY,+BACZ,cAAe,iCACf,eAAgB,0BAChB,OAAQ,YACR,gBAAiB,GACjB,eAAgB,IAChB,cAAe,GACf,UAAW,CAAC,QAAS,OAAQ,UAAU,EACvC,eAAgB,0BAChB,WAAY,CACV,oBAAqB,yBACrB,sBAAuB,yBACvB,aAAc,sCACd,WAAY,CAAC,4BAA6B,yBAA0B,0BAA0B,CAChG,EACA,aAAc,CACZ,SAAU,wBACV,gBAAiB,CAAC,wBAAwB,EAC1C,aAAc,CAAC,EACf,mBAAoB,CAAC,oBAAqB,kBAAkB,CAC9D,EACA,WAAY,CACV,OAAQ,MACR,aAAc,MACd,KAAM,EACN,KAAM,GACR,EACA,gBAAiB,CACf,MAAO,2BACP,eAAgB,CAAC,mBAAoB,eAAgB,qBAAsB,qBAAqB,EAChG,kBAAmB,0BACnB,iBAAkB,WAClB,mBAAoB,WACpB,uBAAwB,CAAC,OAAQ,YAAa,OAAO,CACvD,EACA,mBAAoB,CAClB,WAAY,GACZ,WAAY,IACZ,UAAW,IACX,eAAgB,IAChB,eAAgB,GAChB,kBAAmB,EACrB,EACA,gBAAiB,CACf,aAAc,CACZ,wCACA,6BACA,+BACA,iCACF,EACA,YAAa,CACX,2DACA,0DACF,EACA,gBAAiB,CACf,mFACA,0EACF,EACA,qBAAsB,CACpB,iEACA,mEAAA,CAEJ,EACA,eAAgB,KAChB,UAAW,GACX,WAAY,EAEZ,eAAgB,QAChB,iBAAkB,8CAClB,eAAgB,2CAChB,iBAAkB,6BAClB,WAAY,CAAC,UAAW,OAAQ,MAAM,EACtC,gBAAiB,8BAAA,CAClB,EAGDA,EAAM,QAAgBkB,GAAA,CAChB,GAAAA,EAAK,OAAS,SAEOlB,EAAM,OAAYmB,GAAAA,EAAE,OAAS,aAAeA,EAAE,SAAWD,EAAK,MAAM,EAC5E,QAAyBE,GAAA,CACtC,MAAMC,EAAe,GAAGH,EAAK,EAAE,IAAIE,EAAc,EAAE,GAC7CE,EAAa5B,EAAa,GAAG2B,CAAY,SAAS,EAClDE,EAA+C,CAAC,MAAO,SAAU,MAAM,EACvEC,EAASD,EAAc,KAAK,MAAMD,EAAaC,EAAc,MAAM,CAAC,EAE1EtB,EAAY,KAAK,CACf,GAAIoB,EACJ,KAAMH,EAAK,GACX,GAAIE,EAAc,GAClB,OAAAI,EACA,OAAQN,EAAK,SAAW,SAAW,QAAUA,EAAK,SAAW,UAAY,UAAY,UACrF,SAAUA,EAAK,SAAW,QAAA,CAC3B,EACIA,EAAA,YAAY,KAAKE,EAAc,EAAE,EACxBA,EAAA,YAAY,KAAKF,EAAK,EAAE,CAAA,CACvC,UACQA,EAAK,OAAS,YAAa,CAE9B,MAAAO,EAAazB,EAAM,KAAUmB,GAAAA,EAAE,OAAS,UAAYA,EAAE,SAAWD,EAAK,MAAM,GAC9EO,GAAA,YAAAA,EAAY,UAAW,UACGzB,EAAM,OAAOmB,GAAKA,EAAE,OAAS,kBAAoBA,EAAE,SAAWD,EAAK,MAAM,EAAE,MAAM,EAAG,CAAC,EAC7F,QAAyBQ,GAAA,CAC3C,MAAML,EAAe,GAAGH,EAAK,EAAE,IAAIQ,EAAc,EAAE,GAC7CJ,EAAa5B,EAAa,GAAG2B,CAAY,SAAS,EAClDE,EAAuC,CAAC,SAAU,MAAM,EACxDC,EAASD,EAAc,KAAK,MAAMD,EAAaC,EAAc,MAAM,CAAC,EAE1EtB,EAAY,KAAK,CACf,GAAIoB,EACJ,KAAMH,EAAK,GACX,GAAIQ,EAAc,GAClB,OAAAF,EACA,OAAQN,EAAK,SAAW,SAAW,QAAUA,EAAK,SAAW,UAAY,UAAY,UACrF,SAAUA,EAAK,SAAW,QAAA,CAC3B,EACIA,EAAA,YAAY,KAAKQ,EAAc,EAAE,EACxBA,EAAA,YAAY,KAAKR,EAAK,EAAE,CAAA,CACvC,CACH,SACSA,EAAK,OAAS,iBAAkB,CAEnC,MAAAE,EAAgBpB,EAAM,KAAUmB,GAAAA,EAAE,OAAS,aAAeA,EAAE,SAAWD,EAAK,MAAM,EAClFO,EAAazB,EAAM,KAAUmB,GAAAA,EAAE,OAAS,UAAYA,EAAE,SAAWD,EAAK,MAAM,GAC9EO,GAAA,YAAAA,EAAY,UAAW,WAAYL,GAAA,YAAAA,EAAe,UAAW,UACvCpB,EAAM,OAAOmB,GAAKA,EAAE,OAAS,cAAgBA,EAAE,SAAWD,EAAK,MAAM,EAAE,MAAM,EAAG,CAAC,EACzF,QAAsBS,GAAA,CACpC,MAAMN,EAAe,GAAGH,EAAK,EAAE,IAAIS,EAAW,EAAE,GAChD1B,EAAY,KAAK,CACf,GAAIoB,EACJ,KAAMH,EAAK,GACX,GAAIS,EAAW,GACf,OAAQ,OACR,OAAQT,EAAK,SAAW,SAAW,QAAUA,EAAK,SAAW,UAAY,UAAY,UACrF,SAAUA,EAAK,SAAW,QAAA,CAC3B,EACIA,EAAA,YAAY,KAAKS,EAAW,EAAE,EACxBA,EAAA,YAAY,KAAKT,EAAK,EAAE,CAAA,CACpC,CACH,SACSA,EAAK,OAAS,aAAc,CAE/B,MAAAO,EAAazB,EAAM,KAAUmB,GAAAA,EAAE,OAAS,UAAYA,EAAE,SAAWD,EAAK,MAAM,EAC5EE,EAAgBpB,EAAM,KAAUmB,GAAAA,EAAE,OAAS,aAAeA,EAAE,SAAWD,EAAK,MAAM,EAClFU,EAAqB5B,EAAM,KAAUmB,GAAAA,EAAE,OAAS,kBAAoBA,EAAE,SAAWD,EAAK,MAAM,EAG9F,IAAAO,GAAA,YAAAA,EAAY,UAAW,WAAYL,GAAA,YAAAA,EAAe,UAAW,WAAYQ,GAAA,YAAAA,EAAoB,UAAW,SAAU,CAe9G,MAAAC,EAbsB,CAC1B,SAAY,CAAC,yBAA0B,kBAAmB,kBAAkB,EAC5E,QAAW,CAAC,sBAAuB,eAAgB,0BAA0B,EAC7E,UAAa,CAAC,qBAAsB,2BAA4B,cAAc,EAC9E,QAAW,CAAC,2BAA4B,eAAgB,wBAAwB,EAChF,OAAU,CAAC,yBAA0B,2BAA4B,aAAa,EAC9E,YAAe,CAAC,eAAgB,yBAA0B,qBAAqB,EAC/E,SAAY,CAAC,qBAAsB,2BAA4B,cAAc,EAC7E,MAAS,CAAC,qBAAsB,sBAAuB,0BAA0B,EACjF,WAAc,CAAC,qBAAsB,kBAAmB,0BAA0B,EAClF,QAAW,CAAC,sBAAuB,2BAA4B,aAAa,CAC9E,EAE+CX,EAAK,MAA0C,GACrE,CAAC,kBAAmB,2BAA4B,cAAc,EAErElB,EAAM,UACtBmB,EAAE,OAAS,eAAiBU,EAAmB,SAASV,EAAE,IAAI,CAChE,EAEU,QAAoBW,GAAA,CAC5B,MAAMT,GAAe,GAAGH,EAAK,EAAE,IAAIY,EAAS,EAAE,GAC9C7B,EAAY,KAAK,CACf,GAAIoB,GACJ,KAAMH,EAAK,GACX,GAAIY,EAAS,GACb,OAAQ,OACR,OAAQZ,EAAK,SAAW,SAAW,QAAUA,EAAK,SAAW,UAAY,UAAY,UACrF,SAAUA,EAAK,SAAW,QAAA,CAC3B,EACIA,EAAA,YAAY,KAAKY,EAAS,EAAE,EACxBA,EAAA,YAAY,KAAKZ,EAAK,EAAE,CAAA,CAClC,CAAA,CACH,CACF,CACD,EAGD,MAAMa,EAAgB/B,EAAM,KAAUmB,GAAAA,EAAE,KAAO,qBAAqB,EAC9Da,EAAkBhC,EAAM,KAAUmB,GAAAA,EAAE,KAAO,0BAA0B,EACrEc,EAAmBjC,EAAM,KAAUmB,GAAAA,EAAE,OAAS,wBAAwB,EAExE,OAAAY,GAAiBC,GAAmBC,IAEtChC,EAAY,KAAK,CACf,GAAI,qBACJ,KAAM8B,EAAc,GACpB,GAAIC,EAAgB,GACpB,OAAQ,OACR,OAAQ,UACR,SAAU,EAAA,CACX,EACaD,EAAA,YAAY,KAAKC,EAAgB,EAAE,EACjCA,EAAA,YAAY,KAAKD,EAAc,EAAE,EAGjD9B,EAAY,KAAK,CACf,GAAI,mBACJ,KAAM+B,EAAgB,GACtB,GAAIC,EAAiB,GACrB,OAAQ,SACR,OAAQ,UACR,SAAU,EAAA,CACX,EACeD,EAAA,YAAY,KAAKC,EAAiB,EAAE,EACnCA,EAAA,YAAY,KAAKD,EAAgB,EAAE,GAG/C,CAAE,MAAAhC,EAAO,YAAAC,CAAY,CAC9B,EAGM,CAAE,MAAOiC,EAAU,YAAaC,CAAe,EAAIC,EAAAA,QAAQ,IAAM,CACrE,MAAMC,EAAStC,EAAoB,EAC7BuC,EAAkBD,EAAO,MAAM,OAAOlB,GAAKA,EAAE,SAAS,EAC5D,eAAQ,IAAI,mBAAoB,CAC9B,MAAOkB,EAAO,MAAM,OACpB,WAAYC,EAAgB,OAC5B,WAAYA,EAAgB,IAAUnB,IAAA,CAAE,GAAIA,EAAE,GAAI,KAAMA,EAAE,KAAM,OAAQA,EAAE,OAAQ,WAAYA,EAAE,YAAa,CAAA,CAC9G,EACMkB,CACT,EAAG,EAAE,EAGCE,EAAsBH,EAAAA,QAAQ,IAC9B9D,IAAmB,MACd6D,EAIFA,EAAe,OAAeK,GAAA,CACnC,MAAMC,EAAWP,EAAS,QAAUf,EAAE,KAAOqB,EAAK,IAAI,EAChDE,EAASR,EAAS,QAAUf,EAAE,KAAOqB,EAAK,EAAE,EAGlD,OAAIC,GAAA,YAAAA,EAAU,UAAWnE,IAAkBoE,GAAA,YAAAA,EAAQ,UAAWpE,EACrD,IAILoE,GAAA,YAAAA,EAAQ,QAAS,cAGWP,EAAe,OAC3CQ,GAAA,OAAA,OAAAA,EAAE,KAAOD,EAAO,MAAM7F,EAAAqF,EAAS,KAAKf,GAAKA,EAAE,KAAOwB,EAAE,IAAI,IAAlC,YAAA9F,EAAqC,QAAS,aACtE,EAE6B,KAAmB+F,GAAA,CAC9C,MAAMjB,EAAaO,EAAS,QAAUf,EAAE,KAAOyB,EAAW,IAAI,EAC9D,OAAOjB,GAAA,YAAAA,EAAY,UAAWrD,CAAA,CAC/B,EAGI,EAAA,CACR,EACA,CAAC4D,EAAUC,EAAgB7D,CAAc,CAAC,EAGvC0B,EAAQkC,EACRjC,EAAcsC,EAGpBM,EAAAA,UAAU,IAAM,CACdhE,EAAmB,CAAA,CAAE,EACrBJ,EAAgB,IAAI,CAAA,EACnB,CAACH,CAAc,CAAC,EAGnBuE,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAe,IAAM,CACzB,GAAI5D,GAAiBV,EAAc,CAKjC,IAAIoC,EAAIxB,EAAc,EAClB2D,EAAI3D,EAAc,EAGlBwB,EAAI,IAAa,OAAO,WAAa,KACnCA,EAAA,OAAO,WAAa,IAAa,IAInCmC,EAAI,IAAc,OAAO,YAAc,KACrCA,EAAA,OAAO,YAAc,IAAc,IAIrCnC,EAAI,KAAQA,EAAA,IACZmC,EAAI,KAAQA,EAAA,IAEC1D,EAAA,CAAE,EAAAuB,EAAG,EAAAmC,EAAG,CAAA,CAE7B,EAEO,cAAA,iBAAiB,SAAUD,CAAY,EACvC,IAAM,OAAO,oBAAoB,SAAUA,CAAY,CAC7D,EAAA,CAAC5D,EAAeV,EAAcY,CAAa,CAAC,EAG/C,MAAM4D,EAAgBhD,EAAM,UAC1BkB,EAAK,KAAK,cAAc,SAAS9C,EAAW,YAAa,CAAA,GACxD8C,EAAK,QAAUA,EAAK,OAAO,YAAA,EAAc,SAAS9C,EAAW,YAAa,CAAA,CAC7E,EAGM6E,GAAiBC,GAAmB,CAClC,MAAAC,MAAc,IACdC,EAAiB,CAAC,EAElBC,EAAYC,GAAsB,CAClC,GAAAH,EAAQ,IAAIG,CAAS,EAAG,OAC5BH,EAAQ,IAAIG,CAAS,EACrBF,EAAK,KAAKE,CAAS,EAEnB,MAAMpC,EAAOlB,EAAM,KAAUmB,GAAAA,EAAE,KAAOmC,CAAS,EAC3CpC,GACGA,EAAA,YAAY,QAAuBqC,GAAA,CACjCJ,EAAQ,IAAII,CAAW,GAC1BF,EAASE,CAAW,CACtB,CACD,CAEL,EAEAF,EAASH,CAAM,EACfrE,EAAmBuE,CAAI,CACzB,EAEMI,GAAkB,CAACtC,EAAmBuC,IAA4B,CAEtElE,EAAiB,EAAK,EAGtB,MAAMmE,EAAa,IACbC,EAAc,IAGdC,EAASH,EAAM,QACfI,EAASJ,EAAM,QAGrB,IAAI7C,EAAIgD,EAAS,GACbb,EAAIc,EAAS,GAGbjD,EAAI8C,EAAa,OAAO,WAAa,KACvC9C,EAAIgD,EAASF,EAAa,IAIxBX,EAAIY,EAAc,OAAO,YAAc,KACzCZ,EAAIc,EAASF,EAAc,IAIzB/C,EAAI,KACFA,EAAA,IAIFmC,EAAI,KACFA,EAAA,IAIFW,EAAa,OAAO,WAAa,KAC/B9C,EAAA,IAEF+C,EAAc,OAAO,YAAc,KACjCZ,EAAA,IAGW1D,EAAA,CAAE,EAAAuB,EAAG,EAAAmC,EAAG,EAGzBtE,EAAgByC,CAAI,EACpB/B,EAAiB,EAAI,EAGjB+B,EAAK,OAAS,UAAYA,EAAK,QACjC3C,EAAkB2C,EAAK,MAAM,EAE7BrC,EAAmB,CAAA,CAAE,GAGrBoE,GAAc/B,EAAK,EAAE,CAEzB,EAGM4C,GAAuB,IAAM,CACjC,MAAMC,EAAc,CAACzE,EAGrB,GAFAC,EAAiBwE,CAAW,EAExB,CAACvF,EAAc,OAGb,MAAAkF,EAAaK,EAAc,IAAM,IACjCJ,EAAcI,EAAc,IAAM,IAExC,IAAInD,EAAIxB,EAAc,EAClB2D,EAAI3D,EAAc,EAGlBwB,EAAI8C,EAAa,OAAO,WAAa,KACnC9C,EAAA,OAAO,WAAa8C,EAAa,IAInCX,EAAIY,EAAc,OAAO,YAAc,KACrCZ,EAAA,OAAO,YAAcY,EAAc,IAIrC/C,EAAI,KACFA,EAAA,IAIFmC,EAAI,KACFA,EAAA,IAGW1D,EAAA,CAAE,EAAAuB,EAAG,EAAAmC,EAAG,CAC3B,EAEMiB,GAAyB9C,GAAsB,CACnD,QAAQ,IAAI,uBAAwB,CAClC,GAAIA,EAAK,GACT,KAAMA,EAAK,KACX,OAAQA,EAAK,OACb,UAAWA,EAAK,UAChB,WAAYA,EAAK,WACjB,gBAAiB,CAAC,CAACA,EAAK,aACxB,iBAAkBA,EAAK,aAAe,OAAO,KAAKA,EAAK,YAAY,EAAI,CAAA,CAAC,CACzE,GAGIA,EAAK,SAAW,UAAYA,EAAK,SAAW,YAAcA,EAAK,cAC1D,QAAA,IAAI,gCAAiCA,EAAK,IAAI,EACtDzC,EAAgByC,CAAI,EACpBnC,EAAkB,EAAI,GAEtB,QAAQ,IAAI,wCAAwC,CAExD,EAEMkF,GAAgB/C,GAAsB,CAEtC,GAAAtC,EAAgB,OAAS,GAAK,CAACA,EAAgB,SAASsC,EAAK,EAAE,EAC1D,MAAA,OAIT,GAAI5C,IAAmB,MAAO,CAE5B,GAAI4C,EAAK,OAAS,UAAYA,EAAK,SAAW5C,EACrC,MAAA,UAGT,GAAI4C,EAAK,OAAS,UAAYA,EAAK,SAAW5C,EACrC,MAAA,OAGT,GAAI4C,EAAK,OAAS,UAAYA,EAAK,OAAS,cACtC,GAAAA,EAAK,SAAW5C,EAElB,OAAQ4C,EAAK,KAAM,CACjB,IAAK,YAAoB,MAAA,UACzB,IAAK,iBAAyB,MAAA,UAC9B,IAAK,aAAqB,MAAA,UAC1B,QAAgB,MAAA,MAAA,KAGX,OAAA,OAIP,GAAAA,EAAK,OAAS,cAEhB,OADuBjB,EAAY,QAAauC,EAAK,KAAOtB,EAAK,EAAE,EAC3C,UAAY,MACtC,CAIF,OAAQA,EAAK,KAAM,CACjB,IAAK,SAAiB,MAAA,UACtB,IAAK,YAAoB,MAAA,UACzB,IAAK,iBAAyB,MAAA,UAC9B,IAAK,aAAqB,MAAA,UAC1B,IAAK,cAAsB,MAAA,UAC3B,QAAgB,MAAA,MAAA,CAEpB,EAEMgD,GAAsBC,GAA+B,CACnD,MAAAC,EAAgBxF,EAAgB,SAASuF,EAAW,IAAI,GAAKvF,EAAgB,SAASuF,EAAW,EAAE,EAalG,MAXW,CAChB,YAAaA,EAAW,SAAW,OAAS,IAAMA,EAAW,SAAW,SAAW,IAAM,IACzF,OAAQA,EAAW,SAAW,QAAU,UAChCA,EAAW,SAAW,UAAY,UAAY,UACtD,QAASvF,EAAgB,OAAS,EAAKwF,EAAgB,IAAM,MAAS,MACtE,gBAAiBD,EAAW,SAAW,MAAQ,MAAQ,OACvD,UAAWA,EAAW,SAAW,QAAU,wBAChCA,EAAW,SAAW,UAAY,0BAClC,yBACb,CAGF,EAEME,GAAiB/D,GAA2B,CAChD,OAAQA,EAAQ,CACd,IAAK,UAAW,aAAQ7D,GAAY,CAAA,KAAM,GAAI,UAAWjB,EAAO,cAAe,EAC/E,IAAK,UAAW,aAAQI,EAAc,CAAA,KAAM,GAAI,UAAWJ,EAAO,cAAe,EACjF,IAAK,SAAU,aAAQS,GAAQ,CAAA,KAAM,GAAI,UAAWT,EAAO,aAAc,EACzE,IAAK,aAAc,aAAQU,EAAS,CAAA,KAAM,GAAI,UAAWV,EAAO,iBAAkB,EAClF,QAAgB,OAAA,IAAA,CAEpB,EAEM8I,GAAgB,CAAC,GAAG,IAAI,IAAI9D,GAAc,IAASC,GAAAA,EAAE,MAAM,CAAC,CAAC,EAEnE,OACG1E,EAAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAAAF,MAAC,MAAI,CAAA,UAAWE,EAAO,OACrB,SAACF,MAAA,MAAA,CAAI,UAAWE,EAAO,cACrB,SAAAO,OAAC,MAAI,CAAA,UAAWP,EAAO,aACrB,SAAA,CAACO,EAAA,KAAA,KAAA,CAAG,UAAWP,EAAO,MAAO,SAAA,CAAA,2BAE3BF,EAAA,IAAC,SAAA,CACC,UAAWE,EAAO,WAClB,QAAS,IAAMyD,EAAkB,EAAI,EACrC,MAAM,6BAEN,SAAA3D,EAAAA,IAACiJ,GAAW,CAAA,KAAM,EAAI,CAAA,CAAA,CAAA,CACxB,EACF,EACCjJ,EAAA,IAAA,IAAA,CAAE,UAAWE,EAAO,SAAU,SAA0E,4EAAA,CAAA,CAAA,CAC3G,CAAA,CACF,CAAA,EACF,EAECO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YAErB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,SACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,gBACrB,SAAA,CAACF,EAAAA,IAAAkJ,GAAA,CAAO,UAAWhJ,EAAO,UAAY,CAAA,EACtCF,EAAA,IAAC,QAAA,CACC,KAAK,OACL,YAAY,gCACZ,MAAO8C,EACP,SAAWpC,GAAMqC,EAAcrC,EAAE,OAAO,KAAK,EAC7C,UAAWR,EAAO,WAAA,CAAA,CACpB,EACF,EACAO,EAAA,KAAC,SAAA,CACC,MAAOuC,EACP,SAAWtC,GAAMuC,EAAkBvC,EAAE,OAAO,KAA+B,EAC3E,UAAWR,EAAO,aAElB,SAAA,CAACF,EAAA,IAAA,SAAA,CAAO,MAAM,MAAM,SAAW,cAAA,EAC9BgJ,GAAc,IACbnE,GAAA7E,EAAA,IAAC,UAAoB,MAAO6E,EAAS,SAAxBA,CAAA,EAAAA,CAA+B,CAC7C,CAAA,CAAA,CACH,EACA7E,EAAA,IAAC,SAAA,CACC,UAAWE,EAAO,YAClB,QAAS,IAAM,CACbiD,EAAgB,IAAI,EACpBI,EAAmB,CAAA,CAAE,EACrBN,EAAkB,KAAK,CACzB,EACD,SAAA,iBAAA,CAED,EACAjD,EAAA,IAAC,SAAA,CACC,UAAWE,EAAO,YAClB,QAAS,IAAM,CAEb,MAAMiJ,EAAYvC,EAAS,QAAUf,EAAE,WAAaA,EAAE,YAAY,EAC9DsD,GACM,QAAA,IAAI,0BAA2BA,EAAU,IAAI,EACrDhG,EAAgBgG,CAAS,EACzB1F,EAAkB,EAAI,GAEtB,QAAQ,IAAI,4BAA4B,CAE5C,EACA,MAAO,CAAE,WAAY,SAAU,EAChC,SAAA,kBAAA,CAAA,CAED,EACF,EAGCT,IAAmB,OAClBvC,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,gBACrB,SAAA,CAAAO,OAAC,OAAK,CAAA,SAAA,CAAA,0BAAuBT,EAAAA,IAAC,UAAQ,SAAegD,CAAA,CAAA,CAAA,EAAS,EAC9DhD,EAAA,IAAC,SAAA,CACC,UAAWE,EAAO,kBAClB,QAAS,IAAM+C,EAAkB,KAAK,EACtC,MAAM,mBACP,SAAA,GAAA,CAAA,CAED,EACF,EAGFjD,EAAAA,IAAC,OAAI,UAAWE,EAAO,YAErB,SAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,mBAErB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,OACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAW,GAAGE,EAAO,SAAS,IAAIA,EAAO,MAAM,EAAI,CAAA,EACxDF,EAAAA,IAAC,QAAK,SAAY,cAAA,CAAA,CAAA,EACpB,EACCS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAW,GAAGE,EAAO,SAAS,IAAIA,EAAO,SAAS,EAAI,CAAA,EAC3DF,EAAAA,IAAC,QAAK,SAAS,WAAA,CAAA,CAAA,EACjB,EACCS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAW,GAAGE,EAAO,SAAS,IAAIA,EAAO,cAAc,EAAI,CAAA,EAChEF,EAAAA,IAAC,QAAK,SAAc,gBAAA,CAAA,CAAA,EACtB,EACCS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAW,GAAGE,EAAO,SAAS,IAAIA,EAAO,UAAU,EAAI,CAAA,EAC5DF,EAAAA,IAAC,QAAK,SAAU,YAAA,CAAA,CAAA,EAClB,EACCS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAW,GAAGE,EAAO,SAAS,IAAIA,EAAO,WAAW,EAAI,CAAA,EAC7DF,EAAAA,IAAC,QAAK,SAAY,cAAA,CAAA,CAAA,EACpB,EACCA,EAAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,eAAiB,CAAA,EACvCO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAW,GAAGE,EAAO,qBAAqB,IAAIA,EAAO,SAAS,GAAI,SAAI,MAAA,CAAA,EAC3EF,EAAAA,IAAC,QAAK,SAAS,WAAA,CAAA,CAAA,EACjB,EACCS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAW,GAAGE,EAAO,qBAAqB,IAAIA,EAAO,UAAU,GAAI,SAAK,OAAA,CAAA,EAC7EF,EAAAA,IAAC,QAAK,SAAW,aAAA,CAAA,CAAA,EACnB,EACCS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAW,GAAGE,EAAO,qBAAqB,IAAIA,EAAO,KAAK,GAAI,SAAI,MAAA,CAAA,EACvEF,EAAAA,IAAC,QAAK,SAAK,OAAA,CAAA,CAAA,EACb,EACCS,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAW,GAAGE,EAAO,qBAAqB,IAAIA,EAAO,MAAM,GAAI,SAAG,KAAA,CAAA,EACvEF,EAAAA,IAAC,QAAK,SAAM,QAAA,CAAA,CAAA,CACd,CAAA,CAAA,EACF,EAGCA,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,iBACrB,SAAAO,EAAA,KAAC,MAAA,CACC,IAAKyD,EACL,UAAWhE,EAAO,WAClB,QAAQ,eACR,oBAAoB,gBAGpB,SAAA,CAAAO,OAAC,OACC,CAAA,SAAA,CAACA,EAAAA,KAAA,iBAAA,CAAe,GAAG,eAAe,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAC7D,SAAA,CAAAT,EAAA,IAAC,OAAK,CAAA,OAAO,KAAK,UAAU,yBAAyB,EACpDA,EAAA,IAAA,OAAA,CAAK,OAAO,MAAM,UAAU,yBAAyB,EACrDA,EAAA,IAAA,OAAA,CAAK,OAAO,OAAO,UAAU,yBAAyB,EACvDA,EAAA,IAAC,mBAAA,CACC,cAAc,oBACd,cAAc,MACd,KAAK,YACL,OAAO,wBACP,IAAI,KACJ,YAAY,YAAA,CAAA,CACd,EACF,EAGAA,EAAA,IAAC,SAAA,CACC,GAAG,oBACH,YAAY,IACZ,aAAa,IACb,KAAK,IACL,KAAK,IACL,OAAO,OAEP,SAACA,EAAA,IAAA,UAAA,CAAQ,OAAO,gBAAgB,KAAK,SAAU,CAAA,CAAA,CACjD,EAEAA,EAAA,IAAC,SAAA,CACC,GAAG,oBACH,YAAY,IACZ,aAAa,IACb,KAAK,IACL,KAAK,IACL,OAAO,OAEP,SAACA,EAAA,IAAA,UAAA,CAAQ,OAAO,gBAAgB,KAAK,SAAU,CAAA,CAAA,CACjD,EAEAA,EAAA,IAAC,SAAA,CACC,GAAG,kBACH,YAAY,IACZ,aAAa,IACb,KAAK,IACL,KAAK,IACL,OAAO,OAEP,SAACA,EAAA,IAAA,UAAA,CAAQ,OAAO,gBAAgB,KAAK,SAAU,CAAA,CAAA,CACjD,EAEAS,EAAAA,KAAC,SAAO,CAAA,GAAG,OACT,SAAA,CAAAT,EAAA,IAAC,iBAAe,CAAA,aAAa,IAAI,OAAO,cAAa,SACpD,UACC,CAAA,SAAA,CAACA,EAAAA,IAAA,cAAA,CAAY,GAAG,aAAa,CAAA,EAC7BA,EAAAA,IAAC,cAAY,CAAA,GAAG,eAAe,CAAA,CAAA,CACjC,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAGAA,EAAAA,IAAC,QAAK,EAAE,MAAM,EAAE,KAAK,UAAWE,EAAO,aAAc,SAAY,cAAA,CAAA,EACjEF,EAAAA,IAAC,QAAK,EAAE,MAAM,EAAE,KAAK,UAAWE,EAAO,aAAc,SAAS,WAAA,CAAA,EAC9DF,EAAAA,IAAC,QAAK,EAAE,MAAM,EAAE,KAAK,UAAWE,EAAO,aAAc,SAAc,gBAAA,CAAA,EACnEF,EAAAA,IAAC,QAAK,EAAE,OAAO,EAAE,KAAK,UAAWE,EAAO,aAAc,SAAU,YAAA,CAAA,EAChEF,EAAAA,IAAC,QAAK,EAAE,OAAO,EAAE,KAAK,UAAWE,EAAO,aAAc,SAAY,cAAA,CAAA,EAGjEyE,EACE,OAAeuC,GAAA,CACd,MAAMC,EAAWO,EAAc,QAAU7B,EAAE,KAAOqB,EAAK,IAAI,EACrDE,EAASM,EAAc,QAAU7B,EAAE,KAAOqB,EAAK,EAAE,EACvD,OAAOC,GAAYC,CAAA,CACpB,EACA,IAAKF,GAAS,CACb,MAAMC,EAAWO,EAAc,QAAU7B,EAAE,KAAOqB,EAAK,IAAI,EACrDE,EAASM,EAAc,QAAU7B,EAAE,KAAOqB,EAAK,EAAE,EACjDkC,EAAQR,GAAmB1B,CAAI,EAErC,cACG,IACC,CAAA,SAAA,CAAAlH,EAAA,IAAC,OAAA,CACC,GAAImH,EAAS,EAAI,IACjB,GAAIA,EAAS,EAAI,GACjB,GAAIC,EAAO,EAAI,GACf,GAAIA,EAAO,EAAI,GACf,OAAQgC,EAAM,OACd,YAAaA,EAAM,YACnB,QAASA,EAAM,QACf,gBAAiBA,EAAM,gBACvB,UAAWA,EAAM,UACjB,UAAWlJ,EAAO,cAAA,CACpB,EACCgH,EAAK,UACJlH,EAAA,IAAC,SAAA,CACC,EAAE,IACF,KAAMoJ,EAAM,OACZ,UAAWlJ,EAAO,QAElB,SAAAF,EAAA,IAAC,gBAAA,CACC,IAAI,KACJ,YAAY,aACZ,KAAM,IAAImH,EAAS,EAAI,GAAG,IAAIA,EAAS,EAAI,EAAE,KAAKC,EAAO,EAAI,EAAE,IAAIA,EAAO,EAAI,EAAE,EAAA,CAAA,CAClF,CAAA,CACF,CAAA,EAxBIF,EAAK,EA0Bb,CAAA,CAEH,EAGFQ,EAAc,IAAY9B,GAAA,CACzB,MAAMyD,EAAmBzD,EAAK,OAAS,UAAY5C,IAAmB,OAAS4C,EAAK,SAAW5C,EAG/F,OAAAvC,EAAA,KAAC,IAAA,CAEC,UAAWP,EAAO,UAClB,QAAUQ,GAAMwH,GAAgBtC,EAAMlF,CAAC,EACvC,cAAe,IAAMgI,GAAsB9C,CAAI,EAC/C,aAAc,IAAMvC,EAAeuC,EAAK,EAAE,EAC1C,aAAc,IAAMvC,EAAe,IAAI,EAEvC,SAAA,CAAArD,EAAA,IAAC,OAAA,CACC,EAAG4F,EAAK,EACR,EAAGA,EAAK,EACR,MAAM,MACN,OAAO,KACP,KAAM+C,GAAa/C,CAAI,EACvB,GAAG,IACH,UAAW,GAAG1F,EAAO,QAAQ,KAAIgD,GAAA,YAAAA,EAAc,MAAO0C,EAAK,GAAK1F,EAAO,aAAe,EAAE,GACxF,QAAQgD,GAAA,YAAAA,EAAc,MAAO0C,EAAK,IAAMyD,EAAmB,aAAe,OAC1E,OAAQA,EAAmB,UAAY,cACvC,YAAaA,EAAmB,IAAM,GAAA,CACxC,EACArJ,EAAA,IAAC,OAAA,CACC,EAAG4F,EAAK,EAAI,GACZ,EAAGA,EAAK,EAAI,GACZ,WAAW,SACX,KAAK,QACL,SAAS,KACT,WAAW,MACX,UAAW1F,EAAO,SAEjB,SAAK0F,EAAA,KAAK,OAAS,GAAK,GAAGA,EAAK,KAAK,UAAU,EAAG,EAAE,CAAC,MAAQA,EAAK,IAAA,CACrE,EAGA5F,EAAA,IAAC,OAAA,CACC,EAAG4F,EAAK,EAAI,GACZ,EAAGA,EAAK,EAAI,GACZ,WAAW,SACX,KAAK,UACL,SAAS,IACT,WAAW,MAEV,SAAAA,EAAK,WAAW,OAAS,GACxBA,EAAK,WAAW,MAAM,GAAG,EAAE,CAAC,GAAKA,EAAK,WAAW,SAAS,OAAO,EAAI,IAAMA,EAAK,WAAW,MAAM,GAAG,EAAE,CAAC,EAAI,IAC3GA,EAAK,UAAA,CAET,EAGA5F,EAAA,IAAC,OAAA,CACC,EAAG4F,EAAK,EAAI,EACZ,EAAGA,EAAK,EAAI,EACZ,MAAM,KACN,OAAO,KACP,KAAMA,EAAK,iBAAmB,YAAc,UACtCA,EAAK,iBAAmB,cAAgB,UACxCA,EAAK,iBAAmB,SAAW,UACnC,UACN,GAAG,GAAA,CACL,EACA5F,EAAA,IAAC,OAAA,CACC,EAAG4F,EAAK,EAAI,GACZ,EAAGA,EAAK,EAAI,GACZ,WAAW,SACX,KAAK,QACL,SAAS,IACT,WAAW,MAEV,SAAAA,EAAK,iBAAmB,YAAc,OACtCA,EAAK,iBAAmB,cAAgB,QACxCA,EAAK,iBAAmB,SAAW,MACnC,MAAA,CACH,EAEAnF,EAAA,KAAC,OAAA,CACC,EAAGmF,EAAK,EAAI,GACZ,EAAGA,EAAK,EAAI,GACZ,WAAW,SACX,KAAK,wBACL,SAAS,IACT,UAAW1F,EAAO,YAEjB,SAAA,CAAK0F,EAAA,iBAAiB,IAAA,CAAA,CACzB,EAGA5F,EAAA,IAAC,SAAA,CACC,GAAI4F,EAAK,EAAI,IACb,GAAIA,EAAK,EAAI,GACb,EAAE,IACF,KAAMA,EAAK,SAAW,UAAY,UAC5BA,EAAK,SAAW,UAAY,UAC5BA,EAAK,SAAW,SAAW,UAAY,SAAA,CAC/C,EAGCA,EAAK,WAAaA,EAAK,YAAcA,EAAK,WAAa,UACrD,IACC,CAAA,SAAA,CAAA5F,EAAA,IAAC,SAAA,CACC,GAAI4F,EAAK,EAAI,IACb,GAAIA,EAAK,EAAI,GACb,EAAE,KACF,KAAK,UACL,OAAO,UACP,YAAY,GAAA,CACd,EACA5F,EAAA,IAAC,OAAA,CACC,EAAG4F,EAAK,EAAI,IACZ,EAAGA,EAAK,EAAI,GACZ,WAAW,SACX,KAAK,QACL,SAAS,KACT,WAAW,MAEV,SAAKA,EAAA,WAAa,EAAI,KAAOA,EAAK,UAAA,CAAA,CACrC,EACF,EAIDA,EAAK,WACJ5F,EAAA,IAAC,OAAA,CACC,EAAG4F,EAAK,EAAI,EACZ,EAAGA,EAAK,EAAI,EACZ,MAAM,MACN,OAAO,KACP,KAAK,OACL,OAAQA,EAAK,SAAW,SAAW,UAAY,UAC/C,YAAY,IACZ,GAAG,IACH,UAAW1F,EAAO,WAAA,CACpB,EAID0F,EAAK,WAAaxC,IAAgBwC,EAAK,WACrC,IACC,CAAA,SAAA,CAAA5F,EAAA,IAAC,OAAA,CACC,EAAG4F,EAAK,EAAI,GACZ,EAAGA,EAAK,EAAI,GACZ,MAAM,MACN,OAAO,KACP,KAAK,qBACL,GAAG,GAAA,CACL,EACA5F,EAAA,IAAC,OAAA,CACC,EAAG4F,EAAK,EAAI,GACZ,EAAGA,EAAK,EAAI,GACZ,WAAW,SACX,KAAK,UACL,SAAS,KACT,WAAW,MACZ,SAAA,gCAAA,CAAA,CAED,CACF,CAAA,CAAA,CAAA,EAzJGA,EAAK,EA2JZ,CAAA,CAED,EAGAxC,GAAesE,EAAc,IAAY9B,GAAA,OACpC,GAAAxC,IAAgBwC,EAAK,GAAW,OAAA,KAG9B,MAAA0D,EAAW1D,EAAK,EAAI,IAAOA,EAAK,EAAI,IAAMA,EAAK,EAAI,IACnD2D,EAAW3D,EAAK,EAAI,GAE1B,OACGnF,EAAAA,KAAA,IAAA,CAA6B,UAAWP,EAAO,QAC9C,SAAA,CAAAF,EAAA,IAAC,OAAA,CACC,EAAGsJ,EACH,EAAGC,EACH,MAAM,MACN,OAAO,MACP,KAAK,mBACL,GAAG,IACH,OAAO,OACP,YAAY,GAAA,CACd,EACAvJ,EAAA,IAAC,OAAA,CACC,EAAGsJ,EAAW,GACd,EAAGC,EAAW,GACd,KAAK,QACL,SAAS,KACT,WAAW,MAEV,SAAK3D,EAAA,IAAA,CACR,EACA5F,EAAA,IAAC,OAAA,CACC,EAAGsJ,EAAW,GACd,EAAGC,EAAW,GACd,KAAK,UACL,SAAS,IACT,WAAW,MAEV,SAAK3D,EAAA,UAAA,CACR,EACAnF,EAAA,KAAC,OAAA,CACC,EAAG6I,EAAW,GACd,EAAGC,EAAW,GACd,KAAK,OACL,SAAS,IACV,SAAA,CAAA,gBACchI,EAAAqE,EAAK,iBAAL,YAAArE,EAAqB,cAAc,MAAIqE,EAAK,gBAAA,CAAA,CAC3D,EACAnF,EAAA,KAAC,OAAA,CACC,EAAG6I,EAAW,GACd,EAAGC,EAAW,GACd,KAAK,OACL,SAAS,IACV,SAAA,CAAA,gBACe3D,EAAK,iBAAiB,gBAAcA,EAAK,kBAAkB,IAAA,CAAA,CAC3E,EACA5F,EAAA,IAAC,OAAA,CACC,EAAGsJ,EAAW,GACd,EAAGC,EAAW,GACd,KAAK,OACL,SAAS,IAER,SAAK3D,EAAA,iBAAmB,YAAc,YAAYA,EAAK,gBAAgB,GACvEA,EAAK,iBAAmB,QAAU,cAAcA,EAAK,cAAc,GACnE,yBAAA,CACH,EACAnF,EAAA,KAAC,OAAA,CACC,EAAG6I,EAAW,GACd,EAAGC,EAAW,GACd,KAAK,OACL,SAAS,IACV,SAAA,CAAA,WACU3D,EAAK,WAAW,eAAaA,EAAK,YAAY,GAAA,CAAA,CACzD,EACAnF,EAAA,KAAC,OAAA,CACC,EAAG6I,EAAW,GACd,EAAGC,EAAW,GACd,KAAK,OACL,SAAS,IACV,SAAA,CAAA,OACM3D,EAAK,cAAc,MAAM,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,GAAG,CAAA,CAAA,CACvD,EACA5F,EAAA,IAAC,OAAA,CACC,EAAGsJ,EAAW,GACd,EAAGC,EAAW,IACd,KAAK,UACL,SAAS,IACV,SAAA,iCAAA,CAAA,CA5EK,CAAA,EAAA,WAAW3D,EAAK,EAAE,EA+E1B,CAEH,CAAA,CAAA,CAAA,CAAA,CAEL,CAAA,CAAA,CAAA,CACF,CAGF,CAAA,EAGChC,GAAiBV,GAEdzC,EAAAA,KAAA+I,EAAA,SAAA,CAAA,SAAA,CAACxJ,MAAA,MAAA,CAAI,UAAWE,EAAO,aAAc,QAAS,IAAM2D,EAAiB,EAAK,EAAG,EAC7EpD,EAAA,KAAC,MAAA,CACC,UAAW,GAAGP,EAAO,SAAS,IAAI8D,EAAgB9D,EAAO,kBAAoB,EAAE,GAC/E,MAAO,CACL,KAAM,GAAG4D,EAAc,CAAC,KACxB,IAAK,GAAGA,EAAc,CAAC,IACzB,EAEA,SAAA,CAACrD,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAACO,EAAA,KAAA,KAAA,CAAG,UAAWP,EAAO,WACnB,SAAA,CAAAgD,EAAa,OAAS,UAAalD,EAAAA,IAAAyJ,GAAA,CAAS,KAAM,GAAI,EACtDvG,EAAa,OAAS,aAAgBlD,EAAAA,IAAA0J,GAAA,CAAW,KAAM,GAAI,EAC3DxG,EAAa,OAAS,kBAAqBlD,EAAAA,IAAA2J,GAAA,CAAU,KAAM,GAAI,EAC/DzG,EAAa,OAAS,cAAiBlD,EAAAA,IAAAC,GAAA,CAAI,KAAM,GAAI,EACrDiD,EAAa,OAAS,eAAkBlD,EAAAA,IAAA4J,GAAA,CAAU,KAAM,GAAI,EAC5D1G,EAAa,IAAA,EAChB,EACClD,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,aACrB,SAAAF,EAAA,IAAC,SAAA,CACC,UAAWE,EAAO,YAClB,QAAS,IAAM2D,EAAiB,EAAK,EACrC,MAAM,QAEN,SAAA7D,EAAAA,IAAC6J,GAAE,CAAA,KAAM,EAAI,CAAA,CAAA,CAAA,CAEjB,CAAA,CAAA,EACF,EAECpJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,aAErB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,UACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,cACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,eAAgB,SAAM,SAAA,EAC7CF,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,eACrB,SAAAO,EAAAA,KAAC,OAAK,CAAA,UAAW,GAAGP,EAAO,WAAW,IAAIA,EAAO,SAASgD,EAAa,OAAO,OAAO,CAAC,EAAE,YAAA,EAAgBA,EAAa,OAAO,MAAM,CAAC,CAAC,EAAE,CAAC,GACpI,SAAA,CAAA6F,GAAc7F,EAAa,MAAM,EACjCA,EAAa,MAAA,CAAA,CAChB,CACF,CAAA,CAAA,EACF,EAECzC,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,cACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,eAAgB,SAAU,aAAA,EACjDO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAACF,EAAAA,IAAA8B,GAAA,CAAO,KAAM,EAAI,CAAA,EACjBoB,EAAa,UAAA,CAChB,CAAA,CAAA,EACF,EAECzC,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,cACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,eAAgB,SAAU,aAAA,EACjDO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAACF,EAAAA,IAAAY,EAAA,CAAS,KAAM,EAAI,CAAA,EACnBsC,EAAa,iBAAiB,IAAA,CACjC,CAAA,CAAA,EACF,EAECzC,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,cACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,eAAgB,SAAe,kBAAA,EACtDO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAACF,EAAAA,IAAAI,EAAA,CAAM,KAAM,EAAI,CAAA,EAChB8C,EAAa,kBAAkB,IAAA,CAClC,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAGCzC,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAACO,EAAA,KAAA,IAAA,CAAE,UAAWP,EAAO,YAAc,SAAA,CAAagD,EAAA,YAAY,GAAA,EAAC,EAC5DlD,EAAA,IAAA,IAAA,CAAE,UAAWE,EAAO,YAAa,SAAY,cAAA,CAAA,CAAA,EAChD,EACCO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,MAAC,KAAE,UAAWE,EAAO,YAAc,SAAAgD,EAAa,YAAY,OAAO,EAClElD,EAAA,IAAA,IAAA,CAAE,UAAWE,EAAO,YAAa,SAAW,aAAA,CAAA,CAAA,EAC/C,EACCO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,MAAC,IAAE,CAAA,UAAWE,EAAO,YAAc,WAAa,OAAO,EACtDF,EAAA,IAAA,IAAA,CAAE,UAAWE,EAAO,YAAa,SAAM,QAAA,CAAA,CAAA,CAC1C,CAAA,CAAA,EACF,EAGCF,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,sBACrB,SAAAO,EAAA,KAAC,SAAA,CACC,UAAWP,EAAO,aAClB,QAASsI,GACT,MAAOxE,EAAgB,oBAAsB,oBAE5C,SAAA,CAAgBA,EAAAhE,EAAA,IAAC8J,IAAU,KAAM,EAAA,CAAI,EAAM9J,EAAAA,IAAA+J,GAAA,CAAU,KAAM,EAAI,CAAA,EAC/D/F,EAAgB,eAAiB,cAAA,CAAA,CAAA,EAEtC,EAGCA,GACDvD,EAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,gBACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,gBACrB,SAAA,CAACO,EAAA,KAAA,KAAA,CAAG,UAAWP,EAAO,qBACpB,SAAA,CAACF,EAAAA,IAAAgC,GAAA,CAAO,KAAM,EAAI,CAAA,EAAE,2BAAA,EAEtB,EACCvB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,uBACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAe,kBAAA,QACnD,OAAK,CAAA,UAAWA,EAAO,YAAc,WAAa,cAAe,CAAA,CAAA,EACpE,EACCO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAU,aAAA,EAC/CF,EAAAA,IAAC,OAAI,UAAWE,EAAO,QACpB,UAAaqB,GAAA2B,EAAA,YAAA,YAAA3B,GAAW,MAAM,EAAG,GAAG,IAAI,CAACyI,EAAUC,IAClDjK,MAAC,OAAe,CAAA,UAAWE,EAAO,IAAM,SAAA8J,GAA7BC,CAAsC,EAErD,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAECxJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,gBACrB,SAAA,CAACO,EAAA,KAAA,KAAA,CAAG,UAAWP,EAAO,qBACpB,SAAA,CAACF,EAAAA,IAAAkK,GAAA,CAAI,KAAM,EAAI,CAAA,EAAE,gBAAA,EAEnB,EACCzJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,uBACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAe,kBAAA,QACnD,OAAK,CAAA,UAAWA,EAAO,YAAc,WAAa,aAAc,CAAA,CAAA,EACnE,EACCgD,EAAa,aACZzC,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAQ,WAAA,QAC5C,OAAK,CAAA,UAAWA,EAAO,YAAc,WAAa,WAAY,CAAA,CAAA,EACjE,EAEDgD,EAAa,aACZzC,EAAAA,KAAC,MAAI,CAAA,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAQ,WAAA,QAC5C,OAAK,CAAA,UAAWA,EAAO,YAAc,WAAa,WAAY,CAAA,CAAA,CACjE,CAAA,CAAA,CAEJ,CAAA,CAAA,EACF,EAECO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,gBACrB,SAAA,CAACO,EAAA,KAAA,KAAA,CAAG,UAAWP,EAAO,qBACpB,SAAA,CAACF,EAAAA,IAAAkC,GAAA,CAAU,KAAM,EAAI,CAAA,EAAE,YAAA,EAEzB,EACCzB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,uBACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAa,gBAAA,QACjD,OAAK,CAAA,UAAWA,EAAO,YAAc,UAAAsB,GAAA0B,EAAa,aAAb,YAAA1B,GAAyB,mBAAoB,CAAA,CAAA,EACrF,EACCf,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAc,iBAAA,QAClD,OAAK,CAAA,UAAWA,EAAO,YAAc,UAAAiK,GAAAjH,EAAa,aAAb,YAAAiH,GAAyB,qBAAsB,CAAA,CAAA,CACvF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAEC1J,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,gBACrB,SAAA,CAACO,EAAA,KAAA,KAAA,CAAG,UAAWP,EAAO,qBACpB,SAAA,CAACF,EAAAA,IAAAM,EAAA,CAAc,KAAM,EAAI,CAAA,EAAE,cAAA,EAE7B,EACCG,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,uBACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAU,aAAA,QAC9C,OAAK,CAAA,UAAWA,EAAO,YAAc,UAAAkK,GAAAlH,EAAa,eAAb,YAAAkH,GAA2B,QAAS,CAAA,CAAA,EAC5E,IACCC,GAAAnH,EAAa,eAAb,YAAAmH,GAA2B,eAAgBnH,EAAa,aAAa,aAAa,OAAS,GACzFzC,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAc,iBAAA,EACnDF,EAAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,QACpB,WAAa,aAAa,aAAa,MAAM,EAAG,CAAC,EAAE,IAAI,CAACoK,EAAKL,IAC5DjK,MAAC,OAAe,CAAA,UAAWE,EAAO,IAAM,SAAAoK,GAA7BL,CAAiC,CAC7C,CACH,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,CAAA,EACF,EAGCxJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,gBACrB,SAAA,CAACO,EAAA,KAAA,KAAA,CAAG,UAAWP,EAAO,qBACpB,SAAA,CAACF,EAAAA,IAAAkK,GAAA,CAAI,KAAM,EAAI,CAAA,EAAE,yBAAA,EAEnB,EACCzJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,uBACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAM,SAAA,QAC1C,OAAK,CAAA,UAAWA,EAAO,YAAc,UAAAqK,GAAArH,EAAa,kBAAb,YAAAqH,GAA8B,KAAM,CAAA,CAAA,EAC5E,EACC9J,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAgB,mBAAA,EACrDF,EAAAA,IAAC,OAAI,UAAWE,EAAO,QACpB,UAAasK,IAAAC,GAAAvH,EAAA,kBAAA,YAAAuH,GAAiB,iBAAjB,YAAAD,GAAiC,IAAI,CAAC9I,EAASuI,IAC3DjK,EAAA,IAAC,QAAe,UAAWE,EAAO,IAAM,SAA7BwB,GAAAuI,CAAqC,EAEpD,CAAA,CAAA,EACF,EACCxJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAmB,sBAAA,QACvD,OAAK,CAAA,UAAWA,EAAO,YAAc,UAAAwK,GAAAxH,EAAa,kBAAb,YAAAwH,GAA8B,iBAAkB,CAAA,CAAA,EACxF,EACCjK,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAkB,qBAAA,QACtD,OAAK,CAAA,UAAWA,EAAO,YAAc,UAAAyK,GAAAzH,EAAa,kBAAb,YAAAyH,GAA8B,gBAAiB,CAAA,CAAA,EACvF,EACClK,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAoB,uBAAA,QACxD,OAAK,CAAA,UAAWA,EAAO,YAAc,UAAA0K,GAAA1H,EAAa,kBAAb,YAAA0H,GAA8B,kBAAmB,CAAA,CAAA,EACzF,EACCnK,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAwB,2BAAA,EAC7DF,EAAAA,IAAC,OAAI,UAAWE,EAAO,QACpB,UAAa2K,IAAAC,GAAA5H,EAAA,kBAAA,YAAA4H,GAAiB,yBAAjB,YAAAD,GAAyC,IAAI,CAAC5I,EAAKgI,IAC/DjK,EAAA,IAAC,QAAe,UAAWE,EAAO,IAAM,SAA7B+B,GAAAgI,CAAiC,EAEhD,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAGCxJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,gBACrB,SAAA,CAACO,EAAA,KAAA,KAAA,CAAG,UAAWP,EAAO,qBACpB,SAAA,CAACF,EAAAA,IAAAI,EAAA,CAAM,KAAM,EAAI,CAAA,EAAE,aAAA,EAErB,EACCK,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,uBACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAO,UAAA,EAC3CO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,YAAc,SAAA,EAAA6K,GAAA7H,EAAa,aAAb,YAAA6H,GAAyB,OAAO,GAAA,CAAC,CAAA,CAAA,EACzE,EACCtK,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAc,iBAAA,EAClDO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,YAAc,SAAA,EAAA8K,GAAA9H,EAAa,aAAb,YAAA8H,GAAyB,aAAa,GAAA,CAAC,CAAA,CAAA,EAC/E,EACCvK,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAK,QAAA,EACzCO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,YAAc,SAAA,EAAA+K,GAAA/H,EAAa,aAAb,YAAA+H,GAAyB,KAAK,UAAA,CAAQ,CAAA,CAAA,EAC9E,EACCxK,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAK,QAAA,EACzCO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,YAAc,SAAA,EAAAgL,GAAAhI,EAAa,aAAb,YAAAgI,GAAyB,KAAK,QAAA,CAAM,CAAA,CAAA,CAC5E,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAGCzK,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,gBACrB,SAAA,CAACO,EAAA,KAAA,KAAA,CAAG,UAAWP,EAAO,qBACpB,SAAA,CAACF,EAAAA,IAAAkC,GAAA,CAAU,KAAM,EAAI,CAAA,EAAE,qBAAA,EAEzB,EACCzB,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,uBACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAY,eAAA,EAChDO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,YAAc,SAAA,EAAAiL,GAAAjI,EAAa,qBAAb,YAAAiI,GAAiC,WAAW,IAAA,CAAE,CAAA,CAAA,EACtF,EACC1K,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAY,eAAA,EAChDO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,YAAc,SAAA,EAAAkL,GAAAlI,EAAa,qBAAb,YAAAkI,GAAiC,WAAW,IAAA,CAAE,CAAA,CAAA,EACtF,EACC3K,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAW,cAAA,EAC/CO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,YAAc,SAAA,EAAAmL,GAAAnI,EAAa,qBAAb,YAAAmI,GAAiC,UAAU,GAAA,CAAC,CAAA,CAAA,EACpF,EACC5K,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAW,cAAA,EAC/CO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,YAAc,SAAA,EAAAoL,GAAApI,EAAa,qBAAb,YAAAoI,GAAiC,eAAe,OAAA,CAAK,CAAA,CAAA,EAC7F,EACC7K,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAgB,mBAAA,EACpDO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,YAAc,SAAA,EAAAqL,GAAArI,EAAa,qBAAb,YAAAqI,GAAiC,eAAe,GAAA,CAAC,CAAA,CAAA,EACzF,EACC9K,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAmB,sBAAA,EACvDO,EAAA,KAAA,OAAA,CAAK,UAAWP,EAAO,YAAc,SAAA,EAAAsL,GAAAtI,EAAa,qBAAb,YAAAsI,GAAiC,kBAAkB,GAAA,CAAC,CAAA,CAAA,CAC5F,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAGC/K,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,gBACrB,SAAA,CAACO,EAAA,KAAA,KAAA,CAAG,UAAWP,EAAO,qBACpB,SAAA,CAACF,EAAAA,IAAAiJ,GAAA,CAAW,KAAM,EAAI,CAAA,EAAE,2BAAA,EAE1B,EACCxI,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,uBACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAc,iBAAA,EACnDF,EAAAA,IAAC,MAAI,CAAA,UAAWE,EAAO,QACpB,mBAAa,iCAAiB,8BAAc,MAAM,EAAG,GAAG,IAAI,CAACkC,EAAO6H,IACnEjK,MAAC,OAAe,CAAA,UAAWE,EAAO,IAAM,SAAAkC,GAA7B6H,CAAmC,EAElD,CAAA,CAAA,EACF,EACCxJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAa,gBAAA,EAClDF,EAAAA,IAAC,OAAI,UAAWE,EAAO,SACpB,UAAauL,IAAAC,GAAAxI,EAAA,kBAAA,YAAAwI,GAAiB,cAAjB,YAAAD,GAA8B,IAAI,CAACE,EAAK1B,IACnDxJ,EAAA,KAAA,IAAA,CAAY,KAAMkL,EAAK,OAAO,SAAS,IAAI,sBAAsB,UAAWzL,EAAO,KAAM,SAAA,CAAA,WAC/E+J,EAAM,CAAA,CADT,EAAAA,CAER,EAEJ,CAAA,CAAA,EACF,EACCxJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAuB,0BAAA,EAC5DF,EAAAA,IAAC,OAAI,UAAWE,EAAO,SACpB,UAAa0L,IAAAC,GAAA3I,EAAA,kBAAA,YAAA2I,GAAiB,uBAAjB,YAAAD,GAAuC,IAAI,CAACtJ,EAAU2H,IACjExJ,EAAA,KAAA,IAAA,CAAY,KAAM6B,EAAU,OAAO,SAAS,IAAI,sBAAsB,UAAWpC,EAAO,KAAM,SAAA,CAAA,gBAC/E+J,EAAM,CAAA,CADd,EAAAA,CAER,EAEJ,CAAA,CAAA,EACF,EACCxJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,WACrB,SAAA,CAAAF,EAAA,IAAC,OAAK,CAAA,UAAWE,EAAO,YAAa,SAAmB,sBAAA,EACxDF,EAAAA,IAAC,OAAI,UAAWE,EAAO,aACpB,UAAa4L,IAAAC,GAAA7I,EAAA,kBAAA,YAAA6I,GAAiB,kBAAjB,YAAAD,GAAkC,IAAI,CAACvJ,EAAO0H,IAC1DjK,EAAA,IAAC,QAAe,UAAWE,EAAO,YAC/B,SADQqC,GAAA0H,CAEX,EAEJ,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,GAIE/G,EAAa,WAAaA,EAAa,SAAW,UAAYA,EAAa,SAAW,YACtFzC,EAAA,KAAC,MAAI,CAAA,MAAO,CAAE,UAAW,OAAQ,QAAS,OAAQ,WAAY,UAAW,aAAc,MAAO,OAAQ,mBAAA,EACpG,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,SAAU,aAAc,QAAA,EAChF,SAAA,CAAAT,MAACM,GAAc,KAAM,GAAI,MAAO,CAAE,MAAO,WAAa,EACrDN,EAAA,IAAA,OAAA,CAAK,MAAO,CAAE,WAAY,MAAO,MAAO,SAAU,EAChD,WAAa,WAAa,GAAGkD,EAAa,UAAU,iBAAmB,wBAC1E,CAAA,CAAA,EACF,IAEC8I,GAAA9I,EAAa,eAAb,YAAA8I,GAA2B,eAC1BvL,EAAA,KAAC,IAAE,CAAA,MAAO,CAAE,SAAU,UAAW,MAAO,UAAW,OAAQ,iBACxD,SAAA,CAAAyC,EAAa,aAAa,aAAa,aAAa,MAAM,EAAG,GAAG,EAAE,KAAA,EACrE,EAGFzC,EAAA,KAAC,SAAA,CACC,QAAS,IAAM,CACbgD,EAAkB,EAAI,EACtBI,EAAiB,EAAK,CACxB,EACA,MAAO,CACL,WAAY,UACZ,MAAO,QACP,OAAQ,OACR,QAAS,cACT,aAAc,MACd,SAAU,UACV,OAAQ,UACR,QAAS,OACT,WAAY,SACZ,IAAK,QACP,EAEA,SAAA,CAAC7D,EAAAA,IAAAM,EAAA,CAAc,KAAM,EAAI,CAAA,EAAE,oBAAA,CAAA,CAAA,CAE7B,EACF,EAIDG,EAAAA,KAAA,MAAA,CAAI,MAAO,CAAE,UAAW,OAAQ,SAAU,SAAU,MAAO,OAAQ,UAAW,QAAA,EAAY,SAAA,CAAA,iBAC1E,IAAI,KAAKyC,EAAa,UAAU,EAAE,eAAe,CAAA,CAClE,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CAAA,CACF,EACF,EAIDM,GAAkBN,GAAgBA,EAAa,cAC9ClD,EAAA,IAAC5B,GAAA,CACC,OAAQoF,EACR,QAAS,IAAMC,EAAkB,EAAK,EACtC,aAAcP,EAAa,KAC3B,aAAcA,EAAa,aAAa,aACxC,aAAcA,EAAa,aAAa,cAAgB,CAAC,EACzD,cAAeA,EAAa,aAAa,MAAQ,CAAC,EAClD,eAAgBA,EAAa,aAAa,SAAW,CAAC,EACtD,eAAgBA,EAAa,aAAa,OAC1C,SAAUA,EAAa,aAAa,UAAY,CAAC,EACjD,aAAY+I,GAAA/I,EAAa,kBAAb,YAAA+I,GAA8B,QAAS,8BACnD,aAAa,mBACb,aAAa,mBACb,gBAAiB,CACf,WAAY/I,EAAa,WACzB,gBAAiBA,EAAa,gBAC9B,mBAAoBA,EAAa,mBACjC,gBAAiBA,EAAa,gBAC9B,YAAa,CACX,cAAagJ,GAAAhJ,EAAa,kBAAb,YAAAgJ,GAA8B,QAAS,8BACpD,cAAe,sBACf,mBAAoB,CAClB,CACE,KAAM,mBACN,KAAM,kBACN,MAAO,6BACP,MAAO,kBACP,YAAa,eACf,EACA,CACE,KAAM,kBACN,KAAM,kBACN,MAAO,6BACP,MAAO,kBACP,YAAa,eACf,EACA,CACE,KAAM,sBACN,KAAM,qBACN,MAAO,8BACP,MAAO,kBACP,YAAa,gBAAA,CACf,CAEJ,EACA,WAAY,CACV,MAAOhJ,EAAa,WACpB,cAAeA,EAAa,cAC5B,eAAgBA,EAAa,eAC7B,OAAQA,EAAa,MAAA,CACvB,CACF,CACF,EAIDzC,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAACO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,YACrB,eAACuJ,GAAS,CAAA,KAAM,GAAI,CACtB,CAAA,EACChJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAACF,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,aAAe,SAAAwE,EAAM,OAAOmB,GAAKA,EAAE,OAAS,QAAQ,EAAE,OAAO,EACnF7F,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,aAAc,SAAY,cAAA,CAAA,CAAA,CACnD,CAAA,CAAA,EACF,EAECO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,YACrB,eAACyJ,GAAU,CAAA,KAAM,GAAI,CACvB,CAAA,EACClJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAAAF,MAAC,OAAI,UAAWE,EAAO,aACpB,SAAAwE,EAAM,OAAYmB,GAAA,CAAC,YAAa,iBAAkB,YAAY,EAAE,SAASA,EAAE,IAAI,CAAC,EAAE,OACrF,EACC7F,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,aAAc,SAAoB,sBAAA,CAAA,CAAA,CAC3D,CAAA,CAAA,EACF,EAECO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,YACrB,eAACwJ,GAAW,CAAA,KAAM,GAAI,CACxB,CAAA,EACCjJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAAAF,MAAC,MAAI,CAAA,UAAWE,EAAO,aAAe,WAAY,OAAO,EACxDF,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,aAAc,SAAU,YAAA,CAAA,CAAA,CACjD,CAAA,CAAA,EACF,EAECO,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,YACrB,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,YACrB,eAAC0J,GAAU,CAAA,KAAM,GAAI,CACvB,CAAA,EACCnJ,EAAA,KAAA,MAAA,CAAI,UAAWP,EAAO,eACrB,SAAA,CAACF,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,aAAe,SAAAwE,EAAM,OAAOmB,GAAKA,EAAE,OAAS,aAAa,EAAE,OAAO,EACxF7F,EAAA,IAAA,MAAA,CAAI,UAAWE,EAAO,aAAc,SAAY,cAAA,CAAA,CAAA,CACnD,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAGCsD,GAAkBN,GAAgBA,EAAa,cAC9ClD,EAAA,IAAC5B,GAAA,CACC,OAAQoF,EACR,QAAS,IAAMC,EAAkB,EAAK,EACtC,aAAcP,EAAa,aAAa,KACxC,aAAcA,EAAa,aAAa,aACxC,aAAcA,EAAa,aAAa,cAAgB,CAAC,EACzD,cAAeA,EAAa,aAAa,eAAiB,CAAC,EAC3D,eAAgBA,EAAa,aAAa,gBAAkB,CAAC,EAC7D,eAAgBA,EAAa,aAAa,eAC1C,SAAUA,EAAa,aAAa,UAAY,CAAC,EACjD,WAAYA,EAAa,aAAa,YAAc,yBACpD,aAAcA,EAAa,aAAa,aACxC,aAAcA,EAAa,aAAa,aACxC,aAAcA,EAAa,aAAa,aACxC,WAAYA,EAAa,aAAa,WACtC,eAAgBA,EAAa,aAAa,eAC1C,gBAAiB,CACf,WAAYA,EAAa,WACzB,gBAAiBA,EAAa,gBAC9B,mBAAoBA,EAAa,mBACjC,gBAAiBA,EAAa,gBAC9B,WAAY,CACV,MAAOA,EAAa,WACpB,cAAeA,EAAa,cAC5B,OAAQA,EAAa,OACrB,eAAgBA,EAAa,cAC/B,EACA,YAAa,CACX,cAAaiJ,GAAAjJ,EAAa,kBAAb,YAAAiJ,GAA8B,QAAS,yBACpD,qBAAoBC,IAAAC,GAAAnJ,EAAa,kBAAb,YAAAmJ,GAA8B,iBAA9B,YAAAD,GAA8C,IAAI,CAACE,EAAMpL,KAAW,CACtF,KAAM,GAAGoL,CAAI,WACb,KAAAA,EACA,MAAO,GAAGA,EAAK,YAAA,EAAc,QAAQ,OAAQ,GAAG,CAAC,iBACjD,MAAOpL,IAAU,EAAI,cAAgB,OACrC,YAAa,IAAIoL,EAAK,cAAc,QAAQ,OAAQ,EAAE,CAAC,EACzD,MAAO,CAAA,CAAC,CACV,CACF,CACF,EAGFtM,EAAA,IAACuM,GAAA,CACC,OAAQ7I,EACR,QAAS,IAAMC,EAAkB,EAAK,EACtC,QAAQ,aAAA,CAAA,CACV,EACF,CAEJ,CAAC,EAEDf,GAAY,YAAc"}