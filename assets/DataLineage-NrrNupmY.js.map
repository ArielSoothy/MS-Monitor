{"version":3,"file":"DataLineage-NrrNupmY.js","sources":["../../src/components/ErrorDetailsModal.tsx","../../src/pages/DataLineage.tsx"],"sourcesContent":["import { useState } from 'react';\nimport {\n  AlertTriangle,\n  XCircle,\n  ExternalLink,\n  Clock,\n  TrendingDown,\n  FileText,\n  Users,\n  MessageSquare,\n  Activity,\n  AlertCircle,\n  CheckCircle,\n  Copy,\n  Zap\n} from 'lucide-react';\nimport type { ErrorDetails, LogReference, MetricHistory, ImpactAnalysis, RunbookReference } from '../types';\nimport styles from './ErrorDetailsModal.module.css';\n\ninterface ErrorDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  pipelineName: string;\n  currentError?: ErrorDetails;\n  errorHistory: ErrorDetails[];\n  logReferences: LogReference[];\n  metricsHistory: MetricHistory[];\n  impactAnalysis?: ImpactAnalysis;\n  runbooks: RunbookReference[];\n  oncallTeam: string;\n  slackChannel?: string;\n  teamsChannel?: string;\n  dashboardUrl?: string;\n  grafanaUrl?: string;\n  healthCheckUrl?: string;\n}\n\nconst ErrorDetailsModal: React.FC<ErrorDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  pipelineName,\n  currentError,\n  errorHistory,\n  logReferences,\n  metricsHistory,\n  impactAnalysis,\n  runbooks,\n  oncallTeam,\n  slackChannel,\n  teamsChannel,\n  dashboardUrl,\n  grafanaUrl,\n  healthCheckUrl\n}) => {\n  const [activeTab, setActiveTab] = useState<'error' | 'logs' | 'metrics' | 'impact' | 'runbooks'>('error');\n  const [copiedText, setCopiedText] = useState<string | null>(null);\n\n  if (!isOpen) return null;\n\n  const copyToClipboard = async (text: string, label: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedText(label);\n      setTimeout(() => setCopiedText(null), 2000);\n    } catch (err) {\n      console.error('Failed to copy:', err);\n    }\n  };\n\n  const getErrorIcon = (errorType: string) => {\n    switch (errorType) {\n      case 'connection': return <Zap className={styles.errorIcon} />;\n      case 'data_quality': return <TrendingDown className={styles.errorIcon} />;\n      case 'timeout': return <Clock className={styles.errorIcon} />;\n      case 'authentication': return <Users className={styles.errorIcon} />;\n      default: return <AlertTriangle className={styles.errorIcon} />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return '#ef4444';\n      case 'high': return '#f97316';\n      case 'medium': return '#eab308';\n      case 'low': return '#22c55e';\n      default: return '#6b7280';\n    }\n  };\n\n  return (\n    <div className={styles.modalOverlay} onClick={onClose}>\n      <div className={styles.modal} onClick={(e) => e.stopPropagation()}>\n        <div className={styles.modalHeader}>\n          <div>\n            <h2 className={styles.modalTitle}>Pipeline Error Details</h2>\n            <p className={styles.pipelineName}>{pipelineName}</p>\n          </div>\n          <button className={styles.closeButton} onClick={onClose}>\n            <XCircle size={24} />\n          </button>\n        </div>\n\n        {/* Quick Actions Bar */}\n        <div className={styles.quickActions}>\n          <button \n            className={styles.actionButton}\n            onClick={() => window.open(healthCheckUrl, '_blank')}\n            disabled={!healthCheckUrl}\n          >\n            <Activity size={16} />\n            Health Check\n          </button>\n          <button \n            className={styles.actionButton}\n            onClick={() => window.open(dashboardUrl, '_blank')}\n            disabled={!dashboardUrl}\n          >\n            <ExternalLink size={16} />\n            Dashboard\n          </button>\n          <button \n            className={styles.actionButton}\n            onClick={() => window.open(grafanaUrl, '_blank')}\n            disabled={!grafanaUrl}\n          >\n            <TrendingDown size={16} />\n            Metrics\n          </button>\n          {slackChannel && (\n            <button \n              className={styles.actionButton}\n              onClick={() => window.open(`slack://channel?team=T123&id=${slackChannel}`, '_blank')}\n            >\n              <MessageSquare size={16} />\n              Slack\n            </button>\n          )}\n          {teamsChannel && (\n            <button \n              className={styles.actionButton}\n              onClick={() => window.open(teamsChannel, '_blank')}\n            >\n              <Users size={16} />\n              Teams\n            </button>\n          )}\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className={styles.tabNav}>\n          {['error', 'logs', 'metrics', 'impact', 'runbooks'].map((tab) => (\n            <button\n              key={tab}\n              className={`${styles.tab} ${activeTab === tab ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab(tab as any)}\n            >\n              {tab.charAt(0).toUpperCase() + tab.slice(1)}\n              {tab === 'error' && currentError && (\n                <span className={styles.errorBadge} style={{ backgroundColor: getSeverityColor(currentError.severity) }}>\n                  {currentError.severity}\n                </span>\n              )}\n            </button>\n          ))}\n        </div>\n\n        <div className={styles.modalContent}>\n          {/* Error Details Tab */}\n          {activeTab === 'error' && (\n            <div className={styles.tabContent}>\n              {currentError ? (\n                <div className={styles.currentError}>\n                  <div className={styles.errorHeader}>\n                    <div className={styles.errorInfo}>\n                      {getErrorIcon(currentError.errorType)}\n                      <div>\n                        <h3 className={styles.errorTitle}>{currentError.errorMessage}</h3>\n                        <div className={styles.errorMeta}>\n                          <span className={styles.errorCode}>Error Code: {currentError.errorCode}</span>\n                          <span className={styles.errorTime}>\n                            {new Date(currentError.timestamp).toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    <span \n                      className={styles.severityBadge}\n                      style={{ backgroundColor: getSeverityColor(currentError.severity) }}\n                    >\n                      {currentError.severity}\n                    </span>\n                  </div>\n\n                  {/* Stack Trace */}\n                  {currentError.stackTrace && (\n                    <div className={styles.stackTrace}>\n                      <div className={styles.stackHeader}>\n                        <h4>Stack Trace</h4>\n                        <button\n                          className={styles.copyButton}\n                          onClick={() => copyToClipboard(currentError.stackTrace!, 'Stack Trace')}\n                        >\n                          <Copy size={14} />\n                          {copiedText === 'Stack Trace' ? 'Copied!' : 'Copy'}\n                        </button>\n                      </div>\n                      <pre className={styles.stackContent}>{currentError.stackTrace}</pre>\n                    </div>\n                  )}\n\n                  {/* Suggested Actions */}\n                  <div className={styles.suggestedActions}>\n                    <h4>Suggested Actions</h4>\n                    <ul className={styles.actionsList}>\n                      {currentError.suggestedActions.map((action, index) => (\n                        <li key={index} className={styles.actionItem}>\n                          <CheckCircle size={16} className={styles.actionIcon} />\n                          {action}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  {/* Context */}\n                  {currentError.context && Object.keys(currentError.context).length > 0 && (\n                    <div className={styles.context}>\n                      <h4>Error Context</h4>\n                      <div className={styles.contextGrid}>\n                        {Object.entries(currentError.context).map(([key, value]) => (\n                          <div key={key} className={styles.contextItem}>\n                            <span className={styles.contextKey}>{key}:</span>\n                            <span className={styles.contextValue}>{String(value)}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className={styles.noError}>\n                  <CheckCircle size={48} className={styles.noErrorIcon} />\n                  <h3>No Current Errors</h3>\n                  <p>This pipeline is currently running without any detected errors.</p>\n                </div>\n              )}\n\n              {/* Error History */}\n              {errorHistory.length > 0 && (\n                <div className={styles.errorHistory}>\n                  <h4>Recent Error History</h4>\n                  <div className={styles.historyList}>\n                    {errorHistory.slice(0, 5).map((error, index) => (\n                      <div key={index} className={styles.historyItem}>\n                        <div className={styles.historyIcon}>\n                          {getErrorIcon(error.errorType)}\n                        </div>\n                        <div className={styles.historyContent}>\n                          <div className={styles.historyMessage}>{error.errorMessage}</div>\n                          <div className={styles.historyMeta}>\n                            <span>{error.errorCode}</span>\n                            <span>{new Date(error.timestamp).toLocaleString()}</span>\n                          </div>\n                        </div>\n                        <span \n                          className={styles.historySeverity}\n                          style={{ backgroundColor: getSeverityColor(error.severity) }}\n                        >\n                          {error.severity}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Logs Tab */}\n          {activeTab === 'logs' && (\n            <div className={styles.tabContent}>\n              <div className={styles.logsSection}>\n                <h3>Log References</h3>\n                <div className={styles.logsList}>\n                  {logReferences.map((log, index) => (\n                    <div key={index} className={styles.logItem}>\n                      <div className={styles.logHeader}>\n                        <div className={styles.logSystem}>\n                          <FileText size={16} />\n                          {log.logSystem.toUpperCase()}\n                        </div>\n                        <button\n                          className={styles.logButton}\n                          onClick={() => window.open(log.logUrl, '_blank')}\n                        >\n                          <ExternalLink size={14} />\n                          Open Logs\n                        </button>\n                      </div>\n                      <div className={styles.logMeta}>\n                        <span>Correlation ID: {log.correlationId}</span>\n                        <span>\n                          Time Range: {new Date(log.timeRange.start).toLocaleString()} - \n                          {new Date(log.timeRange.end).toLocaleString()}\n                        </span>\n                      </div>\n                      {log.queryTemplate && (\n                        <div className={styles.queryTemplate}>\n                          <div className={styles.queryHeader}>\n                            <span>Query Template:</span>\n                            <button\n                              className={styles.copyButton}\n                              onClick={() => copyToClipboard(log.queryTemplate!, 'Query')}\n                            >\n                              <Copy size={12} />\n                              {copiedText === 'Query' ? 'Copied!' : 'Copy'}\n                            </button>\n                          </div>\n                          <code className={styles.queryCode}>{log.queryTemplate}</code>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Metrics Tab */}\n          {activeTab === 'metrics' && (\n            <div className={styles.tabContent}>\n              <div className={styles.metricsSection}>\n                <h3>Performance Metrics History</h3>\n                {/* This would typically be a chart component */}\n                <div className={styles.metricsPlaceholder}>\n                  <Activity size={48} />\n                  <p>Interactive metrics charts would be displayed here</p>\n                  <p>Showing trends for: Records/sec, Processing Time, Error Rate, Data Quality</p>\n                  {/* metricsHistory data would be used here for chart rendering */}\n                  {metricsHistory.length > 0 && (\n                    <p className={styles.metricsInfo}>\n                      {metricsHistory.length} historical data points available\n                    </p>\n                  )}\n                  {grafanaUrl && (\n                    <button\n                      className={styles.grafanaButton}\n                      onClick={() => window.open(grafanaUrl, '_blank')}\n                    >\n                      <ExternalLink size={16} />\n                      View in Grafana\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Impact Analysis Tab */}\n          {activeTab === 'impact' && (\n            <div className={styles.tabContent}>\n              {impactAnalysis ? (\n                <div className={styles.impactSection}>\n                  <div className={styles.impactOverview}>\n                    <h3>Impact Analysis</h3>\n                    <div className={styles.impactLevel}>\n                      <span \n                        className={styles.impactBadge}\n                        style={{ backgroundColor: getSeverityColor(impactAnalysis.businessImpactLevel) }}\n                      >\n                        {impactAnalysis.businessImpactLevel.toUpperCase()} IMPACT\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className={styles.impactGrid}>\n                    <div className={styles.impactCard}>\n                      <h4>Affected Downstream Pipelines</h4>\n                      <div className={styles.affectedList}>\n                        {impactAnalysis.affectedDownstreamPipelines.map((pipeline, index) => (\n                          <div key={index} className={styles.affectedItem}>\n                            <AlertCircle size={14} />\n                            {pipeline}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className={styles.impactCard}>\n                      <h4>Affected Destinations</h4>\n                      <div className={styles.affectedList}>\n                        {impactAnalysis.affectedDestinations.map((dest, index) => (\n                          <div key={index} className={styles.affectedItem}>\n                            <AlertCircle size={14} />\n                            {dest}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className={styles.impactCard}>\n                      <h4>Estimated Data Loss</h4>\n                      <div className={styles.impactMetric}>\n                        {impactAnalysis.estimatedDataLoss.toLocaleString()} records\n                      </div>\n                    </div>\n\n                    <div className={styles.impactCard}>\n                      <h4>Recovery Time Estimate</h4>\n                      <div className={styles.impactMetric}>\n                        {impactAnalysis.recoveryTimeEstimate} minutes\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className={styles.noImpact}>\n                  <CheckCircle size={48} />\n                  <h3>No Current Impact</h3>\n                  <p>This pipeline failure is not currently impacting downstream systems.</p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Runbooks Tab */}\n          {activeTab === 'runbooks' && (\n            <div className={styles.tabContent}>\n              <div className={styles.runbooksSection}>\n                <h3>Resolution Runbooks</h3>\n                <div className={styles.runbooksList}>\n                  {runbooks.map((runbook, index) => (\n                    <div key={index} className={styles.runbookItem}>\n                      <div className={styles.runbookHeader}>\n                        <h4>{runbook.title}</h4>\n                        <div className={styles.runbookMeta}>\n                          <Clock size={14} />\n                          ~{runbook.estimatedResolutionTime} min\n                        </div>\n                      </div>\n                      <p className={styles.runbookDescription}>{runbook.description}</p>\n                      <button\n                        className={styles.runbookButton}\n                        onClick={() => window.open(runbook.url, '_blank')}\n                      >\n                        <FileText size={16} />\n                        Open Runbook\n                      </button>\n                    </div>\n                  ))}\n                </div>\n\n                <div className={styles.oncallInfo}>\n                  <h4>On-Call Team</h4>\n                  <div className={styles.oncallDetails}>\n                    <Users size={16} />\n                    <span>{oncallTeam}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ErrorDetailsModal;\n","import { useState, useRef, memo, useMemo, useEffect } from 'react';\nimport {\n  Database,\n  ArrowRight,\n  GitBranch,\n  Search,\n  Activity,\n  Clock,\n  BarChart3,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Zap,\n  HelpCircle\n} from 'lucide-react';\nimport { mockPipelines } from '../data/mockData';\nimport type { PipelineSource, PipelineStatus } from '../types';\nimport ErrorDetailsModal from '../components/ErrorDetailsModal';\nimport HowItWorksModal from '../components/HowItWorksModal';\nimport InfoTooltip from '../components/InfoTooltip';\nimport { getTooltipContent } from '../utils/tooltipContent';\nimport styles from './DataLineage.module.css';\n\ninterface LineageNode {\n  id: string;\n  name: string;\n  type: 'source' | 'ingestion' | 'transformation' | 'enrichment' | 'destination';\n  source?: PipelineSource;\n  x: number;\n  y: number;\n  status: PipelineStatus;\n  recordsPerSecond: number;\n  avgProcessingTime: number;\n  connections: string[];\n  description: string;\n  lastUpdate: string;\n  dataQuality: number;\n  actualPipeline?: any; // Reference to actual pipeline for dependencies\n  destinationTypes?: string[]; // For destination routing logic\n  priority?: number; // For destination priority\n  // Enhanced error tracking\n  hasErrors?: boolean;\n  errorCount?: number;\n  pipelineData?: any; // Full pipeline data for error modal\n  // Microsoft Technology Stack Details\n  technology: string; // Specific Microsoft service (Azure Data Factory, Event Hubs, etc.)\n  resourceGroup: string;\n  subscriptionId: string;\n  region: string;\n  computeType?: string; // For processing nodes\n  storageType?: string; // For destination nodes\n  throughputUnits?: number; // For Event Hubs\n  partitionCount?: number;\n  retentionDays?: number;\n  protocols?: string[]; // HTTPS, AMQP, Kafka, etc.\n  authentication?: string; // Managed Identity, Service Principal, etc.\n  monitoring?: {\n    applicationInsights?: string;\n    logAnalyticsWorkspace?: string;\n    kustoCluster?: string;\n    alertRules?: string[];\n  };\n  dependencies?: {\n    keyVault?: string;\n    serviceAccounts?: string[];\n    externalApis?: string[];\n    networkConnections?: string[];\n  };\n}\n\ninterface DataConnection {\n  id: string;\n  from: string;\n  to: string;\n  volume: 'low' | 'medium' | 'high';\n  health: 'healthy' | 'warning' | 'error';\n  animated: boolean;\n}const DataLineage = memo(() => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedSource, setSelectedSource] = useState<PipelineSource | 'all'>('all');\n  const [selectedNode, setSelectedNode] = useState<LineageNode | null>(null);\n  const [hoveredNode, setHoveredNode] = useState<string | null>(null);\n  const [highlightedPath, setHighlightedPath] = useState<string[]>([]);\n  const [showErrorModal, setShowErrorModal] = useState(false);\n  const [showHowItWorks, setShowHowItWorks] = useState(false);\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  // Create a stable random number generator for consistent data\n  const seededRandom = (seed: string) => {\n    let hash = 0;\n    for (let i = 0; i < seed.length; i++) {\n      const char = seed.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    // Convert to 0-1 range\n    return Math.abs(hash) / 2147483647;\n  };\n\n  // Generate comprehensive lineage data with stable randomization\n  const generateLineageData = () => {\n    const nodes: LineageNode[] = [];\n    const connections: DataConnection[] = [];\n    \n    // Data sources (left side)\n    const sources: PipelineSource[] = ['LinkedIn', 'Twitter', 'Office365', 'AzureAD', 'GitHub', 'ThreatIntel', 'Exchange', 'Teams', 'SharePoint', 'PowerBI'];\n    sources.forEach((source, index) => {\n      const statusSeed = seededRandom(`${source}-status`);\n      const statusOptions: PipelineStatus[] = ['healthy', 'warning', 'failed'];\n      const status = statusOptions[Math.floor(statusSeed * statusOptions.length)];\n      \n      // Find a pipeline from this source to use for error data\n      const sourcePipelines = mockPipelines.filter(p => p.source === source);\n      const sourcePipeline = sourcePipelines.length > 0 ? sourcePipelines[0] : null;\n      \n      nodes.push({\n        id: `source-${source}`,\n        name: source,\n        type: 'source',\n        source,\n        x: 50,\n        y: 80 + index * 80,\n        status,\n        recordsPerSecond: Math.floor(seededRandom(`${source}-records`) * 1000) + 100,\n        avgProcessingTime: Math.floor(seededRandom(`${source}-time`) * 500) + 50,\n        connections: [],\n        description: `Data ingestion from ${source} platform`,\n        lastUpdate: new Date(Date.now() - seededRandom(`${source}-update`) * 3600000).toISOString(),\n        dataQuality: Math.floor(seededRandom(`${source}-quality`) * 20) + 80,\n        pipelineData: sourcePipeline, // Add pipeline data for error modal\n        hasErrors: status === 'failed' || status === 'warning',\n        errorCount: sourcePipeline?.errorHistory?.length || (status === 'failed' ? 3 : status === 'warning' ? 1 : 0),\n        // Microsoft Technology Stack Details\n        technology: source === 'Office365' || source === 'Exchange' || source === 'Teams' || source === 'SharePoint' ? 'Microsoft Graph API' :\n                   source === 'AzureAD' ? 'Azure Active Directory Logs' :\n                   source === 'LinkedIn' || source === 'Twitter' ? 'Azure Event Hubs' :\n                   source === 'GitHub' ? 'GitHub REST API → Azure Logic Apps' :\n                   source === 'ThreatIntel' ? 'Microsoft Defender for Threat Intelligence API' :\n                   'Azure Event Hubs',\n        resourceGroup: 'rg-mstic-prod-eastus2',\n        subscriptionId: 'mstic-prod-subscription',\n        region: 'East US 2',\n        throughputUnits: ['LinkedIn', 'Twitter'].includes(source) ? 20 : 10,\n        partitionCount: ['LinkedIn', 'Twitter'].includes(source) ? 32 : 16,\n        retentionDays: 7,\n        protocols: source === 'Office365' || source === 'AzureAD' ? ['HTTPS', 'OAuth 2.0'] :\n                  source === 'GitHub' ? ['HTTPS', 'Webhook'] :\n                  ['HTTPS', 'AMQP 1.0', 'Kafka'],\n        authentication: source === 'Office365' || source === 'AzureAD' ? 'Managed Identity + Application Registration' :\n                       source === 'GitHub' ? 'GitHub App + Personal Access Token' :\n                       'Managed Identity + Shared Access Key',\n        monitoring: {\n          applicationInsights: 'ai-mstic-ingestion-prod',\n          logAnalyticsWorkspace: 'law-mstic-prod-eastus2',\n          kustoCluster: 'msticdata.eastus2.kusto.windows.net',\n          alertRules: [`${source}_ingestion_failure`, `${source}_throughput_low`, `${source}_latency_high`]\n        },\n        dependencies: {\n          keyVault: 'kv-mstic-secrets-prod',\n          serviceAccounts: [`sa-${source.toLowerCase()}-ingestion`],\n          externalApis: source === 'Office365' ? ['graph.microsoft.com'] :\n                       source === 'GitHub' ? ['api.github.com'] :\n                       source === 'LinkedIn' ? ['api.linkedin.com'] :\n                       source === 'Twitter' ? ['api.twitter.com'] :\n                       [],\n          networkConnections: ['Virtual Network Gateway', 'Private Endpoints', 'Service Endpoints']\n        }\n      });\n    });\n\n    // Processing pipelines (middle section)\n    const pipelineTypes = [\n      { type: 'ingestion', x: 350 },\n      { type: 'transformation', x: 650 },\n      { type: 'enrichment', x: 950 }\n    ];\n\n    pipelineTypes.forEach(({ type, x }) => {\n      // Ensure we have pipelines from all sources by selecting pipelines more evenly\n      const sourceGroups: { [key: string]: any[] } = {};\n      mockPipelines.forEach(pipeline => {\n        if (!sourceGroups[pipeline.source]) {\n          sourceGroups[pipeline.source] = [];\n        }\n        sourceGroups[pipeline.source].push(pipeline);\n      });\n      \n      // Select 1 pipeline from each source (up to 10 sources)\n      const selectedPipelines: any[] = [];\n      sources.forEach(source => {\n        const sourcePipelines = sourceGroups[source] || [];\n        if (sourcePipelines.length > 0) {\n          // Use seeded random to get consistent selection for each type\n          const index = Math.floor(seededRandom(`${type}-${source}`) * sourcePipelines.length);\n          selectedPipelines.push(sourcePipelines[index]);\n        }\n      });\n      \n      const typeNodes = selectedPipelines.map((pipeline, index) => ({\n        id: `${type}-${pipeline.id}`, // Make ID unique per type\n        name: `${type.charAt(0).toUpperCase() + type.slice(1)} - ${pipeline.name.split(' ').slice(0, 3).join(' ')}`,\n        type: type as 'ingestion' | 'transformation' | 'enrichment',\n        source: pipeline.source,\n        x,\n        y: 80 + index * 80,\n        status: pipeline.status,\n        recordsPerSecond: Math.floor(pipeline.recordsProcessed / 60),\n        avgProcessingTime: pipeline.avgProcessingTime,\n        connections: [],\n        description: `${type} pipeline: ${pipeline.name}`,\n        lastUpdate: pipeline.lastRun.toISOString(),\n        dataQuality: Math.floor(seededRandom(`${pipeline.id}-quality`) * 15) + 85,\n        actualPipeline: pipeline, // Store reference to actual pipeline for dependencies\n        pipelineData: pipeline, // Full pipeline data for error modal\n        hasErrors: pipeline.status === 'failed' || pipeline.status === 'warning',\n        errorCount: pipeline.errorHistory?.length || 0,\n        // Microsoft Technology Stack Details for Processing Pipelines\n        technology: type === 'ingestion' ? 'Azure Data Factory' :\n                   type === 'transformation' ? 'Azure Synapse Analytics (Spark Pools)' :\n                   'Azure Databricks + Azure Functions',\n        resourceGroup: `rg-mstic-${type}-prod-eastus2`,\n        subscriptionId: 'mstic-prod-subscription',\n        region: 'East US 2',\n        computeType: type === 'ingestion' ? 'Integration Runtime (Auto-resolve)' :\n                    type === 'transformation' ? 'Spark Pool (Medium: 8-32 nodes)' :\n                    'Databricks Cluster (Standard_DS3_v2)',\n        partitionCount: type === 'transformation' ? 64 : 32,\n        retentionDays: 30,\n        protocols: type === 'ingestion' ? ['HTTPS', 'ODBC', 'JDBC'] :\n                  type === 'transformation' ? ['Spark SQL', 'Delta Lake'] :\n                  ['Python', 'Scala', 'Delta Lake', 'MLflow'],\n        authentication: 'Managed Identity + Azure Key Vault',\n        monitoring: {\n          applicationInsights: `ai-mstic-${type}-prod`,\n          logAnalyticsWorkspace: 'law-mstic-prod-eastus2',\n          kustoCluster: 'msticdata.eastus2.kusto.windows.net',\n          alertRules: [`${type}_pipeline_failure`, `${type}_processing_delay`, `${type}_resource_exhaustion`]\n        },\n        dependencies: {\n          keyVault: 'kv-mstic-secrets-prod',\n          serviceAccounts: [`sa-${type}-${pipeline.source.toLowerCase()}`],\n          externalApis: type === 'enrichment' ? ['threatintelligence.microsoft.com', 'virusshare.com'] : [],\n          networkConnections: ['Azure Virtual Network', 'Private Link', 'Managed Virtual Network']\n        }\n      }));\n        \n      nodes.push(...typeNodes);\n    });\n\n    // Destinations (right side) - organized by purpose for realistic MSTIC routing\n    const destinations = [\n      { name: 'MSTIC Data Lake', types: ['storage', 'archive'], priority: 1 },\n      { name: 'Threat Intelligence DB', types: ['threat', 'intel'], priority: 1 },\n      { name: 'Security Analytics Store', types: ['analytics', 'ml'], priority: 2 },\n      { name: 'Alert System', types: ['realtime', 'alerts'], priority: 1 },\n      { name: 'ML Training Data', types: ['ml', 'training'], priority: 3 },\n      { name: 'Compliance Archive', types: ['compliance', 'audit'], priority: 2 },\n      { name: 'Real-time Dashboard', types: ['realtime', 'dashboard'], priority: 1 },\n      { name: 'API Gateway', types: ['api', 'external'], priority: 2 }\n    ];\n\n    destinations.forEach((dest, index) => {\n      const statusSeed = seededRandom(`${dest.name}-status`);\n      const statusOptions: PipelineStatus[] = ['healthy', 'warning'];\n      const status = statusOptions[Math.floor(statusSeed * statusOptions.length)];\n      \n      nodes.push({\n        id: `dest-${dest.name}`,\n        name: dest.name,\n        type: 'destination',\n        x: 1250,\n        y: 80 + index * 80,\n        status,\n        recordsPerSecond: Math.floor(seededRandom(`${dest.name}-records`) * 500) + 50,\n        avgProcessingTime: Math.floor(seededRandom(`${dest.name}-time`) * 100) + 20,\n        connections: [],\n        description: `Data destination: ${dest.name}`,\n        lastUpdate: new Date(Date.now() - seededRandom(`${dest.name}-update`) * 1800000).toISOString(),\n        dataQuality: Math.floor(seededRandom(`${dest.name}-quality`) * 10) + 90,\n        destinationTypes: dest.types,\n        priority: dest.priority,\n        // Microsoft Technology Stack Details for Destinations\n        technology: dest.name.includes('Data Lake') ? 'Azure Data Lake Storage Gen2 (ADLS)' :\n                   dest.name.includes('DB') || dest.name.includes('Database') ? 'Azure SQL Database (Premium)' :\n                   dest.name.includes('Analytics') ? 'Azure Synapse Analytics (SQL Pool)' :\n                   dest.name.includes('Alert') ? 'Azure Logic Apps + Service Bus' :\n                   dest.name.includes('ML') ? 'Azure Machine Learning Studio' :\n                   dest.name.includes('Compliance') ? 'Azure Purview + Archive Storage' :\n                   dest.name.includes('Dashboard') ? 'Power BI Premium + Azure SignalR' :\n                   'Azure API Management + Application Gateway',\n        resourceGroup: `rg-mstic-storage-prod-eastus2`,\n        subscriptionId: 'mstic-prod-subscription',\n        region: 'East US 2',\n        storageType: dest.name.includes('Data Lake') ? 'Hot (Standard LRS) + Cool Archive' :\n                    dest.name.includes('Analytics') ? 'Premium SSD + Columnstore Index' :\n                    dest.name.includes('ML') ? 'Standard SSD + Blob Storage' :\n                    dest.name.includes('Compliance') ? 'Archive Storage (GRS)' :\n                    'Standard Storage (ZRS)',\n        partitionCount: dest.name.includes('Data Lake') ? 128 :\n                       dest.name.includes('Analytics') ? 256 :\n                       dest.name.includes('Alert') ? 64 : 32,\n        retentionDays: dest.name.includes('Compliance') ? 2555 : // 7 years\n                      dest.name.includes('Archive') ? 365 :\n                      dest.name.includes('ML') ? 180 :\n                      90,\n        protocols: dest.name.includes('Data Lake') ? ['HTTPS', 'REST API', 'ABFS'] :\n                  dest.name.includes('DB') ? ['TDS', 'HTTPS', 'ODBC'] :\n                  dest.name.includes('Alert') ? ['HTTPS', 'AMQP', 'Service Bus'] :\n                  dest.name.includes('API') ? ['HTTPS', 'OAuth 2.0', 'OpenAPI'] :\n                  ['HTTPS', 'WebSocket', 'REST API'],\n        authentication: dest.name.includes('Data Lake') ? 'Managed Identity + ACLs + RBAC' :\n                       dest.name.includes('DB') ? 'Managed Identity + SQL Authentication' :\n                       dest.name.includes('ML') ? 'Service Principal + Workspace MSI' :\n                       'Managed Identity + Key Vault',\n        monitoring: {\n          applicationInsights: `ai-mstic-destinations-prod`,\n          logAnalyticsWorkspace: 'law-mstic-prod-eastus2',\n          kustoCluster: 'msticdata.eastus2.kusto.windows.net',\n          alertRules: [`${dest.name.replace(/\\s+/g, '_').toLowerCase()}_capacity`, \n                      `${dest.name.replace(/\\s+/g, '_').toLowerCase()}_latency`,\n                      `${dest.name.replace(/\\s+/g, '_').toLowerCase()}_availability`]\n        },\n        dependencies: {\n          keyVault: 'kv-mstic-secrets-prod',\n          serviceAccounts: [`sa-${dest.name.replace(/\\s+/g, '-').toLowerCase()}`],\n          externalApis: dest.name.includes('API') ? ['partner-apis.microsoft.com'] : [],\n          networkConnections: ['Private Endpoints', 'VNet Integration', 'Service Endpoints']\n        }\n      });\n    });\n\n    // Generate connections with realistic data flow and failure handling\n    nodes.forEach(node => {\n      if (node.type === 'source') {\n        // Sources connect to ingestion pipelines of the same source\n        const ingestionNodes = nodes.filter(n => n.type === 'ingestion' && n.source === node.source);\n        ingestionNodes.forEach(ingestionNode => {\n          const connectionId = `${node.id}-${ingestionNode.id}`;\n          const volumeSeed = seededRandom(`${connectionId}-volume`);\n          const volumeOptions: ('low' | 'medium' | 'high')[] = ['low', 'medium', 'high'];\n          const volume = volumeOptions[Math.floor(volumeSeed * volumeOptions.length)];\n          \n          connections.push({\n            id: connectionId,\n            from: node.id,\n            to: ingestionNode.id,\n            volume,\n            health: node.status === 'failed' ? 'error' : node.status === 'warning' ? 'warning' : 'healthy',\n            animated: node.status !== 'failed' // No animation if source is failed\n          });\n          node.connections.push(ingestionNode.id);\n          ingestionNode.connections.push(node.id);\n        });\n      } else if (node.type === 'ingestion') {\n        // Only connect if the source is not failed\n        const sourceNode = nodes.find(n => n.type === 'source' && n.source === node.source);\n        if (sourceNode?.status !== 'failed') {\n          const transformationNodes = nodes.filter(n => n.type === 'transformation' && n.source === node.source).slice(0, 2);\n          transformationNodes.forEach(transformNode => {\n            const connectionId = `${node.id}-${transformNode.id}`;\n            const volumeSeed = seededRandom(`${connectionId}-volume`);\n            const volumeOptions: ('medium' | 'high')[] = ['medium', 'high'];\n            const volume = volumeOptions[Math.floor(volumeSeed * volumeOptions.length)];\n            \n            connections.push({\n              id: connectionId,\n              from: node.id,\n              to: transformNode.id,\n              volume,\n              health: node.status === 'failed' ? 'error' : node.status === 'warning' ? 'warning' : 'healthy',\n              animated: node.status !== 'failed'\n            });\n            node.connections.push(transformNode.id);\n            transformNode.connections.push(node.id);\n          });\n        }\n      } else if (node.type === 'transformation') {\n        // Only connect if upstream is healthy\n        const ingestionNode = nodes.find(n => n.type === 'ingestion' && n.source === node.source);\n        const sourceNode = nodes.find(n => n.type === 'source' && n.source === node.source);\n        if (sourceNode?.status !== 'failed' && ingestionNode?.status !== 'failed') {\n          const enrichmentNodes = nodes.filter(n => n.type === 'enrichment' && n.source === node.source).slice(0, 2);\n          enrichmentNodes.forEach(enrichNode => {\n            const connectionId = `${node.id}-${enrichNode.id}`;\n            connections.push({\n              id: connectionId,\n              from: node.id,\n              to: enrichNode.id,\n              volume: 'high',\n              health: node.status === 'failed' ? 'error' : node.status === 'warning' ? 'warning' : 'healthy',\n              animated: node.status !== 'failed'\n            });\n            node.connections.push(enrichNode.id);\n            enrichNode.connections.push(node.id);\n          });\n        }\n      } else if (node.type === 'enrichment') {\n        // Smart destination routing based on source type and pipeline health\n        const sourceNode = nodes.find(n => n.type === 'source' && n.source === node.source);\n        const ingestionNode = nodes.find(n => n.type === 'ingestion' && n.source === node.source);\n        const transformationNode = nodes.find(n => n.type === 'transformation' && n.source === node.source);\n        \n        // Only connect if entire pipeline upstream is healthy\n        if (sourceNode?.status !== 'failed' && ingestionNode?.status !== 'failed' && transformationNode?.status !== 'failed') {\n          // Smart routing based on data source type\n          const destinationMappings = {\n            'LinkedIn': ['Threat Intelligence DB', 'MSTIC Data Lake', 'ML Training Data'],\n            'Twitter': ['Real-time Dashboard', 'Alert System', 'Security Analytics Store'],\n            'Office365': ['Compliance Archive', 'Security Analytics Store', 'Alert System'],\n            'AzureAD': ['Security Analytics Store', 'Alert System', 'Threat Intelligence DB'],\n            'GitHub': ['Threat Intelligence DB', 'Security Analytics Store', 'API Gateway'],\n            'ThreatIntel': ['Alert System', 'Threat Intelligence DB', 'Real-time Dashboard'],\n            'Exchange': ['Compliance Archive', 'Security Analytics Store', 'Alert System'],\n            'Teams': ['Compliance Archive', 'Real-time Dashboard', 'Security Analytics Store'],\n            'SharePoint': ['Compliance Archive', 'MSTIC Data Lake', 'Security Analytics Store'],\n            'PowerBI': ['Real-time Dashboard', 'Security Analytics Store', 'API Gateway']\n          };\n          \n          const targetDestinations = destinationMappings[node.source as keyof typeof destinationMappings] || \n                                   ['MSTIC Data Lake', 'Security Analytics Store', 'Alert System'];\n          \n          const destNodes = nodes.filter(n => \n            n.type === 'destination' && targetDestinations.includes(n.name)\n          );\n          \n          destNodes.forEach(destNode => {\n            const connectionId = `${node.id}-${destNode.id}`;\n            connections.push({\n              id: connectionId,\n              from: node.id,\n              to: destNode.id,\n              volume: 'high',\n              health: node.status === 'failed' ? 'error' : node.status === 'warning' ? 'warning' : 'healthy',\n              animated: node.status !== 'failed'\n            });\n            node.connections.push(destNode.id);\n            destNode.connections.push(node.id);\n          });\n        }\n      }\n    });\n\n    return { nodes, connections };\n  };\n\n  // Use useMemo to prevent regeneration on every render, but regenerate all connections\n  const { nodes: allNodes, connections: allConnections } = useMemo(() => {\n    const result = generateLineageData();\n    const nodesWithErrors = result.nodes.filter(n => n.hasErrors);\n    console.log('Generated nodes:', {\n      total: result.nodes.length,\n      withErrors: nodesWithErrors.length,\n      errorNodes: nodesWithErrors.map(n => ({ id: n.id, name: n.name, status: n.status, errorCount: n.errorCount }))\n    });\n    return result;\n  }, []);\n\n  // Filter connections based on selected source\n  const filteredConnections = useMemo(() => {\n    if (selectedSource === 'all') {\n      return allConnections;\n    }\n    \n    // Show all connections that are part of the selected source's data flow path\n    return allConnections.filter(conn => {\n      const fromNode = allNodes.find(n => n.id === conn.from);\n      const toNode = allNodes.find(n => n.id === conn.to);\n      \n      // Direct connections involving the selected source\n      if (fromNode?.source === selectedSource || toNode?.source === selectedSource) {\n        return true;\n      }\n      \n      // For destination connections, check if there's a path from the selected source\n      if (toNode?.type === 'destination') {\n        // Find if there's any pipeline in the enrichment stage that connects to this destination\n        // and that pipeline is part of the selected source flow\n        const enrichmentConnections = allConnections.filter(c => \n          c.to === toNode.id && allNodes.find(n => n.id === c.from)?.type === 'enrichment'\n        );\n        \n        return enrichmentConnections.some(enrichConn => {\n          const enrichNode = allNodes.find(n => n.id === enrichConn.from);\n          return enrichNode?.source === selectedSource;\n        });\n      }\n      \n      return false;\n    });\n  }, [allNodes, allConnections, selectedSource]);\n\n  // Use filtered data\n  const nodes = allNodes;\n  const connections = filteredConnections;\n\n  // Clear highlighted path when source changes\n  useEffect(() => {\n    setHighlightedPath([]);\n    setSelectedNode(null);\n  }, [selectedSource]);\n\n  // Filter nodes based on search\n  const filteredNodes = nodes.filter(node =>\n    node.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (node.source && node.source.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  // Highlight path from selected node\n  const highlightPath = (nodeId: string) => {\n    const visited = new Set<string>();\n    const path: string[] = [];\n    \n    const traverse = (currentId: string) => {\n      if (visited.has(currentId)) return;\n      visited.add(currentId);\n      path.push(currentId);\n      \n      const node = nodes.find(n => n.id === currentId);\n      if (node) {\n        node.connections.forEach(connectedId => {\n          if (!visited.has(connectedId)) {\n            traverse(connectedId);\n          }\n        });\n      }\n    };\n    \n    traverse(nodeId);\n    setHighlightedPath(path);\n  };\n\n  const handleNodeClick = (node: LineageNode) => {\n    // Always set the selected node first - this fixes the double-click issue\n    setSelectedNode(node);\n    \n    // If clicking on a source node, update the selectedSource filter\n    if (node.type === 'source' && node.source) {\n      setSelectedSource(node.source);\n      // Clear any existing highlights to show the full source flow\n      setHighlightedPath([]);\n    } else {\n      // For non-source nodes, highlight the path\n      highlightPath(node.id);\n    }\n  };\n\n  const handleNodeDoubleClick = (node: LineageNode) => {\n    console.log('Node double-clicked:', {\n      id: node.id,\n      name: node.name,\n      status: node.status,\n      hasErrors: node.hasErrors,\n      errorCount: node.errorCount,\n      hasPipelineData: !!node.pipelineData,\n      pipelineDataKeys: node.pipelineData ? Object.keys(node.pipelineData) : []\n    });\n    \n    // Open error details modal on double-click for failed/warning nodes\n    if ((node.status === 'failed' || node.status === 'warning') && node.pipelineData) {\n      console.log('Opening error modal for node:', node.name);\n      setSelectedNode(node);\n      setShowErrorModal(true);\n    } else {\n      console.log('Not opening modal - conditions not met');\n    }\n  };\n\n  const getNodeColor = (node: LineageNode) => {\n    // If there's a highlighted path and this node is not in it, dim it\n    if (highlightedPath.length > 0 && !highlightedPath.includes(node.id)) {\n      return '#444';\n    }\n    \n    // If a specific source is selected, apply source filtering\n    if (selectedSource !== 'all') {\n      // Highlight the selected source\n      if (node.type === 'source' && node.source === selectedSource) {\n        return '#0078d4'; // Bright blue for selected source\n      }\n      // Dim other sources when a specific source is selected\n      if (node.type === 'source' && node.source !== selectedSource) {\n        return '#333'; // Dimmed color for non-selected sources\n      }\n      // For pipeline nodes, check if they belong to the selected source\n      if (node.type !== 'source' && node.type !== 'destination') {\n        if (node.source === selectedSource) {\n          // Normal colors for pipeline nodes of the selected source\n          switch (node.type) {\n            case 'ingestion': return '#52c41a';\n            case 'transformation': return '#faad14';\n            case 'enrichment': return '#8b5cf6';\n            default: return '#888';\n          }\n        } else {\n          return '#333'; // Dim pipeline nodes from other sources\n        }\n      }\n      // Destinations: check if they have connections in current filtered set\n      if (node.type === 'destination') {\n        const hasConnections = connections.some(conn => conn.to === node.id);\n        return hasConnections ? '#ef4444' : '#333';\n      }\n    }\n    \n    // Default colors when no source is selected\n    switch (node.type) {\n      case 'source': return '#0078d4';\n      case 'ingestion': return '#52c41a';\n      case 'transformation': return '#faad14';\n      case 'enrichment': return '#8b5cf6';\n      case 'destination': return '#ef4444';\n      default: return '#888';\n    }\n  };\n\n  const getConnectionStyle = (connection: DataConnection) => {\n    const isHighlighted = highlightedPath.includes(connection.from) && highlightedPath.includes(connection.to);\n    \n    const baseStyle = {\n      strokeWidth: connection.volume === 'high' ? '3' : connection.volume === 'medium' ? '2' : '1',\n      stroke: connection.health === 'error' ? '#ef4444' :\n              connection.health === 'warning' ? '#faad14' : '#52c41a',\n      opacity: highlightedPath.length > 0 ? (isHighlighted ? '1' : '0.2') : '0.8',\n      strokeDasharray: connection.volume === 'low' ? '5,5' : 'none',\n      markerEnd: connection.health === 'error' ? 'url(#arrowhead-error)' :\n                 connection.health === 'warning' ? 'url(#arrowhead-warning)' : \n                 'url(#arrowhead-healthy)'\n    };\n    \n    return baseStyle;\n  };\n\n  const getStatusIcon = (status: PipelineStatus) => {\n    switch (status) {\n      case 'healthy': return <CheckCircle size={16} className={styles.statusHealthy} />;\n      case 'warning': return <AlertTriangle size={16} className={styles.statusWarning} />;\n      case 'failed': return <XCircle size={16} className={styles.statusFailed} />;\n      case 'processing': return <Activity size={16} className={styles.statusProcessing} />;\n      default: return null;\n    }\n  };\n\n  const uniqueSources = [...new Set(mockPipelines.map(p => p.source))];\n\n  return (\n    <div className={styles.dataLineage}>\n      <div className={styles.header}>\n        <div className={styles.headerContent}>\n          <div className={styles.titleSection}>\n            <h1 className={styles.title}>\n              Interactive Data Lineage\n              <button \n                className={styles.infoButton}\n                onClick={() => setShowHowItWorks(true)}\n                title=\"How does this system work?\"\n              >\n                <HelpCircle size={18} />\n              </button>\n            </h1>\n            <p className={styles.subtitle}>Visualize and explore data flow through your threat intelligence pipelines</p>\n          </div>\n        </div>\n      </div>\n\n      <div className={styles.mainContent}>\n        {/* Controls */}\n        <div className={styles.controls}>\n          <div className={styles.searchContainer}>\n            <Search className={styles.searchIcon} />\n            <input\n              type=\"text\"\n              placeholder=\"Search nodes and pipelines...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className={styles.searchInput}\n            />\n          </div>\n          <select\n            value={selectedSource}\n            onChange={(e) => setSelectedSource(e.target.value as PipelineSource | 'all')}\n            className={styles.filterSelect}\n          >\n            <option value=\"all\">All Sources</option>\n            {uniqueSources.map(source => (\n              <option key={source} value={source}>{source}</option>\n            ))}\n          </select>\n          <button \n            className={styles.clearButton}\n            onClick={() => {\n              setSelectedNode(null);\n              setHighlightedPath([]);\n              setSelectedSource('all');\n            }}\n          >\n            Clear Selection\n          </button>\n          <button \n            className={styles.clearButton}\n            onClick={() => {\n              // Find a node with errors for testing\n              const errorNode = allNodes.find(n => n.hasErrors && n.pipelineData);\n              if (errorNode) {\n                console.log('Test: Opening modal for', errorNode.name);\n                setSelectedNode(errorNode);\n                setShowErrorModal(true);\n              } else {\n                console.log('Test: No error nodes found');\n              }\n            }}\n            style={{ background: '#dc3545' }}\n          >\n            Test Error Modal\n          </button>\n        </div>\n\n        {/* Selected Source Indicator */}\n        {selectedSource !== 'all' && (\n          <div className={styles.filterIndicator}>\n            <span>Showing data flow for: <strong>{selectedSource}</strong></span>\n            <button \n              className={styles.clearFilterButton}\n              onClick={() => setSelectedSource('all')}\n              title=\"Show all sources\"\n            >\n              ×\n            </button>\n          </div>\n        )}\n\n        <div className={styles.contentGrid}>\n          {/* Main Visualization */}\n          <div className={styles.visualizationPanel}>\n            {/* Legend */}\n            <div className={styles.legend}>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendDot} ${styles.source}`}></div>\n                <span>Data Sources</span>\n              </div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendDot} ${styles.ingestion}`}></div>\n                <span>Ingestion</span>\n              </div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendDot} ${styles.transformation}`}></div>\n                <span>Transformation</span>\n              </div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendDot} ${styles.enrichment}`}></div>\n                <span>Enrichment</span>\n              </div>\n              <div className={styles.legendItem}>\n                <div className={`${styles.legendDot} ${styles.destination}`}></div>\n                <span>Destinations</span>\n              </div>\n            </div>\n\n            {/* SVG Visualization */}\n            <div className={styles.lineageContainer}>\n              <svg \n                ref={svgRef}\n                className={styles.lineageSvg}\n                viewBox=\"0 0 1600 900\"\n                preserveAspectRatio=\"xMidYMid meet\"\n              >\n                {/* Animated gradient definitions */}\n                <defs>\n                  <linearGradient id=\"flowGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"0%\" stopColor=\"rgba(82, 196, 26, 0.1)\" />\n                    <stop offset=\"50%\" stopColor=\"rgba(82, 196, 26, 0.8)\" />\n                    <stop offset=\"100%\" stopColor=\"rgba(82, 196, 26, 0.1)\" />\n                    <animateTransform\n                      attributeName=\"gradientTransform\"\n                      attributeType=\"XML\"\n                      type=\"translate\"\n                      values=\"-100 0; 200 0; -100 0\"\n                      dur=\"3s\"\n                      repeatCount=\"indefinite\"\n                    />\n                  </linearGradient>\n                  \n                  {/* Dynamic arrow markers for different connection colors */}\n                  <marker\n                    id=\"arrowhead-healthy\"\n                    markerWidth=\"6\"\n                    markerHeight=\"4\"\n                    refX=\"5\"\n                    refY=\"2\"\n                    orient=\"auto\"\n                  >\n                    <polygon points=\"0 0, 6 2, 0 4\" fill=\"#52c41a\" />\n                  </marker>\n                  \n                  <marker\n                    id=\"arrowhead-warning\"\n                    markerWidth=\"6\"\n                    markerHeight=\"4\"\n                    refX=\"5\"\n                    refY=\"2\"\n                    orient=\"auto\"\n                  >\n                    <polygon points=\"0 0, 6 2, 0 4\" fill=\"#faad14\" />\n                  </marker>\n                  \n                  <marker\n                    id=\"arrowhead-error\"\n                    markerWidth=\"6\"\n                    markerHeight=\"4\"\n                    refX=\"5\"\n                    refY=\"2\"\n                    orient=\"auto\"\n                  >\n                    <polygon points=\"0 0, 6 2, 0 4\" fill=\"#ef4444\" />\n                  </marker>\n                  \n                  <filter id=\"glow\">\n                    <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n                    <feMerge> \n                      <feMergeNode in=\"coloredBlur\"/>\n                      <feMergeNode in=\"SourceGraphic\"/>\n                    </feMerge>\n                  </filter>\n                </defs>\n\n                {/* Section labels */}\n                <text x=\"120\" y=\"50\" className={styles.sectionLabel}>Data Sources</text>\n                <text x=\"420\" y=\"50\" className={styles.sectionLabel}>Ingestion</text>\n                <text x=\"720\" y=\"50\" className={styles.sectionLabel}>Transformation</text>\n                <text x=\"1020\" y=\"50\" className={styles.sectionLabel}>Enrichment</text>\n                <text x=\"1320\" y=\"50\" className={styles.sectionLabel}>Destinations</text>\n\n                {/* Render connections */}\n                {connections\n                  .filter(conn => {\n                    const fromNode = filteredNodes.find(n => n.id === conn.from);\n                    const toNode = filteredNodes.find(n => n.id === conn.to);\n                    return fromNode && toNode;\n                  })\n                  .map((conn) => {\n                    const fromNode = filteredNodes.find(n => n.id === conn.from)!;\n                    const toNode = filteredNodes.find(n => n.id === conn.to)!;\n                    const style = getConnectionStyle(conn);\n                    \n                    return (\n                      <g key={conn.id}>\n                        <line\n                          x1={fromNode.x + 180}\n                          y1={fromNode.y + 22}\n                          x2={toNode.x - 20}\n                          y2={toNode.y + 22}\n                          stroke={style.stroke}\n                          strokeWidth={style.strokeWidth}\n                          opacity={style.opacity}\n                          strokeDasharray={style.strokeDasharray}\n                          markerEnd={style.markerEnd}\n                          className={styles.connectionLine}\n                        />\n                        {conn.animated && (\n                          <circle\n                            r=\"3\"\n                            fill={style.stroke}\n                            className={styles.flowDot}\n                          >\n                            <animateMotion\n                              dur=\"3s\"\n                              repeatCount=\"indefinite\"\n                              path={`M${fromNode.x + 180},${fromNode.y + 22} L${toNode.x - 20},${toNode.y + 22}`}\n                            />\n                          </circle>\n                        )}\n                      </g>\n                    );\n                  })}\n\n                {/* Render nodes */}\n                {filteredNodes.map(node => {\n                  const isSelectedSource = node.type === 'source' && selectedSource !== 'all' && node.source === selectedSource;\n                  \n                  return (\n                  <g \n                    key={node.id}\n                    className={styles.nodeGroup}\n                    onClick={() => handleNodeClick(node)}\n                    onDoubleClick={() => handleNodeDoubleClick(node)}\n                    onMouseEnter={() => setHoveredNode(node.id)}\n                    onMouseLeave={() => setHoveredNode(null)}\n                  >\n                    <rect\n                      x={node.x}\n                      y={node.y}\n                      width=\"180\"\n                      height=\"45\"\n                      fill={getNodeColor(node)}\n                      rx=\"6\"\n                      className={`${styles.nodeRect} ${selectedNode?.id === node.id ? styles.selectedNode : ''}`}\n                      filter={selectedNode?.id === node.id || isSelectedSource ? \"url(#glow)\" : \"none\"}\n                      stroke={isSelectedSource ? \"#ffffff\" : \"transparent\"}\n                      strokeWidth={isSelectedSource ? \"2\" : \"0\"}\n                    />\n                    <text\n                      x={node.x + 90}\n                      y={node.y + 18}\n                      textAnchor=\"middle\"\n                      fill=\"white\"\n                      fontSize=\"11\"\n                      fontWeight=\"600\"\n                      className={styles.nodeText}\n                    >\n                      {node.name.length > 20 ? `${node.name.substring(0, 17)}...` : node.name}\n                    </text>\n                    \n                    {/* Microsoft Technology Label */}\n                    <text\n                      x={node.x + 90}\n                      y={node.y + 30}\n                      textAnchor=\"middle\"\n                      fill=\"#0078d4\"\n                      fontSize=\"8\"\n                      fontWeight=\"500\"\n                    >\n                      {node.technology.length > 30 ? \n                        node.technology.split(' ')[0] + (node.technology.includes('Azure') ? ' ' + node.technology.split(' ')[1] : '') :\n                        node.technology\n                      }\n                    </text>\n                    \n                    <text\n                      x={node.x + 90}\n                      y={node.y + 40}\n                      textAnchor=\"middle\"\n                      fill=\"rgba(255,255,255,0.8)\"\n                      fontSize=\"9\"\n                      className={styles.nodeSubtext}\n                    >\n                      {node.recordsPerSecond}/s\n                    </text>\n                    \n                    {/* Status indicator */}\n                    <circle\n                      cx={node.x + 160}\n                      cy={node.y + 12}\n                      r=\"5\"\n                      fill={node.status === 'healthy' ? '#52c41a' :\n                            node.status === 'warning' ? '#faad14' :\n                            node.status === 'failed' ? '#ef4444' : '#1890ff'}\n                    />\n                    \n                    {/* ENHANCED Error count indicator - BIGGER and MORE VISIBLE */}\n                    {node.hasErrors && node.errorCount && node.errorCount > 0 && (\n                      <g>\n                        <circle\n                          cx={node.x + 170}\n                          cy={node.y + 35}\n                          r=\"12\"\n                          fill=\"#ef4444\"\n                          stroke=\"#ffffff\"\n                          strokeWidth=\"2\"\n                        />\n                        <text\n                          x={node.x + 170}\n                          y={node.y + 40}\n                          textAnchor=\"middle\"\n                          fill=\"white\"\n                          fontSize=\"11\"\n                          fontWeight=\"700\"\n                        >\n                          {node.errorCount > 9 ? '9+' : node.errorCount}\n                        </text>\n                      </g>\n                    )}\n                    \n                    {/* Enhanced visual indicator for nodes with errors - THICKER BORDER */}\n                    {node.hasErrors && (\n                      <rect\n                        x={node.x - 3}\n                        y={node.y - 3}\n                        width=\"186\"\n                        height=\"51\"\n                        fill=\"none\"\n                        stroke={node.status === 'failed' ? '#ef4444' : '#faad14'}\n                        strokeWidth=\"3\"\n                        rx=\"8\"\n                        className={styles.errorBorder}\n                      />\n                    )}\n                    \n                    {/* Double-click hint for error nodes */}\n                    {node.hasErrors && hoveredNode === node.id && (\n                      <g>\n                        <rect\n                          x={node.x + 20}\n                          y={node.y + 55}\n                          width=\"140\"\n                          height=\"20\"\n                          fill=\"rgba(0, 0, 0, 0.8)\"\n                          rx=\"4\"\n                        />\n                        <text\n                          x={node.x + 90}\n                          y={node.y + 68}\n                          textAnchor=\"middle\"\n                          fill=\"#faad14\"\n                          fontSize=\"10\"\n                          fontWeight=\"600\"\n                        >\n                          Double-click for error details\n                        </text>\n                      </g>\n                    )}\n                  </g>\n                  );\n                })}\n                \n                {/* Render tooltips separately to ensure they appear on top */}\n                {hoveredNode && filteredNodes.map(node => {\n                  if (hoveredNode !== node.id) return null;\n                  \n                  // Smart positioning: if node is too far right, show tooltip on the left\n                  const tooltipX = node.x > 1000 ? node.x - 210 : node.x + 190;\n                  const tooltipY = node.y - 10;\n                  \n                  return (\n                    <g key={`tooltip-${node.id}`} className={styles.tooltip}>\n                      <rect\n                        x={tooltipX}\n                        y={tooltipY}\n                        width=\"220\"\n                        height=\"85\"\n                        fill=\"rgba(0,0,0,0.95)\"\n                        rx=\"6\"\n                        stroke=\"#555\"\n                        strokeWidth=\"1\"\n                      />\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 15}\n                        fill=\"white\"\n                        fontSize=\"11\"\n                        fontWeight=\"600\"\n                      >\n                        {node.name}\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 28}\n                        fill=\"#0078d4\"\n                        fontSize=\"9\"\n                        fontWeight=\"500\"\n                      >\n                        {node.technology}\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 40}\n                        fill=\"#ccc\"\n                        fontSize=\"9\"\n                      >\n                        Records/sec: {node.recordsPerSecond}\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 52}\n                        fill=\"#ccc\"\n                        fontSize=\"9\"\n                      >\n                        Avg Time: {node.avgProcessingTime}ms\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 64}\n                        fill=\"#ccc\"\n                        fontSize=\"9\"\n                      >\n                        Quality: {node.dataQuality}% | RG: {node.resourceGroup.split('-').slice(-2).join('-')}\n                      </text>\n                      <text\n                        x={tooltipX + 10}\n                        y={tooltipY + 76}\n                        fill=\"#52c41a\"\n                        fontSize=\"8\"\n                      >\n                        Click for detailed tech specs →\n                      </text>\n                    </g>\n                  );\n                })}\n              </svg>\n            </div>\n          </div>\n\n          {/* Side Panel */}\n          {selectedNode && (\n            <div className={styles.sidePanel}>\n              <div className={styles.sidePanelHeader}>\n                <h3 className={styles.sidePanelTitle}>{selectedNode.name}</h3>\n                <div className={styles.statusBadge}>\n                  {getStatusIcon(selectedNode.status)}\n                  <span>{selectedNode.status}</span>\n                </div>\n              </div>\n              <div className={styles.sidePanelContent}>\n                <div className={styles.detailSection}>\n                  <h4 className={styles.detailTitle}>Overview</h4>\n                  <p className={styles.detailDescription}>{selectedNode.description}</p>\n                  \n                  <div className={styles.metricGrid}>\n                    <div className={styles.metric}>\n                      <Activity size={16} />\n                      <div>\n                        <div className={styles.metricValue}>{selectedNode.recordsPerSecond}/s</div>\n                        <div className={styles.metricLabel}>\n                          Records per second\n                          <InfoTooltip \n                            content={getTooltipContent('recordsPerSecond')?.content || \"Current throughput rate\"}\n                            title={getTooltipContent('recordsPerSecond')?.title}\n                            detailedContent={getTooltipContent('recordsPerSecond')?.detailedContent}\n                            size=\"small\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className={styles.metric}>\n                      <Clock size={16} />\n                      <div>\n                        <div className={styles.metricValue}>{selectedNode.avgProcessingTime}ms</div>\n                        <div className={styles.metricLabel}>\n                          Avg processing time\n                          <InfoTooltip \n                            content={getTooltipContent('avgProcessingTime')?.content || \"Mean processing time per record\"}\n                            title={getTooltipContent('avgProcessingTime')?.title}\n                            detailedContent={getTooltipContent('avgProcessingTime')?.detailedContent}\n                            size=\"small\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className={styles.metric}>\n                      <BarChart3 size={16} />\n                      <div>\n                        <div className={styles.metricValue}>{selectedNode.dataQuality}%</div>\n                        <div className={styles.metricLabel}>\n                          Data quality\n                          <InfoTooltip \n                            content={getTooltipContent('dataQuality')?.content || \"Data completeness and accuracy score\"}\n                            title={getTooltipContent('dataQuality')?.title}\n                            detailedContent={getTooltipContent('dataQuality')?.detailedContent}\n                            size=\"small\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className={styles.metric}>\n                      <Zap size={16} />\n                      <div>\n                        <div className={styles.metricValue}>{selectedNode.connections.length}</div>\n                        <div className={styles.metricLabel}>\n                          Connections\n                          <InfoTooltip \n                            content={getTooltipContent('connections')?.content || \"Number of connected pipeline components\"}\n                            title={getTooltipContent('connections')?.title}\n                            detailedContent={getTooltipContent('connections')?.detailedContent}\n                            size=\"small\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className={styles.detailSection}>\n                  <h4 className={styles.detailTitle}>Connected Pipelines</h4>\n                  <div className={styles.connectionsList}>\n                    {selectedNode.connections.slice(0, 5).map(connId => {\n                      const connectedNode = nodes.find(n => n.id === connId);\n                      return connectedNode ? (\n                        <div key={connId} className={styles.connectionItem}>\n                          <div \n                            className={styles.connectionDot}\n                            style={{ backgroundColor: getNodeColor(connectedNode) }}\n                          />\n                          <span className={styles.connectionName}>{connectedNode.name}</span>\n                          <span className={styles.connectionType}>{connectedNode.type}</span>\n                        </div>\n                      ) : null;\n                    })}\n                  </div>\n                </div>\n\n                <div className={styles.detailSection}>\n                  <h4 className={styles.detailTitle}>Recent Activity</h4>\n                  <div className={styles.activityItem}>\n                    <div className={styles.activityIcon}>\n                      <CheckCircle size={14} />\n                    </div>\n                    <div>\n                      <div className={styles.activityText}>Last updated</div>\n                      <div className={styles.activityTime}>\n                        {new Date(selectedNode.lastUpdate).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Microsoft Technology Stack Details */}\n                <div className={styles.detailSection}>\n                  <h4 className={styles.detailTitle}>🏗️ Microsoft Technology Stack</h4>\n                  <div className={styles.techDetails}>\n                    <div className={styles.techItem}>\n                      <strong>Service:</strong> {selectedNode.technology}\n                      {selectedNode.technology.includes('Event Hub') && (\n                        <InfoTooltip \n                          content={getTooltipContent('eventHubs')?.content || \"Real-time data streaming platform\"}\n                          title={getTooltipContent('eventHubs')?.title}\n                          detailedContent={getTooltipContent('eventHubs')?.detailedContent}\n                          size=\"small\"\n                        />\n                      )}\n                      {selectedNode.technology.includes('Data Factory') && (\n                        <InfoTooltip \n                          content={getTooltipContent('azureDataFactory')?.content || \"Cloud-based data integration service\"}\n                          title={getTooltipContent('azureDataFactory')?.title}\n                          detailedContent={getTooltipContent('azureDataFactory')?.detailedContent}\n                          size=\"small\"\n                        />\n                      )}\n                      {selectedNode.technology.includes('Stream Analytics') && (\n                        <InfoTooltip \n                          content={getTooltipContent('streamAnalytics')?.content || \"Real-time analytics service\"}\n                          title={getTooltipContent('streamAnalytics')?.title}\n                          detailedContent={getTooltipContent('streamAnalytics')?.detailedContent}\n                          size=\"small\"\n                        />\n                      )}\n                      {selectedNode.technology.includes('Cosmos') && (\n                        <InfoTooltip \n                          content={getTooltipContent('cosmosDB')?.content || \"Globally distributed database service\"}\n                          title={getTooltipContent('cosmosDB')?.title}\n                          detailedContent={getTooltipContent('cosmosDB')?.detailedContent}\n                          size=\"small\"\n                        />\n                      )}\n                      {selectedNode.technology.includes('Data Lake') && (\n                        <InfoTooltip \n                          content={getTooltipContent('dataLake')?.content || \"Scalable data storage for big data\"}\n                          title={getTooltipContent('dataLake')?.title}\n                          detailedContent={getTooltipContent('dataLake')?.detailedContent}\n                          size=\"small\"\n                        />\n                      )}\n                    </div>\n                    <div className={styles.techItem}>\n                      <strong>Resource Group:</strong> {selectedNode.resourceGroup}\n                    </div>\n                    <div className={styles.techItem}>\n                      <strong>Region:</strong> {selectedNode.region}\n                    </div>\n                    {selectedNode.computeType && (\n                      <div className={styles.techItem}>\n                        <strong>Compute:</strong> {selectedNode.computeType}\n                      </div>\n                    )}\n                    {selectedNode.storageType && (\n                      <div className={styles.techItem}>\n                        <strong>Storage:</strong> {selectedNode.storageType}\n                      </div>\n                    )}\n                    {selectedNode.throughputUnits && (\n                      <div className={styles.techItem}>\n                        <strong>Throughput Units:</strong> {selectedNode.throughputUnits}\n                      </div>\n                    )}\n                    <div className={styles.techItem}>\n                      <strong>Partitions:</strong> {selectedNode.partitionCount}\n                    </div>\n                    <div className={styles.techItem}>\n                      <strong>Retention:</strong> {selectedNode.retentionDays} days\n                    </div>\n                  </div>\n                </div>\n\n                {/* Protocols & Authentication */}\n                <div className={styles.detailSection}>\n                  <h4 className={styles.detailTitle}>🔐 Protocols & Security</h4>\n                  <div className={styles.techDetails}>\n                    <div className={styles.techItem}>\n                      <strong>Protocols:</strong> \n                      <InfoTooltip \n                        content=\"Communication protocols used for data transfer and API access\"\n                        title=\"Communication Protocols\"\n                        detailedContent=\"Includes HTTPS for secure web communication, AMQP for messaging, and Kafka for streaming protocols.\"\n                        size=\"small\"\n                      />\n                      <div className={styles.tagList}>\n                        {selectedNode.protocols?.map((protocol, idx) => (\n                          <span key={idx} className={styles.protocolTag}>{protocol}</span>\n                        ))}\n                      </div>\n                    </div>\n                    <div className={styles.techItem}>\n                      <strong>Authentication:</strong> {selectedNode.authentication}\n                      <InfoTooltip \n                        content={getTooltipContent('managedIdentity')?.content || \"Azure's secure authentication solution\"}\n                        title={getTooltipContent('managedIdentity')?.title}\n                        detailedContent={getTooltipContent('managedIdentity')?.detailedContent}\n                        size=\"small\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Monitoring & Observability */}\n                <div className={styles.detailSection}>\n                  <h4 className={styles.detailTitle}>📊 Monitoring & Observability</h4>\n                  <div className={styles.techDetails}>\n                    <div className={styles.techItem}>\n                      <strong>Application Insights:</strong> {selectedNode.monitoring?.applicationInsights}\n                      <InfoTooltip \n                        content={getTooltipContent('applicationInsights')?.content || \"Application performance monitoring service\"}\n                        title={getTooltipContent('applicationInsights')?.title}\n                        detailedContent={getTooltipContent('applicationInsights')?.detailedContent}\n                        size=\"small\"\n                      />\n                    </div>\n                    <div className={styles.techItem}>\n                      <strong>Log Analytics:</strong> {selectedNode.monitoring?.logAnalyticsWorkspace}\n                      <InfoTooltip \n                        content={getTooltipContent('logAnalytics')?.content || \"Centralized logging service\"}\n                        title={getTooltipContent('logAnalytics')?.title}\n                        detailedContent={getTooltipContent('logAnalytics')?.detailedContent}\n                        size=\"small\"\n                      />\n                    </div>\n                    <div className={styles.techItem}>\n                      <strong>Kusto Cluster:</strong> {selectedNode.monitoring?.kustoCluster}\n                      <InfoTooltip \n                        content={getTooltipContent('kusto')?.content || \"Fast data exploration service\"}\n                        title={getTooltipContent('kusto')?.title}\n                        detailedContent={getTooltipContent('kusto')?.detailedContent}\n                        size=\"small\"\n                      />\n                    </div>\n                    <div className={styles.techItem}>\n                      <strong>Alert Rules:</strong>\n                      <InfoTooltip \n                        content=\"Automated monitoring rules that trigger notifications based on system conditions\"\n                        title=\"Alert Rules\"\n                        detailedContent=\"Include performance thresholds, error rate monitoring, resource utilization alerts, and custom business logic triggers.\"\n                        size=\"small\"\n                      />\n                      <div className={styles.alertList}>\n                        {selectedNode.monitoring?.alertRules?.map((rule, idx) => (\n                          <span key={idx} className={styles.alertRule}>{rule}</span>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Dependencies & External Connections */}\n                <div className={styles.detailSection}>\n                  <h4 className={styles.detailTitle}>🔗 Dependencies & External APIs</h4>\n                  <div className={styles.techDetails}>\n                    <div className={styles.techItem}>\n                      <strong>Key Vault:</strong> {selectedNode.dependencies?.keyVault}\n                    </div>\n                    <div className={styles.techItem}>\n                      <strong>Service Accounts:</strong>\n                      <div className={styles.tagList}>\n                        {selectedNode.dependencies?.serviceAccounts?.map((sa, idx) => (\n                          <span key={idx} className={styles.serviceTag}>{sa}</span>\n                        ))}\n                      </div>\n                    </div>\n                    {selectedNode.dependencies?.externalApis && selectedNode.dependencies.externalApis.length > 0 && (\n                      <div className={styles.techItem}>\n                        <strong>External APIs:</strong>\n                        <div className={styles.tagList}>\n                          {selectedNode.dependencies.externalApis.map((api, idx) => (\n                            <span key={idx} className={styles.apiTag}>{api}</span>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    <div className={styles.techItem}>\n                      <strong>Network:</strong>\n                      <div className={styles.tagList}>\n                        {selectedNode.dependencies?.networkConnections?.map((net, idx) => (\n                          <span key={idx} className={styles.networkTag}>{net}</span>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Error Information & Status */}\n                {(selectedNode.hasErrors || selectedNode.status === 'failed' || selectedNode.status === 'warning') && (\n                  <div className={styles.detailSection}>\n                    <h4 className={styles.detailTitle}>\n                      🚨 Error Information & Diagnostics\n                      {selectedNode.errorCount && selectedNode.errorCount > 0 && (\n                        <span className={styles.errorBadge}>{selectedNode.errorCount} errors</span>\n                      )}\n                    </h4>\n                    \n                    {selectedNode.pipelineData?.currentError && (\n                      <div className={styles.errorDetails}>\n                        <div className={styles.errorHeader}>\n                          <AlertTriangle size={16} className={styles.errorIcon} />\n                          <div>\n                            <div className={styles.errorMessage}>\n                              {selectedNode.pipelineData.currentError.errorMessage}\n                            </div>\n                            <div className={styles.errorMeta}>\n                              <span className={styles.errorCode}>\n                                {selectedNode.pipelineData.currentError.errorCode}\n                              </span>\n                              <span className={styles.errorTime}>\n                                {new Date(selectedNode.pipelineData.currentError.timestamp).toLocaleString()}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {selectedNode.pipelineData.currentError.suggestedActions && (\n                          <div className={styles.suggestedActions}>\n                            <strong>Quick Actions:</strong>\n                            <ul>\n                              {selectedNode.pipelineData.currentError.suggestedActions.slice(0, 3).map((action: string, idx: number) => (\n                                <li key={idx}>{action}</li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                        \n                        <button \n                          className={styles.viewFullErrorButton}\n                          onClick={() => setShowErrorModal(true)}\n                        >\n                          <AlertTriangle size={14} />\n                          View Complete Error Details\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Logging & Monitoring Links */}\n                <div className={styles.detailSection}>\n                  <h4 className={styles.detailTitle}>📊 Logs & Monitoring</h4>\n                  <div className={styles.monitoringLinks}>\n                    {selectedNode.pipelineData?.logReferences?.slice(0, 3).map((log: any, idx: number) => (\n                      <button \n                        key={idx}\n                        className={styles.logLink}\n                        onClick={() => window.open(log.logUrl, '_blank')}\n                      >\n                        <Database size={14} />\n                        {log.logSystem.toUpperCase()} Logs\n                      </button>\n                    )) || (\n                      <>\n                        <button \n                          className={styles.logLink}\n                          onClick={() => window.open(`https://portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/${selectedNode.subscriptionId}/resourceGroups/${selectedNode.resourceGroup}/providers/Microsoft.Insights/components/${selectedNode.monitoring?.applicationInsights}/logs`, '_blank')}\n                        >\n                          <Database size={14} />\n                          Application Insights\n                        </button>\n                        <button \n                          className={styles.logLink}\n                          onClick={() => window.open(`https://portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/${selectedNode.subscriptionId}/resourceGroups/${selectedNode.resourceGroup}/providers/Microsoft.OperationalInsights/workspaces/${selectedNode.monitoring?.logAnalyticsWorkspace}`, '_blank')}\n                        >\n                          <Database size={14} />\n                          Log Analytics\n                        </button>\n                        <button \n                          className={styles.logLink}\n                          onClick={() => window.open(`https://${selectedNode.monitoring?.kustoCluster}.kusto.windows.net`, '_blank')}\n                        >\n                          <Database size={14} />\n                          Kusto Explorer\n                        </button>\n                      </>\n                    )}\n                  </div>\n                  \n                  {/* Team Communication Links */}\n                  <div className={styles.communicationLinks}>\n                    {selectedNode.pipelineData?.slackChannel && (\n                      <button \n                        className={styles.commLink}\n                        onClick={() => window.open(`slack://channel?team=T123&id=${selectedNode.pipelineData.slackChannel}`, '_blank')}\n                      >\n                        <Database size={14} />\n                        Slack: #{selectedNode.pipelineData.slackChannel}\n                      </button>\n                    )}\n                    {selectedNode.pipelineData?.teamsChannel && (\n                      <button \n                        className={styles.commLink}\n                        onClick={() => window.open(selectedNode.pipelineData.teamsChannel, '_blank')}\n                      >\n                        <Database size={14} />\n                        Teams Channel\n                      </button>\n                    )}\n                    {selectedNode.pipelineData?.grafanaUrl && (\n                      <button \n                        className={styles.commLink}\n                        onClick={() => window.open(selectedNode.pipelineData.grafanaUrl, '_blank')}\n                      >\n                        <BarChart3 size={14} />\n                        Grafana Dashboard\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Summary Stats */}\n      <div className={styles.summaryGrid}>\n        <div className={styles.summaryCard}>\n          <div className={styles.summaryIcon}>\n            <Database size={24} />\n          </div>\n          <div className={styles.summaryContent}>\n            <div className={styles.summaryValue}>{nodes.filter(n => n.type === 'source').length}</div>\n            <div className={styles.summaryLabel}>Data Sources</div>\n          </div>\n        </div>\n\n        <div className={styles.summaryCard}>\n          <div className={styles.summaryIcon}>\n            <GitBranch size={24} />\n          </div>\n          <div className={styles.summaryContent}>\n            <div className={styles.summaryValue}>\n              {nodes.filter(n => ['ingestion', 'transformation', 'enrichment'].includes(n.type)).length}\n            </div>\n            <div className={styles.summaryLabel}>Processing Pipelines</div>\n          </div>\n        </div>\n\n        <div className={styles.summaryCard}>\n          <div className={styles.summaryIcon}>\n            <ArrowRight size={24} />\n          </div>\n          <div className={styles.summaryContent}>\n            <div className={styles.summaryValue}>{connections.length}</div>\n            <div className={styles.summaryLabel}>Data Flows</div>\n          </div>\n        </div>\n\n        <div className={styles.summaryCard}>\n          <div className={styles.summaryIcon}>\n            <Database size={24} />\n          </div>\n          <div className={styles.summaryContent}>\n            <div className={styles.summaryValue}>{nodes.filter(n => n.type === 'destination').length}</div>\n            <div className={styles.summaryLabel}>Destinations</div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Error Details Modal */}\n      {showErrorModal && selectedNode && selectedNode.pipelineData && (\n        <ErrorDetailsModal\n          isOpen={showErrorModal}\n          onClose={() => setShowErrorModal(false)}\n          pipelineName={selectedNode.pipelineData.name}\n          currentError={selectedNode.pipelineData.currentError}\n          errorHistory={selectedNode.pipelineData.errorHistory || []}\n          logReferences={selectedNode.pipelineData.logReferences || []}\n          metricsHistory={selectedNode.pipelineData.metricsHistory || []}\n          impactAnalysis={selectedNode.pipelineData.impactAnalysis}\n          runbooks={selectedNode.pipelineData.runbooks || []}\n          oncallTeam={selectedNode.pipelineData.oncallTeam || 'MSTIC Data Engineering'}\n          slackChannel={selectedNode.pipelineData.slackChannel}\n          teamsChannel={selectedNode.pipelineData.teamsChannel}\n          dashboardUrl={selectedNode.pipelineData.dashboardUrl}\n          grafanaUrl={selectedNode.pipelineData.grafanaUrl}\n          healthCheckUrl={selectedNode.pipelineData.healthCheckUrl}\n        />\n      )}\n      \n      <HowItWorksModal \n        isOpen={showHowItWorks}\n        onClose={() => setShowHowItWorks(false)}\n        section=\"dataLineage\"\n      />\n    </div>\n  );\n});\n\nDataLineage.displayName = 'DataLineage';\n\nexport default DataLineage;"],"names":["ErrorDetailsModal","isOpen","onClose","pipelineName","currentError","errorHistory","logReferences","metricsHistory","impactAnalysis","runbooks","oncallTeam","slackChannel","teamsChannel","dashboardUrl","grafanaUrl","healthCheckUrl","activeTab","setActiveTab","useState","copiedText","setCopiedText","copyToClipboard","text","label","err","getErrorIcon","errorType","jsx","Zap","styles","TrendingDown","Clock","Users","AlertTriangle","getSeverityColor","severity","jsxs","e","XCircle","Activity","ExternalLink","MessageSquare","tab","Copy","action","index","CheckCircle","key","value","error","log","FileText","pipeline","AlertCircle","dest","runbook","DataLineage","memo","searchTerm","setSearchTerm","selectedSource","setSelectedSource","selectedNode","setSelectedNode","hoveredNode","setHoveredNode","highlightedPath","setHighlightedPath","showErrorModal","setShowErrorModal","showHowItWorks","setShowHowItWorks","svgRef","useRef","seededRandom","seed","hash","i","char","generateLineageData","nodes","connections","sources","source","statusSeed","statusOptions","status","sourcePipelines","mockPipelines","p","sourcePipeline","_a","type","x","sourceGroups","selectedPipelines","typeNodes","node","n","ingestionNode","connectionId","volumeSeed","volumeOptions","volume","sourceNode","transformNode","enrichNode","transformationNode","targetDestinations","destNode","allNodes","allConnections","useMemo","result","nodesWithErrors","filteredConnections","conn","fromNode","toNode","c","enrichConn","useEffect","filteredNodes","highlightPath","nodeId","visited","path","traverse","currentId","connectedId","handleNodeClick","handleNodeDoubleClick","getNodeColor","getConnectionStyle","connection","isHighlighted","getStatusIcon","uniqueSources","HelpCircle","Search","errorNode","style","isSelectedSource","tooltipX","tooltipY","InfoTooltip","getTooltipContent","_b","_c","_d","_e","_f","BarChart3","_g","_h","_i","_j","_k","_l","connId","connectedNode","_m","_n","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","_z","_A","_B","protocol","idx","_C","_D","_E","_F","_G","_H","_I","_J","_K","_L","_M","_N","_O","_P","_Q","_S","_R","rule","_T","_V","_U","sa","_W","api","_Y","_X","net","_Z","_$","__","Database","Fragment","_aa","_ba","_ca","GitBranch","ArrowRight","HowItWorksModal"],"mappings":"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"}