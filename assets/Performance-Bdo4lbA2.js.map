{"version":3,"file":"Performance-Bdo4lbA2.js","sources":["../../src/pages/Performance.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Activity,\n  TrendingUp,\n  Database,\n  Cpu,\n  MemoryStick,\n  AlertTriangle,\n  CheckCircle,\n  Timer,\n  BarChart3,\n  Zap,\n  HelpCircle,\n  Shield\n} from 'lucide-react';\nimport HowItWorksModal from '../components/HowItWorksModal';\nimport ChallengesModal from '../components/ChallengesModal';\nimport styles from './Performance.module.css';\n\ninterface QueryPerformanceMetric {\n  queryId: string;\n  query: string;\n  executionTime: number;\n  resourceUsage: {\n    cpuTime: number;\n    memoryUsage: number;\n    networkIO: number;\n  };\n  recordsScanned: number;\n  recordsReturned: number;\n  scanEfficiency: number;\n  cacheHitRate: number;\n  status: 'optimized' | 'warning' | 'critical';\n  suggestions: string[];\n}\n\ninterface SystemHealth {\n  clusterHealth: {\n    nodeCount: number;\n    activeNodes: number;\n    avgCpuUsage: number;\n    avgMemoryUsage: number;\n    avgDiskUsage: number;\n  };\n  ingestionHealth: {\n    throughput: number;\n    latency: number;\n    errorRate: number;\n    queueSize: number;\n  };\n  queryHealth: {\n    avgExecutionTime: number;\n    concurrentQueries: number;\n    cacheHitRate: number;\n    timeoutRate: number;\n  };\n}\n\nconst Performance: React.FC = () => {\n  const [queryMetrics, setQueryMetrics] = useState<QueryPerformanceMetric[]>([]);\n  const [systemHealth, setSystemHealth] = useState<SystemHealth | null>(null);\n  const [selectedMetric, setSelectedMetric] = useState<QueryPerformanceMetric | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [showHowItWorks, setShowHowItWorks] = useState(false);\n  const [showChallenges, setShowChallenges] = useState(false);\n\n  useEffect(() => {\n    loadPerformanceData();\n    // Set up real-time updates every 30 seconds\n    const interval = setInterval(loadPerformanceData, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const loadPerformanceData = async () => {\n    try {\n      setLoading(true);\n      \n      // In a real implementation, these would be actual Azure Data Explorer queries\n      // For demo purposes, we're generating realistic performance data\n      const mockMetrics: QueryPerformanceMetric[] = [\n        {\n          queryId: 'threat-overview-001',\n          query: 'SecurityEvents | summarize TotalEvents = count(), HighRiskEvents = countif(ThreatLevel == \"Critical\")',\n          executionTime: 1247,\n          resourceUsage: {\n            cpuTime: 0.8,\n            memoryUsage: 156.7,\n            networkIO: 23.4\n          },\n          recordsScanned: 2847592,\n          recordsReturned: 1,\n          scanEfficiency: 99.97,\n          cacheHitRate: 87.3,\n          status: 'optimized',\n          suggestions: ['Consider adding time filters to reduce scan scope']\n        },\n        {\n          queryId: 'geo-threats-002',\n          query: 'SecurityEvents | where ThreatLevel in (\"High\", \"Critical\") | summarize by Country, City',\n          executionTime: 3421,\n          resourceUsage: {\n            cpuTime: 2.1,\n            memoryUsage: 445.2,\n            networkIO: 67.8\n          },\n          recordsScanned: 5847293,\n          recordsReturned: 847,\n          scanEfficiency: 85.4,\n          cacheHitRate: 23.1,\n          status: 'warning',\n          suggestions: [\n            'Add indexed column for ThreatLevel',\n            'Consider partitioning by Country',\n            'Use materialized view for frequent geo queries'\n          ]\n        },\n        {\n          queryId: 'correlation-003',\n          query: 'SecurityEvents | join ThreatIndicators on $left.SourceIP == $right.IP',\n          executionTime: 7834,\n          resourceUsage: {\n            cpuTime: 5.7,\n            memoryUsage: 1205.3,\n            networkIO: 234.7\n          },\n          recordsScanned: 12847592,\n          recordsReturned: 23456,\n          scanEfficiency: 62.8,\n          cacheHitRate: 12.7,\n          status: 'critical',\n          suggestions: [\n            'Optimize join strategy using broadcast hint',\n            'Create lookup table for threat indicators',\n            'Implement incremental processing',\n            'Add time-based partitioning for both tables'\n          ]\n        },\n        {\n          queryId: 'pipeline-health-004',\n          query: 'PipelineMetrics | summarize AvgLatency = avg(Latency), TotalThreats = sum(Threats)',\n          executionTime: 892,\n          resourceUsage: {\n            cpuTime: 0.3,\n            memoryUsage: 78.4,\n            networkIO: 12.1\n          },\n          recordsScanned: 456789,\n          recordsReturned: 12,\n          scanEfficiency: 95.2,\n          cacheHitRate: 94.6,\n          status: 'optimized',\n          suggestions: ['Query is well-optimized for current workload']\n        }\n      ];\n\n      const mockSystemHealth: SystemHealth = {\n        clusterHealth: {\n          nodeCount: 6,\n          activeNodes: 6,\n          avgCpuUsage: 34.7,\n          avgMemoryUsage: 67.2,\n          avgDiskUsage: 23.8\n        },\n        ingestionHealth: {\n          throughput: 847.3, // MB/s\n          latency: 2.4, // seconds\n          errorRate: 0.02, // percentage\n          queueSize: 156\n        },\n        queryHealth: {\n          avgExecutionTime: 2156, // ms\n          concurrentQueries: 23,\n          cacheHitRate: 67.8,\n          timeoutRate: 0.1\n        }\n      };\n\n      setQueryMetrics(mockMetrics);\n      setSystemHealth(mockSystemHealth);\n    } catch (error) {\n      console.error('Failed to load performance data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'optimized': return '#10b981';\n      case 'warning': return '#f59e0b';\n      case 'critical': return '#ef4444';\n      default: return '#6b7280';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'optimized': return <CheckCircle size={16} />;\n      case 'warning': return <AlertTriangle size={16} />;\n      case 'critical': return <AlertTriangle size={16} />;\n      default: return <Activity size={16} />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={styles.loadingContainer}>\n        <Activity className={styles.loadingIcon} />\n        <span>Loading performance metrics...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.performancePage}>\n      <div className={styles.header}>\n        <div className={styles.titleSection}>\n          <BarChart3 className={styles.titleIcon} />\n          <div>\n            <h1>Performance & Optimization\n              <button \n                className={styles.infoButton}\n                onClick={() => setShowHowItWorks(true)}\n                title=\"How does this system work?\"\n              >\n                <HelpCircle size={18} />\n              </button>\n              <button \n                className={`${styles.infoButton} ${styles.challengesButton}`}\n                onClick={() => setShowChallenges(true)}\n                title=\"Implementation Challenges\"\n              >\n                <Shield size={18} />\n              </button>\n            </h1>\n            <p>Real-time query performance, system health, and optimization insights</p>\n          </div>\n        </div>\n        <div className={styles.refreshIndicator}>\n          <Zap size={16} />\n          <span>Auto-refresh: 30s</span>\n        </div>\n      </div>\n\n      {/* System Health Overview */}\n      {systemHealth && (\n        <div className={styles.systemHealthGrid}>\n          <div className={styles.healthCard}>\n            <div className={styles.cardHeader}>\n              <Cpu className={styles.cardIcon} />\n              <h3>Cluster Health</h3>\n            </div>\n            <div className={styles.healthMetrics}>\n              <div className={styles.metric}>\n                <span className={styles.metricLabel}>Active Nodes</span>\n                <span className={styles.metricValue}>\n                  {systemHealth.clusterHealth.activeNodes}/{systemHealth.clusterHealth.nodeCount}\n                </span>\n              </div>\n              <div className={styles.metric}>\n                <span className={styles.metricLabel}>CPU Usage</span>\n                <span className={styles.metricValue}>{systemHealth.clusterHealth.avgCpuUsage}%</span>\n              </div>\n              <div className={styles.metric}>\n                <span className={styles.metricLabel}>Memory Usage</span>\n                <span className={styles.metricValue}>{systemHealth.clusterHealth.avgMemoryUsage}%</span>\n              </div>\n            </div>\n          </div>\n\n          <div className={styles.healthCard}>\n            <div className={styles.cardHeader}>\n              <Database className={styles.cardIcon} />\n              <h3>Ingestion Health</h3>\n            </div>\n            <div className={styles.healthMetrics}>\n              <div className={styles.metric}>\n                <span className={styles.metricLabel}>Throughput</span>\n                <span className={styles.metricValue}>{systemHealth.ingestionHealth.throughput} MB/s</span>\n              </div>\n              <div className={styles.metric}>\n                <span className={styles.metricLabel}>Latency</span>\n                <span className={styles.metricValue}>{systemHealth.ingestionHealth.latency}s</span>\n              </div>\n              <div className={styles.metric}>\n                <span className={styles.metricLabel}>Error Rate</span>\n                <span className={styles.metricValue}>{systemHealth.ingestionHealth.errorRate}%</span>\n              </div>\n            </div>\n          </div>\n\n          <div className={styles.healthCard}>\n            <div className={styles.cardHeader}>\n              <Activity className={styles.cardIcon} />\n              <h3>Query Performance</h3>\n            </div>\n            <div className={styles.healthMetrics}>\n              <div className={styles.metric}>\n                <span className={styles.metricLabel}>Avg Execution</span>\n                <span className={styles.metricValue}>{systemHealth.queryHealth.avgExecutionTime}ms</span>\n              </div>\n              <div className={styles.metric}>\n                <span className={styles.metricLabel}>Cache Hit Rate</span>\n                <span className={styles.metricValue}>{systemHealth.queryHealth.cacheHitRate}%</span>\n              </div>\n              <div className={styles.metric}>\n                <span className={styles.metricLabel}>Concurrent</span>\n                <span className={styles.metricValue}>{systemHealth.queryHealth.concurrentQueries}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Query Performance Metrics */}\n      <div className={styles.queryMetricsSection}>\n        <h2>Query Performance Analysis</h2>\n        <div className={styles.metricsGrid}>\n          {queryMetrics.map((metric) => (\n            <div\n              key={metric.queryId}\n              className={`${styles.metricCard} ${selectedMetric?.queryId === metric.queryId ? styles.selected : ''}`}\n              onClick={() => setSelectedMetric(metric)}\n            >\n              <div className={styles.metricHeader}>\n                <div className={styles.statusIndicator} style={{ color: getStatusColor(metric.status) }}>\n                  {getStatusIcon(metric.status)}\n                  <span className={styles.statusText}>{metric.status}</span>\n                </div>\n                <span className={styles.metricId}>{metric.queryId}</span>\n              </div>\n              \n              <div className={styles.metricQuery}>\n                <code>{metric.query.substring(0, 100)}...</code>\n              </div>\n\n              <div className={styles.metricStats}>\n                <div className={styles.stat}>\n                  <Timer size={14} />\n                  <span>{metric.executionTime}ms</span>\n                </div>\n                <div className={styles.stat}>\n                  <TrendingUp size={14} />\n                  <span>{metric.scanEfficiency.toFixed(1)}% efficient</span>\n                </div>\n                <div className={styles.stat}>\n                  <MemoryStick size={14} />\n                  <span>{metric.resourceUsage.memoryUsage.toFixed(1)} MB</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Detailed View */}\n      {selectedMetric && (\n        <div className={styles.detailView}>\n          <h3>Query Analysis: {selectedMetric.queryId}</h3>\n          \n          <div className={styles.detailGrid}>\n            <div className={styles.detailCard}>\n              <h4>Execution Metrics</h4>\n              <div className={styles.detailMetrics}>\n                <div className={styles.detailMetric}>\n                  <span>Execution Time</span>\n                  <span>{selectedMetric.executionTime}ms</span>\n                </div>\n                <div className={styles.detailMetric}>\n                  <span>Records Scanned</span>\n                  <span>{selectedMetric.recordsScanned.toLocaleString()}</span>\n                </div>\n                <div className={styles.detailMetric}>\n                  <span>Records Returned</span>\n                  <span>{selectedMetric.recordsReturned.toLocaleString()}</span>\n                </div>\n                <div className={styles.detailMetric}>\n                  <span>Scan Efficiency</span>\n                  <span>{selectedMetric.scanEfficiency.toFixed(2)}%</span>\n                </div>\n              </div>\n            </div>\n\n            <div className={styles.detailCard}>\n              <h4>Resource Usage</h4>\n              <div className={styles.detailMetrics}>\n                <div className={styles.detailMetric}>\n                  <span>CPU Time</span>\n                  <span>{selectedMetric.resourceUsage.cpuTime}s</span>\n                </div>\n                <div className={styles.detailMetric}>\n                  <span>Memory Usage</span>\n                  <span>{selectedMetric.resourceUsage.memoryUsage.toFixed(1)} MB</span>\n                </div>\n                <div className={styles.detailMetric}>\n                  <span>Network I/O</span>\n                  <span>{selectedMetric.resourceUsage.networkIO.toFixed(1)} MB</span>\n                </div>\n                <div className={styles.detailMetric}>\n                  <span>Cache Hit Rate</span>\n                  <span>{selectedMetric.cacheHitRate.toFixed(1)}%</span>\n                </div>\n              </div>\n            </div>\n\n            <div className={styles.detailCard}>\n              <h4>Optimization Suggestions</h4>\n              <div className={styles.suggestions}>\n                {selectedMetric.suggestions.map((suggestion, index) => (\n                  <div key={index} className={styles.suggestion}>\n                    <CheckCircle size={14} />\n                    <span>{suggestion}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className={styles.queryCode}>\n            <h4>Full Query</h4>\n            <pre><code>{selectedMetric.query}</code></pre>\n          </div>\n        </div>\n      )}\n      \n      <HowItWorksModal \n        isOpen={showHowItWorks}\n        onClose={() => setShowHowItWorks(false)}\n        section=\"performance\"\n      />\n      \n      <ChallengesModal\n        isOpen={showChallenges}\n        onClose={() => setShowChallenges(false)}\n        section=\"performance\"\n      />\n    </div>\n  );\n};\n\nexport default Performance;\n"],"names":["Performance","queryMetrics","setQueryMetrics","useState","systemHealth","setSystemHealth","selectedMetric","setSelectedMetric","loading","setLoading","showHowItWorks","setShowHowItWorks","showChallenges","setShowChallenges","useEffect","loadPerformanceData","interval","mockMetrics","mockSystemHealth","error","getStatusColor","status","getStatusIcon","jsx","CheckCircle","AlertTriangle","Activity","jsxs","styles","BarChart3","HelpCircle","Shield","Zap","Cpu","Database","metric","Timer","TrendingUp","MemoryStick","suggestion","index","HowItWorksModal","ChallengesModal"],"mappings":"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"}