{"version":3,"file":"Overview-CiMrBD2r.js","sources":["../../src/pages/Overview.tsx"],"sourcesContent":["import { useState, useEffect, useMemo, memo } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\nimport { Activity, AlertTriangle, TrendingUp, Server, RefreshCw, HelpCircle } from 'lucide-react';\nimport { mockPipelines, mockAlerts } from '../data/mockData';\nimport type { Pipeline } from '../types';\nimport HowItWorksModal from '../components/HowItWorksModal';\nimport InfoTooltip from '../components/InfoTooltip';\nimport { getTooltipContent } from '../utils/tooltipContent';\nimport styles from './Overview.module.css';\n\nconst Overview = memo(() => {\n  const [pipelines] = useState<Pipeline[]>(mockPipelines);\n  const [alerts] = useState(mockAlerts);\n  const [currentIngestionRate, setCurrentIngestionRate] = useState(1247);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastRefresh, setLastRefresh] = useState(new Date());\n  const [showHowItWorks, setShowHowItWorks] = useState(false);\n\n  // Generate mock ingestion rate data for the last 24 hours\n  const [ingestionData] = useState(() => {\n    const data = [];\n    const now = new Date();\n    for (let i = 23; i >= 0; i--) {\n      const time = new Date(now.getTime() - i * 60 * 60 * 1000);\n      data.push({\n        time: time.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),\n        rate: Math.floor(Math.random() * 500) + 800 // Random rate between 800-1300\n      });\n    }\n    return data;\n  });\n\n  // Auto-refresh simulation every 5 seconds\n  useEffect(() => {\n    setIsLoading(false);\n    \n    const interval = setInterval(() => {\n      // Fluctuate ingestion rate slightly\n      setCurrentIngestionRate(prev => {\n        const change = (Math.random() - 0.5) * 100; // Â±50 change\n        const newRate = Math.max(800, Math.min(1500, prev + change));\n        return Math.floor(newRate);\n      });\n      setLastRefresh(new Date());\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Calculate metrics using useMemo for performance\n  const metrics = useMemo(() => ({\n    totalPipelines: pipelines.length,\n    healthyPipelines: pipelines.filter(p => p.status === 'healthy').length,\n    warningPipelines: pipelines.filter(p => p.status === 'warning').length,\n    failedPipelines: pipelines.filter(p => p.status === 'failed').length,\n    processingPipelines: pipelines.filter(p => p.status === 'processing').length,\n  }), [pipelines]);\n\n  const { totalPipelines, healthyPipelines, warningPipelines, failedPipelines, processingPipelines } = metrics;\n  \n  const unresolvedAlerts = alerts.filter(a => !a.resolved).length;\n  const criticalAlerts = alerts.filter(a => !a.resolved && a.severity === 'critical').length;\n  const warningAlerts = alerts.filter(a => !a.resolved && (a.severity === 'high' || a.severity === 'medium')).length;\n\n  // Calculate system health score (0-100)\n  const systemHealthScore = Math.round(\n    (healthyPipelines * 100 + warningPipelines * 70 + processingPipelines * 85) / totalPipelines\n  );\n\n  // Status distribution data for donut chart\n  const statusData = [\n    { name: 'Healthy', value: healthyPipelines, color: '#52c41a' },\n    { name: 'Warning', value: warningPipelines, color: '#faad14' },\n    { name: 'Failed', value: failedPipelines, color: '#f5222d' },\n    { name: 'Processing', value: processingPipelines, color: '#1890ff' }\n  ];\n\n  // Get top 5 failing pipelines\n  const failingPipelines = pipelines\n    .filter(p => p.status === 'failed' || p.status === 'warning')\n    .sort((a, b) => b.failureRate - a.failureRate)\n    .slice(0, 5);\n\n  // Team-based analytics with enhanced calculations\n  const teamMetrics = pipelines.reduce((acc, pipeline) => {\n    const team = pipeline.ownerTeam || 'Unknown';\n    if (!acc[team]) {\n      acc[team] = { \n        total: 0, \n        healthy: 0, \n        failed: 0, \n        warning: 0, \n        processing: 0,\n        avgFailureRate: 0,\n        totalFailureRate: 0\n      };\n    }\n    acc[team].total++;\n    acc[team][pipeline.status as keyof typeof acc[typeof team]]++;\n    acc[team].totalFailureRate += pipeline.failureRate;\n    return acc;\n  }, {} as Record<string, any>);\n\n  const teamHealthData = Object.entries(teamMetrics)\n    .map(([team, metrics]) => {\n      const healthPercentage = Math.round((metrics.healthy / metrics.total) * 100);\n      const avgFailureRate = Math.round((metrics.totalFailureRate / metrics.total) * 100) / 100;\n      \n      return {\n        team: team.length > 15 ? team.substring(0, 15) + '...' : team,\n        fullTeam: team,\n        healthPercentage,\n        avgFailureRate,\n        total: metrics.total,\n        healthy: metrics.healthy,\n        failed: metrics.failed,\n        warning: metrics.warning,\n        processing: metrics.processing\n      };\n    })\n    .filter(team => team.total >= 3) // Only show teams with at least 3 pipelines\n    .sort((a, b) => b.healthPercentage - a.healthPercentage)\n    .slice(0, 8); // Show top 8 teams\n\n  // Data classification insights\n  const classificationData = pipelines.reduce((acc, pipeline) => {\n    const classification = pipeline.dataClassification || 'Unknown';\n    if (!acc[classification]) {\n      acc[classification] = { total: 0, healthy: 0, failed: 0 };\n    }\n    acc[classification].total++;\n    if (pipeline.status === 'healthy') acc[classification].healthy++;\n    if (pipeline.status === 'failed') acc[classification].failed++;\n    return acc;\n  }, {} as Record<string, any>);\n\n  const classificationChartData = Object.entries(classificationData).map(([name, data]) => ({\n    name,\n    total: data.total,\n    healthy: data.healthy,\n    failed: data.failed,\n    healthPercentage: Math.round((data.healthy / data.total) * 100)\n  }));\n\n  // SLA compliance analysis\n  const slaBreaches = pipelines.filter(p => {\n    const slaMinutes = p.slaRequirement || 60;\n    const lastRun = new Date(p.lastRun);\n    const now = new Date();\n    const minutesSinceLastRun = (now.getTime() - lastRun.getTime()) / (1000 * 60);\n    return minutesSinceLastRun > slaMinutes && p.status !== 'processing';\n  });\n\n  const slaComplianceRate = Math.round(((pipelines.length - slaBreaches.length) / pipelines.length) * 100);\n\n  const getHealthScoreColor = (score: number) => {\n    if (score >= 90) return '#52c41a';\n    if (score >= 75) return '#faad14';\n    if (score >= 60) return '#ff7a45';\n    return '#f5222d';\n  };\n\n  if (isLoading) {\n    return (\n      <div className={styles.overview}>\n        <div className={styles.loadingContainer}>\n          <RefreshCw className={styles.loadingIcon} />\n          <span>Loading dashboard...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.overview}>\n      {/* Header */}\n      <div className={styles.header}>\n        <div className={styles.headerContent}>\n          <div className={styles.titleSection}>\n            <h1 className={styles.title}>\n              Threat Intelligence Pipeline Dashboard\n              <button \n                className={styles.infoButton}\n                onClick={() => setShowHowItWorks(true)}\n                title=\"How does this system work?\"\n              >\n                <HelpCircle size={18} />\n              </button>\n            </h1>\n            <p className={styles.subtitle}>Real-time monitoring and analytics</p>\n          </div>\n          <div className={styles.headerActions}>\n            <div className={styles.refreshInfo}>\n              <RefreshCw className={styles.refreshIcon} />\n              <span className={styles.refreshText}>\n                Last updated: {lastRefresh.toLocaleTimeString()}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Real-time Metrics Header */}\n      <div className={styles.metricsHeader}>\n        <div className={styles.metricCard}>\n          <div className={styles.metricHeader}>\n            <Server className={styles.metricIcon} />\n            <span className={styles.metricTitle}>\n              Total Pipelines\n              <InfoTooltip \n                content={getTooltipContent('totalPipelines')?.content || \"Total number of threat intelligence pipelines\"}\n                title={getTooltipContent('totalPipelines')?.title}\n                detailedContent={getTooltipContent('totalPipelines')?.detailedContent}\n                position=\"top\"\n                size=\"medium\"\n              />\n            </span>\n          </div>\n          <div className={styles.metricValue}>{totalPipelines}</div>\n          <div className={styles.metricBreakdown}>\n            <span className={styles.statusBadge} style={{ backgroundColor: '#52c41a' }}>\n              {healthyPipelines} Healthy\n            </span>\n            <span className={styles.statusBadge} style={{ backgroundColor: '#faad14' }}>\n              {warningPipelines} Warning\n            </span>\n            <span className={styles.statusBadge} style={{ backgroundColor: '#f5222d' }}>\n              {failedPipelines} Failed\n            </span>\n            <span className={styles.statusBadge} style={{ backgroundColor: '#1890ff' }}>\n              {processingPipelines} Processing\n            </span>\n          </div>\n        </div>\n\n        <div className={styles.metricCard}>\n          <div className={styles.metricHeader}>\n            <TrendingUp className={styles.metricIcon} />\n            <span className={styles.metricTitle}>\n              Ingestion Rate\n              <InfoTooltip \n                content={getTooltipContent('ingestionRate')?.content || \"Data ingestion rate across all pipelines\"}\n                title={getTooltipContent('ingestionRate')?.title}\n                detailedContent={getTooltipContent('ingestionRate')?.detailedContent}\n                position=\"top\"\n                size=\"medium\"\n              />\n            </span>\n          </div>\n          <div className={styles.metricValue}>{currentIngestionRate.toLocaleString()}</div>\n          <div className={styles.metricSubtext}>files/hour</div>\n        </div>\n\n        <div className={styles.metricCard}>\n          <div className={styles.metricHeader}>\n            <AlertTriangle className={`${styles.metricIcon} ${styles.warning}`} />\n            <span className={styles.metricTitle}>\n              Active Alerts\n              <InfoTooltip \n                content={getTooltipContent('activeAlerts')?.content || \"Unresolved alerts requiring attention\"}\n                title={getTooltipContent('activeAlerts')?.title}\n                detailedContent={getTooltipContent('activeAlerts')?.detailedContent}\n                position=\"top\"\n                size=\"medium\"\n              />\n            </span>\n          </div>\n          <div className={styles.metricValue}>{unresolvedAlerts}</div>\n          <div className={styles.metricSubtext}>\n            {criticalAlerts} critical, {warningAlerts} warnings\n          </div>\n        </div>\n\n        <div className={styles.metricCard}>\n          <div className={styles.metricHeader}>\n            <Activity className={styles.metricIcon} />\n            <span className={styles.metricTitle}>\n              System Health\n              <InfoTooltip \n                content={getTooltipContent('systemHealthScore')?.content || \"Overall system health percentage\"}\n                title={getTooltipContent('systemHealthScore')?.title}\n                detailedContent={getTooltipContent('systemHealthScore')?.detailedContent}\n                position=\"top\"\n                size=\"medium\"\n              />\n            </span>\n          </div>\n          <div \n            className={styles.metricValue}\n            style={{ color: getHealthScoreColor(systemHealthScore) }}\n          >\n            {systemHealthScore}%\n          </div>\n          <div className={styles.metricSubtext}>Overall system health</div>\n        </div>\n\n        <div className={styles.metricCard}>\n          <div className={styles.metricHeader}>\n            <Activity className={styles.metricIcon} />\n            <span className={styles.metricTitle}>\n              SLA Compliance\n              <InfoTooltip \n                content={getTooltipContent('slaCompliance')?.content || \"Percentage meeting SLA requirements\"}\n                title={getTooltipContent('slaCompliance')?.title}\n                detailedContent={getTooltipContent('slaCompliance')?.detailedContent}\n                position=\"top\"\n                size=\"medium\"\n              />\n            </span>\n          </div>\n          <div \n            className={styles.metricValue} \n            style={{ color: getHealthScoreColor(slaComplianceRate) }}\n          >\n            {slaComplianceRate}%\n          </div>\n          <div className={styles.metricSubtext}>\n            {slaBreaches.length} SLA breaches\n            <InfoTooltip \n              content={getTooltipContent('slaBreaches')?.content || \"Pipelines exceeding SLA requirements\"}\n              title={getTooltipContent('slaBreaches')?.title}\n              detailedContent={getTooltipContent('slaBreaches')?.detailedContent}\n              position=\"top\"\n              size=\"small\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Main Dashboard Grid (3x2) */}\n      <div className={styles.dashboardGrid}>\n        {/* Pipeline Status Donut Chart */}\n        <div className={styles.chartCard}>\n          <h3 className={styles.chartTitle}>\n            Pipeline Status Distribution\n            <InfoTooltip \n              content={getTooltipContent('pipelineStatusDistribution')?.content || \"Breakdown of pipelines by operational status\"}\n              title={getTooltipContent('pipelineStatusDistribution')?.title}\n              detailedContent={getTooltipContent('pipelineStatusDistribution')?.detailedContent}\n              position=\"top\"\n              size=\"medium\"\n            />\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={statusData}\n                cx=\"50%\"\n                cy=\"50%\"\n                innerRadius={80}\n                outerRadius={120}\n                paddingAngle={2}\n                dataKey=\"value\"\n              >\n                {statusData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip \n                formatter={(value, name) => [`${value} pipelines`, name]}\n                contentStyle={{ \n                  backgroundColor: '#252526', \n                  border: '1px solid #333',\n                  borderRadius: '6px'\n                }} \n              />\n            </PieChart>\n          </ResponsiveContainer>\n          <div className={styles.chartLegend}>\n            {statusData.map((entry, index) => (\n              <div key={index} className={styles.legendItem}>\n                <div \n                  className={styles.legendColor} \n                  style={{ backgroundColor: entry.color }}\n                />\n                <span>{entry.name}: {entry.value}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Team Health Performance */}\n        <div className={styles.chartCard}>\n          <h3 className={styles.chartTitle}>\n            Team Health Performance\n            <InfoTooltip \n              content={getTooltipContent('teamHealthPerformance')?.content || \"Health score rankings by team\"}\n              title={getTooltipContent('teamHealthPerformance')?.title}\n              detailedContent={getTooltipContent('teamHealthPerformance')?.detailedContent}\n              position=\"top\"\n              size=\"medium\"\n            />\n            <span className={styles.chartSubtitle}>Health Score by Team (min. 3 pipelines)</span>\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={320}>\n            <BarChart data={teamHealthData} layout=\"horizontal\" margin={{ top: 5, right: 30, left: 120, bottom: 5 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n              <XAxis \n                type=\"number\" \n                tick={{ fill: '#ccc', fontSize: 12 }}\n                domain={[0, 100]}\n                tickFormatter={(value) => `${value}%`}\n              />\n              <YAxis \n                type=\"category\" \n                dataKey=\"team\" \n                tick={{ fill: '#ccc', fontSize: 10 }}\n                width={115}\n              />\n              <Tooltip \n                formatter={(value, name) => {\n                  if (name === 'healthPercentage') return [`${value}%`, 'Health Score'];\n                  return [value, name];\n                }}\n                labelFormatter={(label) => {\n                  const teamData = teamHealthData.find(t => t.team === label);\n                  return teamData ? `Team: ${teamData.fullTeam}` : `Team: ${label}`;\n                }}\n                contentStyle={{ \n                  backgroundColor: '#252526', \n                  border: '1px solid #333',\n                  borderRadius: '6px'\n                }}\n                content={({ active, payload }) => {\n                  if (active && payload && payload[0]) {\n                    const data = payload[0].payload;\n                    return (\n                      <div style={{ \n                        backgroundColor: '#252526', \n                        border: '1px solid #333',\n                        borderRadius: '6px',\n                        padding: '8px'\n                      }}>\n                        <p style={{ color: '#fff', margin: 0, fontWeight: 'bold' }}>\n                          {data.fullTeam}\n                        </p>\n                        <p style={{ color: '#52c41a', margin: '4px 0' }}>\n                          Health Score: {data.healthPercentage}%\n                        </p>\n                        <p style={{ color: '#ccc', margin: '2px 0', fontSize: '12px' }}>\n                          Total Pipelines: {data.total}\n                        </p>\n                        <p style={{ color: '#52c41a', margin: '2px 0', fontSize: '12px' }}>\n                          Healthy: {data.healthy}\n                        </p>\n                        <p style={{ color: '#faad14', margin: '2px 0', fontSize: '12px' }}>\n                          Warning: {data.warning}\n                        </p>\n                        <p style={{ color: '#f5222d', margin: '2px 0', fontSize: '12px' }}>\n                          Failed: {data.failed}\n                        </p>\n                        <p style={{ color: '#1890ff', margin: '2px 0', fontSize: '12px' }}>\n                          Processing: {data.processing}\n                        </p>\n                      </div>\n                    );\n                  }\n                  return null;\n                }}\n              />\n              <Bar \n                dataKey=\"healthPercentage\" \n                radius={[0, 4, 4, 0]}\n              >\n                {teamHealthData.map((entry, index) => (\n                  <Cell \n                    key={`cell-${index}`} \n                    fill={\n                      entry.healthPercentage >= 90 ? '#52c41a' :\n                      entry.healthPercentage >= 75 ? '#faad14' :\n                      entry.healthPercentage >= 60 ? '#ff7a45' : '#f5222d'\n                    } \n                  />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n          <div className={styles.teamHealthLegend}>\n            <div className={styles.legendItem}>\n              <div className={styles.legendColor} style={{ backgroundColor: '#52c41a' }} />\n              <span>Excellent (90%+)</span>\n            </div>\n            <div className={styles.legendItem}>\n              <div className={styles.legendColor} style={{ backgroundColor: '#faad14' }} />\n              <span>Good (75-89%)</span>\n            </div>\n            <div className={styles.legendItem}>\n              <div className={styles.legendColor} style={{ backgroundColor: '#ff7a45' }} />\n              <span>Fair (60-74%)</span>\n            </div>\n            <div className={styles.legendItem}>\n              <div className={styles.legendColor} style={{ backgroundColor: '#f5222d' }} />\n              <span>Poor (&lt;60%)</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Data Classification Security */}\n        <div className={styles.chartCard}>\n          <h3 className={styles.chartTitle}>\n            Data Classification Status\n            <InfoTooltip \n              content={getTooltipContent('dataClassificationStatus')?.content || \"Pipeline health by data security classification\"}\n              title={getTooltipContent('dataClassificationStatus')?.title}\n              detailedContent={getTooltipContent('dataClassificationStatus')?.detailedContent}\n              position=\"top\"\n              size=\"medium\"\n            />\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={classificationChartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n              <XAxis \n                dataKey=\"name\" \n                tick={{ fill: '#ccc', fontSize: 11 }}\n                angle={-45}\n                textAnchor=\"end\"\n                height={80}\n              />\n              <YAxis tick={{ fill: '#ccc' }} />\n              <Tooltip \n                formatter={(value, name) => {\n                  if (name === 'healthy') return [`${value} pipelines`, 'Healthy'];\n                  if (name === 'failed') return [`${value} pipelines`, 'Failed'];\n                  return [value, name];\n                }}\n                contentStyle={{ \n                  backgroundColor: '#252526', \n                  border: '1px solid #333',\n                  borderRadius: '6px'\n                }} \n              />\n              <Bar dataKey=\"healthy\" stackId=\"a\" fill=\"#52c41a\" />\n              <Bar dataKey=\"failed\" stackId=\"a\" fill=\"#f5222d\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Ingestion Rate Line Chart */}\n        <div className={styles.chartCard}>\n          <h3 className={styles.chartTitle}>\n            Ingestion Rate (Last 24 Hours)\n            <InfoTooltip \n              content={getTooltipContent('ingestionRateTrend')?.content || \"Real-time data ingestion volume over 24 hours\"}\n              title={getTooltipContent('ingestionRateTrend')?.title}\n              detailedContent={getTooltipContent('ingestionRateTrend')?.detailedContent}\n              position=\"top\"\n              size=\"medium\"\n            />\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={ingestionData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n              <XAxis \n                dataKey=\"time\" \n                tick={{ fill: '#ccc', fontSize: 11 }}\n                interval={2}\n              />\n              <YAxis \n                tick={{ fill: '#ccc' }}\n                domain={['dataMin - 50', 'dataMax + 50']}\n              />\n              <Tooltip \n                labelFormatter={(label) => `Time: ${label}`}\n                formatter={(value) => [`${value} files/hour`, 'Ingestion Rate']}\n                contentStyle={{ \n                  backgroundColor: '#252526', \n                  border: '1px solid #333',\n                  borderRadius: '6px'\n                }} \n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"rate\" \n                stroke=\"#1890ff\" \n                strokeWidth={2}\n                dot={{ fill: '#1890ff', strokeWidth: 0, r: 3 }}\n                activeDot={{ r: 5, stroke: '#1890ff', strokeWidth: 2 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Top 5 Failing Pipelines */}\n        <div className={styles.chartCard}>\n          <h3 className={styles.chartTitle}>\n            Top Failing Pipelines\n            <InfoTooltip \n              content={getTooltipContent('topFailingPipelines')?.content || \"Pipelines with highest failure rates requiring attention\"}\n              title={getTooltipContent('topFailingPipelines')?.title}\n              detailedContent={getTooltipContent('topFailingPipelines')?.detailedContent}\n              position=\"top\"\n              size=\"medium\"\n            />\n          </h3>\n          <div className={styles.failingPipelinesTable}>\n            <div className={styles.tableHeader}>\n              <span>Pipeline</span>\n              <span>Team</span>\n              <span>Status</span>\n              <span>Failure Rate</span>\n              <span>SLA</span>\n            </div>\n            {failingPipelines.map((pipeline) => (\n              <div key={pipeline.id} className={styles.tableRow}>\n                <div className={styles.pipelineName}>\n                  <span className={styles.name}>{pipeline.name}</span>\n                  <span className={styles.source}>{pipeline.source}</span>\n                </div>\n                <span className={styles.team}>{pipeline.ownerTeam}</span>\n                <span className={`${styles.status} ${styles[pipeline.status]}`}>\n                  {pipeline.status}\n                </span>\n                <span className={styles.failureRate}>\n                  {pipeline.failureRate.toFixed(1)}%\n                </span>\n                <span className={styles.sla}>\n                  {pipeline.slaRequirement}m\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      <HowItWorksModal \n        isOpen={showHowItWorks}\n        onClose={() => setShowHowItWorks(false)}\n        section=\"overview\"\n      />\n    </div>\n  );\n});\n\nOverview.displayName = 'Overview';\n\nexport default Overview;\n"],"names":["Overview","memo","pipelines","useState","mockPipelines","alerts","mockAlerts","currentIngestionRate","setCurrentIngestionRate","isLoading","setIsLoading","lastRefresh","setLastRefresh","showHowItWorks","setShowHowItWorks","ingestionData","data","now","i","time","useEffect","interval","prev","change","newRate","metrics","useMemo","p","totalPipelines","healthyPipelines","warningPipelines","failedPipelines","processingPipelines","unresolvedAlerts","a","criticalAlerts","warningAlerts","systemHealthScore","statusData","failingPipelines","b","teamMetrics","acc","pipeline","team","teamHealthData","healthPercentage","avgFailureRate","classificationData","classification","classificationChartData","name","slaBreaches","slaMinutes","lastRun","slaComplianceRate","getHealthScoreColor","score","jsx","styles","jsxs","RefreshCw","HelpCircle","Server","InfoTooltip","_a","getTooltipContent","_b","_c","TrendingUp","_d","_e","_f","AlertTriangle","_g","_h","_i","Activity","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","_u","ResponsiveContainer","PieChart","Pie","entry","index","Cell","Tooltip","value","_v","_w","_x","BarChart","CartesianGrid","XAxis","YAxis","label","teamData","t","active","payload","Bar","_y","_z","_A","_B","_C","_D","LineChart","Line","_E","_F","_G","HowItWorksModal"],"mappings":"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"}